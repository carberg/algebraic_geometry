///////////////////////////////////////////////////////////////////////////////
info="
AUTHOR:  Yao Sun (sunyao@amss.ac.cn)
OVERVIEW:
In Kapur et al (ISSAC, 2010), a new method for computing a comprehensive 
Gr\"obner system of a parameterized polynomial system was proposed 
and its efficiency over other known methods was effectively demonstrated. 
Based on those insights, a new approach is proposed for computing a 
comprehensive Gr\"obner basis of a parameterized polynomial system.  
The key new idea is not to simplify a polynomial under various 
specialization of its parameters, but rather keep track in the polynomial, 
of the power products whose coefficients vanish; this is achieved by 
partitioning the polynomial into two parts--\emph{nonzero} part and 
\emph{zero} part for the specialization under consideration. During 
the computation of a comprehensive Gr\"obner system, for a particular 
branch corresponding to a specialization of parameter values, nonzero 
parts of the polynomials dictate the computation, i.e., computing 
S-polynomials as well as for simplifying a polynomial with respect to other 
polynomials; but the manipulations on the whole polynomials (including 
their zero parts) are also performed. Gr\"obner basis computations on such 
pairs of polynomials can also be viewed as Gr\"obner basis computations 
on a module. Once a comprehensive Gr\"obner system is generated, both 
nonzero and zero parts of the  polynomials are collected from every branch 
and the result is a \emph{ faithful} comprehensive Gr\"obner basis, to mean 
that every polynomial in a comprehensive Gr\"obner basis belongs to the 
ideal of the original parameterized polynomial system. This technique 
should be applicable to other algorithms for computing a comprehensive 
Gr\"obner system as well, thus producing both a comprehensive Gr\"obner 
system as well as a faithful comprehensive Gr\"obner basis of a 
parameterized polynomial system simultaneously. The approach is exhibited 
by adapting the recently proposed method for computing a comprehensive 
Gr\"obner system in (ISSAC, 2010) for computing a comprehensive Gr\"obner 
basis. The timings on a collection of examples demonstrate that this new 
algorithm for computing comprehensive Gr\"obner bases has better performance 
than other existing algorithms.

For more details, please \"Computing Comprehensive Gr\"obner Systems and 
Comprehensive Gr\"obner Bases Simultaneously\" by Deepak Kapur, Yao Sun 
and Dingkang Wang, ISSAC 2011.

PROCEDURES:
  cgs(polys,vars,pars,R1,R2);     comprehensive Groebner systems

KEYWORDS: comprehensive Gr\"obner system, comprehensive Gr\"obner basis
";

LIB "ring.lib";
	
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

proc Add_Aux_Polys(ideal polys)
{
  if (size(polys) == 0)
  {
    return(polys);
  }

  ideal MPolys;

  for (int i = 1; i <= size(polys); i++)
  {
    MPolys = MPolys + (polys[i] * Auxiliary[1]);
  }

  return(MPolys);
}

proc Add_Aux_Equ(ideal Equ)
{
  if (size(Equ) == 0)
  {
    return(Equ);
  }

  ideal MEqu;

  for (int i = 1; i <= size(Equ); i++)
  {
    MEqu = MEqu + (Equ[i] * Auxiliary[1] - Equ[i] * Auxiliary[2]);
  }

  return(MEqu);
}


proc Radical_Equ(ideal Equ)
{
  if (size(Equ) == 0)
  {
    return(Equ);
  }
  ideal SqrEqu; 
  list EquFactors;
  poly tempP;
  int i, j, flag;

  for (i = 1; i <= size(Equ); i++)
  {
    EquFactors = factorize(Equ[i], 2);

    flag = 0;
    for (j = 1; j <= size(EquFactors[2]); j++)
    {
      if (EquFactors[2][j] > 1)
      {
        flag = 1;
	break;
      }
    }
    if (flag)
    {
      tempP = 1;
      for (j = 1; j <= size(EquFactors[1]); j++)
      {
        tempP = tempP * EquFactors[1][j];
      }
      SqrEqu = SqrEqu + tempP;
    }
  }

  if (size(SqrEqu))
  {
    return(groebner(Equ + SqrEqu));
  }
  else
  {
    return(Equ);
  }
}


proc Simplify_DisEqu(list DisEqu, ideal Equ)
{
  list newDisEqu;
  ideal DisFactors;
  poly tempP;
  int i, j, k, flag;


  for (i = 1; i <= size(DisEqu); i++)
  {
    DisFactors = factorize(DisEqu[i], 1);
    for (j = 1; j <= size(DisFactors); j++)
    {
      if (size(Equ))
      {
        tempP = reduce(DisFactors[j], Equ);
      }
      else
      {
        tempP = DisFactors[j];
      }
      
      if (leadmonom(tempP) != 1)
      {
	flag = 1;
	for (k = 1; k <= size(newDisEqu); k++)
	{
	  if (newDisEqu[k] == tempP)
	  {
	    flag = 0;
	    break;
	  }
	}
	if (flag)
	{
	  newDisEqu = newDisEqu + list(tempP);
	}
      }
    }
  }

  return(newDisEqu);
}

proc Simplify_Equ(ideal Equ, list DisEqu)
{
  if (size(Equ) == 0)
  {
    return(Equ);
  }
  if (Equ[1] == 1)
  {
    return(Equ);
  }
  
  ideal newEqu, tempGB;
  int i, j;

  newEqu = Equ;

  for (i = 1; i <= size(DisEqu); i++)
  {
    if ((deg(DisEqu[i]) > 3) || (size(DisEqu[i]) > 5))
    {
      i++;
      continue;
    }

    tempGB = groebner(newEqu + (DisEqu[i] * VMinDPoly - 1));
    if (tempGB[1] == 1)
    {
      return(ideal(1)); 
    }

    newEqu = ideal();
    for (j = 1; j <= size(tempGB); j++)
    {
      if (VMinDPoly > tempGB[j])
      {
        newEqu = newEqu + tempGB[j];
      }
    }
  }

  return(groebner(newEqu));

}


//Checks=[total, tri-check, 0dim-check, c-check, i-check, gen-check];
proc Check_Consistence_CGB(ideal Equ, list DisEqu)
{
  //printf("Check the consistence of:");
  //printf("E = ");
  //show(Equ);
  //printf("N = %s.", DisEqu);
  // Basering is K[A, X, U].
  Checks[1] = Checks[1] + 1;


  //trivial checks
  if (!size(Equ))
  {
    Checks[2] = Checks[2] + 1;
    return(1);
  }

  if (Equ[1] == 1)
  {
    Checks[2] = Checks[2] + 1;
    return(0);
  }


  if (!size(DisEqu))
  {
    Checks[2] = Checks[2] + 1;
    return(1);
  }

  //normal form
  poly DE = 1;
  int i, j;

  for (i = 1; i <= size(DisEqu); i++)
  {
    DE = reduce(DE * DisEqu[i], Equ);
    if (DE == 0)
    {
      Checks[2] = Checks[2] + 1;
      return(0);
    }
  }

  //c-check
  int ctimes = 1;
  ideal LM;

  for (i = 1; i <= size(Equ); i++)
  {
    LM = LM + leadmonom(Equ[i]);
  }
  LM = groebner(LM);
  intvec Indvec = indepSet(LM);

  list Indvar;
  for (i = size(Variables) + 3; i <= size(Indvec); i++)
  {
    if (Indvec[i] != 0)
    {
      Indvar = Indvar + list(Parameters[i - size(Variables)-2]);
    }
  }

  ideal tempGB, Spe;


  if (size(Indvar))
  {
    for (i = 1; i <= ctimes; i++)
    {
      for (j = 1; j <= size(Indvar); j++)
      {
        Spe = Spe + (Indvar[j] - random(-50, 50));
      }

      tempGB = groebner(Equ + Spe + (DE * VMinDPoly - 1));

      if (tempGB[1] != 1)
      {
        Checks[4] = Checks[4] + 1;
	return(1);
      }
    }
  }
  
  //i-check
  int itimes = 3;
  poly newDE = DE;
  poly res, tempDE;
  tempGB = groebner(Equ);
  for (i = 1; i <= itimes; i++)
  {
    if (size(newDE) > 20)
    {
      break;
    }
    
    res = 0;
    tempDE = newDE;
    for (j = 1; j <= size(newDE); j++)
    {
      res = res + reduce(lead(tempDE) * newDE, tempGB);
      tempDE = tempDE - lead(tempDE);
    }

    if (res == 0)
    {
      Checks[5] = Checks[5] + 1;
      return(0);
    }
    newDE = res;
  }


  //general check
  tempGB = groebner(Equ + (DE * VMinDPoly - 1));

  if (tempGB[1] == 1)
  {
    Checks[6] = Checks[6] + 1;
    return(0);
  }
  else
  {
    Checks[6] = Checks[6] + 1;
    return(1);
  }

}


proc Trivial_Poly(ideal polys)
{
  poly tripoly = 0;

  if (polys[1] == Auxiliary[2])
  {
    tripoly = Auxiliary[2];
    return(tripoly);
  }

  for (int i = 1; i <= size(polys); i++)
  {
    if (Auxiliary[1] == leadmonom(polys[i]))
    {
      tripoly = polys[i];
      break;
    }
  }

  return(tripoly);
}


proc Remove_Aux(poly mp);
{
  ideal SpeAux = groebner(ideal(Auxiliary[1] - 1, Auxiliary[2] - 1));

  poly newmp = reduce(mp, SpeAux);

  return(newmp);
}


proc Divides_MPolys(ideal polys)
{
  ideal AllVarPolys;
  list Gr, MGr;
  ideal U = groebner(ideal(Auxiliary[1] - 1, Auxiliary[2]));
  int i;
  poly UV = Auxiliary[1] * Auxiliary[2];

  for (i = 1; i <= size(polys); i++)
  {
    if (UV == polys[i])
    {
      i++;
      continue;
    }
    
    if (Auxiliary[1] <= polys[i])
    {
      if (Auxiliary[1] * VMinDPoly > polys[i])
      {
        MGr = MGr + list(polys[i]);
	Gr = Gr + list(reduce(polys[i], U));
      }
      else
      {
        AllVarPolys = AllVarPolys + polys[i];
      }
    }
  }

  return(AllVarPolys, Gr, MGr);
}





//1: c1>c2
proc Bigger(list c1 , list c2)
{
  int i, flag;

  if (c1[1] > c2[1])
  {
    return(1);
  }

  if (c1[1] < c2[1])
  {
    return(0);
  }

  if (size(c1[2]) > size(c2[2]))
  {
    return(1);
  }

  return(0);
}



proc Get_MDBasis(ideal GB)
{
  setring(@RUA);
  ideal newGB = imap(@AXU, GB);
  list MDBasis, MList, LCoefs;
  poly P, mon;
  int i, j;


  for (i = 1; i <= size(newGB); i++)
  {
    P = newGB[i];
    mon = leadmonom(P);

    for (j = 1; j <= size(MList); j++)
    {
      if (mon/MList[j] > 1)
      {
        mon = 0;
        break;
      }
    }
    if (mon == 0)
    {
      i++;
      continue;
    }
    for (j = i + 1; j <= size(newGB); j++)
    {
      if (mon/leadmonom(newGB[j]) > 1)
      {
        mon = 0;
         break;
      }
    }
    if (mon == 0)
    {
      i ++;
      continue;
    }

    MDBasis = MDBasis + list(P);
    MList = MList + list(mon);
    LCoefs = LCoefs + list(leadcoef(P));
  }

  int MDBasisLength = size(MDBasis);
  int MListLength = size(MList);
  int LCoefsLength = size(LCoefs);

  setring(@AXU);
  if (MDBasisLength)
  {
    list MDBasis =  imap(@RUA, MDBasis);
  }
  if (MListLength)
  {
    list MList =  imap(@RUA, MList);
  }

  if (LCoefsLength)
  {
    list LCoefs = imap(@RUA, LCoefs);
  }


  list tempFactors;
  ideal CoefLsub;
  poly tempP;

  for (i = 1; i <= size(LCoefs); i++)
  {
    CoefLsub = factorize(LCoefs[i], 1);
    tempP = CoefLsub[1];
    for (j = 2; j <= size(CoefLsub); j++)
    {
      if (CoefLsub[j] > tempP)
      {
        tempP = CoefLsub[j];
      }
    }
    tempFactors = tempFactors + list(list(tempP, CoefLsub));
  }

  int k, flag;
  list newMDBasis, LeadCoeffFactors, tempM;

  for (i = 1; i <= size(tempFactors); i++)
  {
    flag = 0;
    for (j = 1; j <= size(tempM); j++)
    {
      if (tempM[j] == MList[i])
      {
        flag = 1;
	break;
      }
    }
    if (flag)
    {
      i++;
      continue;
    }
    
    flag = 1;
    for (j = i + 1; j <= size(tempFactors); j++)
    {
      if ((MList[i] == MList[j]) && (Bigger(tempFactors[i], tempFactors[j]))) 
      {
        flag = 0;
	break;
      }
    }
    if (flag)
    {
      tempM = tempM + list(MList[i]);
      newMDBasis = newMDBasis + list(MDBasis[i]);
      
      for (j = 1; j <= size(tempFactors[i][2]); j++)
      {
        if (tempFactors[i][2][j] == 1)
        {
	  j++;
	  continue;
        }
        
        flag = 1;
        for (k = 1; k <= size(LeadCoeffFactors); k++)
        {
	  if (LeadCoeffFactors[k] == tempFactors[i][2][j])
	  {
	    flag = 0;
	    break;
	  }
	}
	if (flag)
	{
	  LeadCoeffFactors = LeadCoeffFactors + list(tempFactors[i][2][j]);
	}
      }
    }
  }
  
  return(newMDBasis, LeadCoeffFactors);
}




proc cgb_mod_main(ideal MPolys, ideal Equ, list DisEqu)
{
  ideal GB, AllVarPolys, CGB;
  list Gr, MGr, MDBasis, LeadCoeffFactors;
  poly tempP, H;
  int i;

  ideal newEqu = groebner(Equ);
  newEqu = Radical_Equ(newEqu);
  list newDisEqu = Simplify_DisEqu(DisEqu, newEqu);
  newEqu = Simplify_Equ(newEqu, newDisEqu);
  

  //check consistence of (Equ, DisEqu)
  if (!Check_Consistence_CGB(newEqu, newDisEqu))
  {
    return(ideal());
  }

  ideal newMEqu = Add_Aux_Equ(newEqu);

  //compute the full elinimating Grobner basis
  ideal MixIdeals = MPolys + newMEqu;
  //GB = groebner(MPolys + newMEqu + ideal(Auxiliary[1] * Auxiliary[2]));

  // This is the part to see if the computation only on non-zero part can terminate soon.
  //ideal U = std(ideal(Auxiliary[1] - 1, Auxiliary[2]));
  //ideal V = std(ideal(Auxiliary[1], Auxiliary[2] - 1));

  //if (size(MixIdeals) > 0) {
  //for (i = 1; i <= size(MixIdeals); i++) {
  //  MixIdeals[i] = reduce(MixIdeals[i], U) * Auxiliary[1];
  //    }
  //  }
  // End of this part.

  GB = std(MixIdeals);

  tempP = Trivial_Poly(GB);
  
  if (tempP != 0)
  {
    Modcgs = Modcgs + list(list(newEqu, newDisEqu, list(tempP)));
    return(ideal(Remove_Aux(tempP)));
  }

  //get minimal Dickson basis
  AllVarPolys, Gr, MGr = Divides_MPolys(GB);
  MDBasis, LeadCoeffFactors = Get_MDBasis(AllVarPolys);

  //trivial branches
  for (i = 1; i <= size(Gr); i++)
  {
    tempP = reduce(Gr[i], newEqu);
    if (tempP == 0)
    {
      i++;
      continue;
    }

    if (Check_Consistence_CGB(newEqu, newDisEqu + list(tempP)))
    {
      Modcgs = Modcgs + list(list(newEqu, newDisEqu + list(tempP), list(MGr[i])));
      CGB = CGB + Remove_Aux(MGr[i]);
    }
    newEqu = groebner(newEqu + tempP);
  }

  //major branch
  if (Check_Consistence_CGB(newEqu, newDisEqu + LeadCoeffFactors))
  {
    Modcgs = Modcgs + list(list(newEqu, newDisEqu + LeadCoeffFactors, MDBasis));
    for (i = 1; i <= size(MDBasis); i++)
    {
      CGB = CGB + Remove_Aux(MDBasis[i]);
    }
  }

  //other branches
  list tempDisEqu;

  // randomize the order of LeadCoeffFactors.
  LeadCoeffFactors = randomize(LeadCoeffFactors);

  for (i = 1; i <= size(LeadCoeffFactors); i++)
  {
    //CGB = CGB + cgb_mod_main(AllVarPolys, newEqu + LeadCoeffFactors[i], newDisEqu + tempDisEqu);
    CGB = CGB + cgb_mod_main(MPolys, newEqu + LeadCoeffFactors[i], newDisEqu + tempDisEqu);
    tempDisEqu = tempDisEqu + list(LeadCoeffFactors[i]);
  }


  // Make polynomials in CGB monic w.r.t. K[U, X].
  if (size(CGB) > 0) {
    for (i = 1; i <= size(CGB); i++) {
      CGB[i] = CGB[i] / leadcoef(CGB[i]);
    }
  }

  return(CGB);
}

proc listContains_prime(list l, poly f) {
  if (size(l) == 0) {
    return (0);
  } 

  int i;
  for (i = 1; i <= size(l); i++) {
    if (l[i] == f) {
      return (1);
    }
  }

  return (0);
}

proc randomize(list lcs) {
  int n = size(lcs);

  if (n <= 1) {
    return (lcs);
  }

  list rd_lcs;
  list checked_indices;

  while (size(checked_indices) < n) {
    int cur_idx = random(1, n);
    while (listContains_prime(checked_indices, cur_idx)) {
      cur_idx = random(1, n);
    }
    rd_lcs = insert(rd_lcs, lcs[cur_idx], size(rd_lcs));
    checked_indices = insert(checked_indices, cur_idx, size(checked_indices));
  }

  return (rd_lcs);
}

proc extend_ring_with_aux(list ring_list) {
  string aux1 = "auxU";
  string aux2 = "auxV";
  list ring_var_config = ring_list;
  list tmp_config = ring_var_config;
  int i;

  ring_var_config[2][1] = aux1;
  ring_var_config[2][2] = aux2;
  int nVar = size(tmp_config[2]);

  // Add auxiliary variable names.
  for (i = 1; i <= nVar; i++) {
    ring_var_config[2][2 + i] = tmp_config[2][i];
  }

  // Add the ordering for auxiliary variables.
  string ord_var = ring_var_config[3][1][1];
  for (i = size(ring_var_config[3]); i >= 1; i--) {
    ring_var_config[3][i+1] = ring_var_config[3][i];
  }
  ring_var_config[3][1] = list(ord_var, intvec(1, 1));

  return (ring_var_config);
}


proc set_global_rings() {
  // Base ring is R[U][X].
  def BR = basering;
  def br_list = ringlist(BR);
  
  // Make the ordering of parameters consistent with variables.
  //string ord_var = br_list[3][1][1];
  //br_list[1][3][1][1] = ord_var;

  // Extend R[U][X] to R[U][A, X] where A is the set of auxiliary variables.
  def @RUA = ring(extend_ring_with_aux(br_list));

  // Get R[U].
  def Rax = ringlist(@RUA);
  def @U = ring(Rax[1]);

  // Get R[A, X, U] with auxiliary variables.
  Rax[1] = 0;
  def D = ring(Rax);
  def @AXU = D + @U;

  // Set as global.
  exportto(Top, @RUA);
  exportto(Top, @U);
  exportto(Top, @AXU);

  // Set ring to R[A, X, U].
  setring(@AXU);
}	

// This is the top-level function.
proc cgb_mod(ideal Polys, ideal Equ, list DisEqu, link out)
{
  // BR is R[U][X].
  def BR = basering;

  option(redSB);

  set_global_rings(ordering);

  // Base ring is R[A, X, U] now.
  // Set Variable List.
  // Switch to R[U][X].
  setring(BR);
  list Variables;
  int i;
  for (i = 1; i <= nvars(BR); i++) {
    Variables[i] = var(i);
  }
  // Switch back to R[A, X, U] and copy Variables.
  setring(@AXU);
  def Variables = imap(BR, Variables);

  // Set Parameter List.
  // Switch to R[U].
  setring(@U);
  list Parameters;
  for (i = 1; i <= nvars(@U); i++) {
    Parameters[i] = var(i);
  }
  // Swtich back to R[U][A, X] and copy Parameters.
  setring(@AXU);
  def Parameters = imap(@U, Parameters);

  // Set Auxiliary Variable List.
  list Auxiliary;
  Auxiliary[1] = var(1);
  Auxiliary[2] = var(2);

  poly VMinDPoly = Variables[size(Variables)];
  list Checks = 0, 0, 0, 0, 0, 0;
  list Modcgs;
  export(Variables, Parameters, Auxiliary, VMinDPoly, Checks, Modcgs);

  // copy Polys, Equ and DisEqu to R[A, X, U].
  def Polys = imap(BR, Polys);	
  ideal MPolys = Add_Aux_Polys(Polys);

  setring(BR);

  if (size(Equ) == 0) {
    if (size(DisEqu) == 0) {
      setring(@AXU);
      ideal G = cgb_mod_main(MPolys, ideal(), list());
    } else {
      setring(@AXU);
      def DisEqu = imap(BR, DisEqu);
      ideal G = cgb_mod_main(MPolys, ideal(), DisEqu);
    }
  } else {
    if (size(DisEqu) == 0) {
      setring(@AXU);
      def Equ = imap(BR, Equ);
      ideal G = cgb_mod_main(MPolys, Equ, list());
    } else {
      setring(@AXU);
      def Equ = imap(BR, Equ);
      def DisEqu = imap(BR, DisEqu);
      ideal G = cgb_mod_main(MPolys, Equ, DisEqu);
    }
  }

  // Remove auxiliary variables from Modcgs.
  Modcgs = remove_aux_from_modcgs(Modcgs);

  if (defined(debug_mode) && debug_mode == 2) {
    fprintf(out, "%snumber of checkes: %s", newline, newline) ;
    fprintf(out, "trivial checks: %s", string(Checks[2]))	    ;
    fprintf(out, "0-dim checks: %s", string(Checks[3]))	    ;
    fprintf(out, "c-checks: %s", string(Checks[4]))	    ;
    fprintf(out, "i-checks: %s", string(Checks[5]))	    ;
    fprintf(out, "general checks: %s", string(Checks[6]))	    ;
    fprintf(out, "total checks: %s%s", string(Checks[1]), newline) ;
  }
	

  // Switch to R[U][X], and copy G and Modcgs.
  setring(BR);
  def G = imap(@AXU, G);
  def Modcgs = imap(@AXU, Modcgs);

  return(G, Modcgs);
}

proc remove_aux_from_modcgs(list modcgs) {
  // Base ring is R[U][A, X].
  ideal U = groebner(ideal(Auxiliary[1] - 1, Auxiliary[2]));
  ideal V = groebner(ideal(Auxiliary[1], Auxiliary[2] - 1));
  int i, j;
  poly p1, p0;
  list l;

  // Traverse each branch.
  for (i = 1; i <= size(modcgs); i++) {
    if (size(modcgs[i][3]) > 0) {
      for (j = 1; j <= size(modcgs[i][3]); j++) {
        // For each poly in GB of branch i.
	p1 = reduce(modcgs[i][3][j], U);
	p0 = reduce(modcgs[i][3][j], V);
        l = p1, p0;
	modcgs[i][3][j] = l;
      }
    }
  }

  return(modcgs);
}

proc StringCGB(ideal cgb)
{
  string Str = newline + "Comprehensive Groebner Basis: " + newline + newline;
  //ideal Factors;
  int i, j;

  for (i = 1; i < size(cgb); i++)
  {
    Str = Str + string(cgb[i]) + "," + newline;
  }
  Str = Str + string(cgb[size(cgb)]) + "." + newline + newline;
  
  return(Str);
}


proc StringModCGS_mod(list modcgs)
{
  // BR is R[U][X].
  def BR = basering;
  // Copy modcgs to R[U][A, X];
  setring(@RUA);
  def modcgs = imap(BR, modcgs);
  // Switch to R[A, X, U].
  setring(@AXU);
  def modcgs = imap(BR, modcgs);

  string Str = newline + "Module Comprehensive Groebner Systems: " + newline + newline;
  //ideal U = groebner(ideal(Auxiliary[1] - 1, Auxiliary[2]));
  //ideal V = groebner(ideal(Auxiliary[1], Auxiliary[2] - 1));
  int i, j;

  // Show by branch.
  for (i = 1; i <= size(modcgs); i++)
  {
    Str = Str + "Branch " + string(i) + ":" + newline + "constraints: ";

    // Show branch specifications.
    for (j = 1; j <= size(modcgs[i][1]); j++)
    {
      if (modcgs[i][1][j] != 0)
      {
        Str = Str + string(modcgs[i][1][j]) + "=0,";
      }
    }
    for (j = 1; j <= size(modcgs[i][2]); j++)
    {
      if (modcgs[i][2][j] != 1)
      {
        Str = Str + string(modcgs[i][2][j]) + "!=0,";
      }
    }
    Str = Str + newline + "Module Groebner basis: " + newline;

   // Show Groebner Bases.
   setring(@RUA);
   if (size(modcgs[i][3]) == 0) {
     Str = Str + "[  ]." + newline + newline;
   } else {
     for (j = 1; j < size(modcgs[i][3]); j++) {
       Str = Str + "[" + string(modcgs[i][3][j][1])
	  + ", " + string(modcgs[i][3][j][2]) + "], " + newline ;
     }
     Str = Str + "[" + string(modcgs[i][3][size(modcgs[i][3])][1])
	  + " , " + string(modcgs[i][3][size(modcgs[i][3])][2]) + "]."
	  + newline + newline;
   }
   setring(@AXU);
	
  }

  // Switch back to R[U][X].
  setring(BR);
  return(Str);
}


