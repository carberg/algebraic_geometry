LIB "mcgb.lib";

proc traceReduction(poly f, ideal RGB) {
  if (size(RGB) == 0) {
    return (list(), 0);
  }

  list quo;
  int i;
  for (i = 1; i <= size(RGB); i++) {
    quo = insert(quo, 0, size(quo));
  }
  poly rem = 0;
  int flag = 0;
  poly m;
  poly cur_quotient = 0;

  while (f != 0) {
    flag = 0;
    for (i = 1; i <= size(RGB); i++) {
      m = leadmonom(f) / leadmonom(RGB[i]);
      if (m != 0) {
	// RGB[i] can reduce f.
	cur_quotient = (leadcoef(f) / leadcoef(RGB[i])) * m;
	f = f - cur_quotient * RGB[i];
	quo[i] = quo[i] + cur_quotient;
	flag = 1;
	break;
      }
    }

    if (f != 0 && !flag) {
      // lead(f) cannot be reduced by RGB.
      f = f - lead(f);
      rem = rem + lead(f);
    }
  }

  return (quo, rem);

}

proc getCriticalIdeal(poly f, ideal G) {
  // Basering is @RP.
  list quos;
  poly rem;
  
  (quos, rem) = traceReduction(f, G);
  
  if (rem !=0) {
    return (ideal());
  }

  ideal I_res;
  int i;
  poly gen_poly;
  for (i = 1; i <= size(G); i++) {
    gen_poly = quos[i] * leadcoef_U(G[i]);
    I_res = I_res + gen_poly;
  }

  return (I_res);
}
