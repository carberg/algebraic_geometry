LIB "poly.lib";
LIB "primdec.lib";
LIB "qhmoduli.lib";
LIB "teachstd.lib";

LIB "../CGB/cgb_mod.lib";

proc set_global_rings_mcgb() {
  // Basering is K[U][X].
  def BR = basering;
  def @R = basering;

  def Rx = ringlist(BR);
  def @P = ring(Rx[1]);
  
  Rx[1] = 0;
  def D = ring(Rx);
  def @RP = D + @P;
  
  exportto(Top, @R);
  exportto(Top, @P);
  exportto(Top, @RP);

  setring(BR);
}

proc ideal_exclude(ideal I, ideal J) {
  // Basering is @RP.
  if (size(I) == 0) {
    return (ideal());
  }

  if (size(J) == 0) {
    return (I);
  }

  poly prod_J = 1;
  int i, j;
  for (i = 1; i <= size(J); i++) {
    prod_J = prod_J * J[i];
  }
  ideal FL_J = factorize(prod_J, 1);

  for (i = 1; i <= size(I); i++) {
    for (j = 1; j <= size(FL_J); j++) {
      if (reduce(I[i], groebner(ideal(FL_J[j]))) == 0) {
	I[i] = I[i] / FL_J[j];
      }
    }
  }

  return (radical(I));
}

proc getNSquareFreeFromProd(poly h) {
  // Basering is @RP.
  ideal FL = factorize(h, 1);
  if (size(FL) == 0) {
    return (list(0));
  }

  int i;
  list res_list;
  for (i = 1; i <= size(FL); i++) {
    res_list = insert(res_list, FL[i], size(res_list));
  }

  return (res_list);
}

proc idealUnion(ideal I, ideal J) {
  // Basering is @RP.
  int i;
  int n = size(I);

  for (i = 1; i <= size(J); i++) {
    I[n + i] = J[i];
  }

  return (I);
}

proc redRepN(ideal E, list N, poly c) {
  // Basering is @RP.
  ideal E1 = radical(idealUnion(E, ideal(c)));
 
  poly h = 1;
  if (size(N) > 0) {
    int i;
    for (i = 1; i <= size(N); i++) {
      h = h * N[i];
    }
  }

  ideal res_E = ideal_exclude(E1, ideal(h));
  
  return (res_E, N);
}

proc redRepNN(ideal E, list N, poly c) {
  // Basering is @RP.
  int i;
  poly N_prod = 1;

  if (size(N) > 0) {
    for (i = 1; i <= size(N); i++) {
      N_prod = N_prod * N[i];
    }
  }

  poly h1 = reduce(N_prod * c, E);
  ideal newE = ideal_exclude(E, groebner(ideal(h1)));
  list newN = getNSquareFreeFromProd(h1);

  return (newE, newN);
}

proc splitBranch(ideal E, list N, poly c) {
  // Basering is @RP.
  list res_list;

  ideal E0;
  list N0;
  (E0, N0) = redRepN(E, N, c);
  list sub1 = E0, N0;
  res_list = insert(res_list, sub1, size(res_list));
  list sub2;
  if (groebner(E0)[1] == 1) {
    // (E0, N0) is inconsistent.
    sub2 = E, N;
  } else {
    ideal E1;
    list N1;
    (E1, N1) = redRepNN(E, N, c);
    sub2 = E1, N1;
  }
  res_list = insert(res_list, sub2, size(res_list));
  return (res_list);
}

proc checkNull(poly c, ideal E, list N) {
  // Basering is @RP.
  ideal ERad = radical(E);
  if (reduce(c, groebner(ERad)) == 0) {
    return (1);
  } else {
    return (0);
  }
}

proc checkNullRRep(poly c, ideal E, list N) {
  // Basering is @RP.

  if (reduce(c, groebner(E)) == 0) {
    return (1);
  } 

  return (0);
}

proc checkNonNull(poly c, ideal E, list N) {
  // Basering is @RP.
  list sub_branches = splitBranch(E, N, c);
  if (sub_branches[1][1] == 1) {
    return (1);
  } else { 
    return (0); 
  }
}

proc makeRRepInBranch(ideal E, list N) {
  // Basering is @RP.
  if (size(E) == 0 && size(N) == 0) {
    return (ideal(), list(1));
  }

  ideal newE = radical(E);
  
  poly prod_N = 1;
  int i;
  for (i = 1; i <= size(N); i++) {
    prod_N = prod_N * N[i];
  }
  poly prod_N_rem = reduce(prod_N, newE);
  ideal FL_N = factorize(prod_N_rem, 1);

  list newN;
  if (size(FL_N) == 0) {
    newN = 0;
  } else {
    for (i = 1; i <= size(FL_N); i++) {
      newN = insert(newN, FL_N[i], size(newN));
    }
  }

  return (newE, newN);
}

proc makeRRep(list modcgs) {
  // Basering is @RP.
  list modcgsRed;
  int i;
  for (i = 1; i <= size(modcgs); i++) {
    ideal E;
    list N;
    (E, N) = makeRRepInBranch(modcgs[i][1], modcgs[i][2]);
    list branch = E, N, modcgs[i][3];
    modcgsRed = insert(modcgsRed, branch, size(modcgsRed));
  }

  return (modcgsRed);
}

proc appearsInBranch(poly f, list branch) {
  // Basering is @RP.
  if (size(branch[3]) == 0) {
    return (0);
  } 

  ideal E = branch[1];
  list N = branch[2];

  int i;
  for (i = 1; i <= size(branch[3]); i++) {
    poly g = branch[3][i][1] + branch[3][i][2];
    if (g == f || g == -f) {
      return (1);
    } else {
      // TODO: make it consistent with the definition.
      
    }
  }

  return (0);
}

proc lppX(poly P) {
  int flag = 0;
  if (nameof(basering) != "@R") {
    def BR = basering;
    setring(@R);
    flag = 1;
    def P = imap(BR, P);
  }

  def m = leadmonom(P);
  if (flag) {
    setring(BR);
    def m = imap(@R, m);
  }

  return (m);
}

proc leadcoef_U(poly P) {
  int flag = 0;
  if (nameof(basering) != "@R") {
    def BR = basering;
    setring(@R);
    flag = 1;
    def P = imap(BR, P);
  }

  poly C = leadcoef(P);
  
  if (flag) {
    setring(BR);
    def C = imap(@R, C);
  }

  return (C);
}

proc lm_X(poly P) {
  int flag = 0;
  if (nameof(basering) != "@R") {
    def BR = basering;
    setring(@R);
    flag = 1;
    def P = imap(BR, P);
  }

  def T = lead(P);
  if (flag) {
    setring(BR);
    def T = imap(@R, T);
  }

  return (T);
}

proc deletePolyFromList(list L, poly f) {
  // Basering is @RP.
  if (size(L) == 0) {
    return (list());
  }

  int i;
  for (i = 1; i <= size(L); i++) {
    if (f == L[i]) {
      L = delete(L, i);
      break;
    }
  }

  return (L);
}

proc getCandidatePolys(poly pp, list M, ideal E) {
  if (size(M) == 0) {
    return (list());
  }

  int i;
  list G_can;
  for (i = 1; i <= size(M); i++) {
    poly cur_g = M[i];
    while (cur_g != 0) {
      if (lppX(cur_g) == pp) {
	if (reduce(leadcoef_U(cur_g), E) != 0) {
	  G_can = insert(G_can, M[i], size(G_can));
	}
	break;
      }
      cur_g = cur_g - lm_X(cur_g);
    }
  }

  return (G_can);
}

proc deletePolyFromG(list G, poly f) {
  // Basering is @RP.
  if (size(G) == 0) {
    return (list());
  }

  int i;
  for (i = 1; i <= size(G); i++) {
    if (G[i][1] + G[i][2] == f) {
      G = delete(G, i);
      break;
    }
  }

  return (G);
}

proc insertPolyIntoG(list G, poly f, ideal E, list N) {
  // Basering is @RP.
  poly f_null;
  poly f_nonnull;
  
  while (f > 0) {
    poly cur_coef = leadcoef_U(f);
    if (checkNullRRep(cur_coef, E, N)) {
      f_null = f_null + lm_X(f);
    } else {
      f_nonnull = f_nonnull + lm_X(f);
    }
    f = f - lm_X(f);
  }

  list l = f_nonnull, f_null;
  G = insert(G, l, size(G));
  return (G);
}

proc checkEssentialByHC(poly f, poly pf, list higher_coefs, poly g, list G_can, ideal E, list N, list G_branch, list BL) {
  // Basering is @RP.
  if (size(higher_coefs) == 0) {
    // {g} covers f in (E, N).
    G_branch = deletePolyFromG(G_branch, f);
    G_branch = insertPolyIntoG(G_branch, g, E, N);
    BL = insert(BL, list(E, N, G_branch), size(BL));
    return (0, BL);
  } else {
    int i;
    for (i = 1; i <= size(higher_coefs); i++) {
      poly cur_c = higher_coefs[i];
      
      if (checkNullRRep(cur_c, E, N)) {
	// sigma(cur_c) is always 0.
	i++;
	continue;
      } else {
	if (checkNonNull(cur_c, E, N)) {
	  // sigma(cur_c) is never 0.
	  G_can = deletePolyFromList(G_can, g);
	  return (checkEssentialInBranch(f, pf, G_can, E, N, G_branch, BL));
	} else {
	  // sigma(cur_c) is not determined.
	  list branches = splitBranch(E, N, cur_c);
	  int is_essential;
	  (is_essential, BL) = checkEssentialInBranch(f, pf, G_can, branches[1][1], branches[1][2], G_branch, BL);
	  if (is_essential) {
	    return (1, BL);
	  } else {
	    G_can = deletePolyFromList(G_can, g);
	    return (checkEssentialInBranch(f, pf, G_can, branches[2][1], branches[2][2], G_branch, BL));
	  }
	}
      }

    }

    G_branch = deletePolyFromG(G_branch, f);
    G_branch = insertPolyIntoG(G_branch, g, E, N);
    BL = insert(BL, list(E, N, G_branch), size(BL));
    return (0, BL);
  }
}

proc getHigherCoefs(poly f, poly pp) {
  // Basering is @RP.
  list higher_coefs;
  while (lppX(f) > pp) {
    higher_coefs = insert(higher_coefs, leadcoef_U(f), size(higher_coefs));
    f = f - lm_X(f);
  }

  return (higher_coefs);
}

proc getCoefOfPP(poly f, poly pp) {
  // Basering is @RP.
  while (lppX(f) >= pp) {
    if (lppX(f) == pp) {
      return (leadcoef_U(f));
    }
    f = f - lm_X(f);
  }

  return (0);
}

proc checkEssentialInBranch(poly f, poly pf, list M, ideal E, list N, list G_branch, list BL) {
  // Basering is @RP.
  list G_can = getCandidatePolys(pf, M, E);

  if (size(G_can) == 0) {
    list branch = E, N, G_branch;
    BL = insert(BL, branch, size(BL));
    return (1, BL);
  }

  poly g = G_can[1];
  list higher_coefs = getHigherCoefs(g, pf);
  poly cp = getCoefOfPP(g, pf);
  if (checkNonNull(cp, E, N)) {
    return (checkEssentialByHC(f, pf, higher_coefs, g, G_can, E, N, G_branch, BL));
  } else {
    list branches = splitBranch(E, N, cp);
    int is_essential;
    list G_can_rem = deletePolyFromList(G_can, g);
    (is_essential, BL) = checkEssentialInBranch(f, pf, G_can_rem, branches[1][1], branches[1][2], G_branch, BL);
    if (is_essential) {
      return (1, BL);
    } else {
      return (checkEssentialInBranch(f, pf, G_can, branches[2][1], branches[2][2], G_branch, BL));
    }
  }
}

proc checkEssential(poly f, list M, list modcgs) {
  // Basering is @RP.
  list BL;
  int i, j;
  
  for (i = 1; i <= size(modcgs); i++) {
    if (appearsInBranch(f, modcgs[i])) {
      // f appears in this branch.
      poly pf;
      for (j = 1; j <= size(modcgs[i][3]); j++) {
	if (f == modcgs[i][3][j][1] + modcgs[i][3][j][2]) {
	  pf = lppX(modcgs[i][3][j][1]);
	}
      }
      int is_essential;
      list MRem = deletePolyFromList(M, f);
      ideal E_cur = modcgs[i][1];
      list N_cur = modcgs[i][2];
      list G_cur = modcgs[i][3];
      (is_essential, BL) = checkEssentialInBranch(f, pf, MRem, E_cur, N_cur, G_cur, BL);
      if (is_essential) {
	return (1, list());
      }
    }
  }

  return (0, BL);
}

proc mcgbMain(ideal E, list N, ideal F) {
  // Basering is @R.
  ideal G;
  list modcgs;

  (G, modcgs) = cgb_mod(F, E, N, out);

  if (size(G) == 0 || size(modcgs) == 0) {
    return (list());
  }

  set_global_rings_mcgb();

  // Switch to @RP.
  setring(@RP);
  def G = imap(@R, G);
  def modcgs = imap(@R, modcgs);

  list modcgsRed = makeRRep(modcgs);
  list M;
  int i, j;
  for (i = 1; i <= size(G); i++) {
    M[i] = G[i];
  }

  for (i = 1; i <= size(G); i++) {
    poly cur_f = G[i];
    print(cur_f);
    int is_essential;
    list BL;
    (is_essential, BL) = checkEssential(cur_f, M, modcgsRed);
    if (is_essential == 0) {
      
      list modcgs1;
      for (j = 1; j <= size(modcgs); j++) {
	if (!appearsInBranch(cur_f, modcgs[j])) {
	  modcgs1 = insert(modcgs1, modcgs[j], size(modcgs1));
	}
      }
      for (j = 1; j <= size(BL); j++) {
	modcgs1 = insert(modcgs1, BL[j], size(modcgs1));
      }
      M = deletePolyFromList(M, cur_f);
    } 
    
  }

  // Switch back to @R.
  setring(@R);
  def M = imap(@RP, M);

  return (M);
}
