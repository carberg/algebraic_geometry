IB "poly.lib";
LIB "primdec.lib";
LIB "qhmoduli.lib";
LIB "teachstd.lib";

LIB "cgb_mod.lib";
proc set_global_rings_mcgb() {
  // Basering is K[U][X].

  if (defined(@R)) {
    kill @R; kill @P; kill @RP;
  }

  def BR = basering;
  def @R = basering;

  def Rx = ringlist(BR);
  string ord_var = Rx[3][1][1];
  Rx[1][3][1][1] = ord_var;

  def @P = ring(Rx[1]);
  
  Rx[1] = 0;
  def D = ring(Rx);
  def @RP = D + @P;
  
  exportto(Top, @R);
  exportto(Top, @P);
  exportto(Top, @RP);

  setring(BR);
}

proc idealToList(ideal G) {
  if (size(G) == 0) {
    return (list());
  }

  int i;
  list L;
  for (i = 1; i <= size(G); i++) {
    L = insert(L, G[i], size(L));
  }

  return (L);
}

proc listToIdeal(list L) {
  // Basering is @RP.
  if (size(L) == 0) {
    return (ideal());
  }

  int i;
  ideal G;
  for (i = 1; i <= size(L); i++) {
    G = G + L[i];
  }

  return (G);
}

proc ideal_exclude(ideal I, ideal J) {
  // Basering is @RP.
  if (size(I) == 0) {
    return (ideal());
  }


  if (size(J) == 0) {
    return (I);
  }

  poly prod_J = 1;
  int i, j;
  for (i = 1; i <= size(J); i++) {
    prod_J = prod_J * J[i];
  }
  ideal FL_J = factorize(prod_J, 1);

  for (i = 1; i <= size(I); i++) {
    for (j = 1; j <= size(FL_J); j++) {
      if (reduce(I[i], groebner(ideal(FL_J[j]))) == 0) {
	I[i] = I[i] / FL_J[j];
      }
    }
  }

  return (radical(I));
}

proc getNSquareFreeFromProd(poly h) {
  // Basering is @RP.
  ideal FL = factorize(h, 1);
  if (size(FL) == 0) {
    return (list(0));
  }

  int i;
  list res_list;
  for (i = 1; i <= size(FL); i++) {
    res_list = insert(res_list, FL[i], size(res_list));
  }

  return (res_list);
}

proc idealUnion(ideal I, ideal J) {
  // Basering is @RP.
  int i;
  int n = size(I);

  for (i = 1; i <= size(J); i++) {
    I[n + i] = J[i];
  }

  return (I);
}

proc redRepN(ideal E, list N, poly c) {
  // Basering is @RP.
  ideal E_ext = E + ideal(c);
  
  if (Check_Consistence_CGB(E_ext, N)) {
    return (radical(E_ext), N);
  } else {
    return (ideal(1), list(0));
  }
}

proc redRepNN(ideal E, list N, poly c) {
  // Basering is @RP.

  list N_ext = insert(N, c, size(N));

  if (Check_Consistence_CGB(E, N_ext)) {
    poly c_red = reduce(c, groebner(radical(E)));
    list N_ext_red = insert(N, c_red, size(N));
    return (E, N_ext_red);
  } else {
    return (ideal(1), list(0));
  }
}

proc splitBranch(ideal E, list N, poly c) {
  // Basering is @RP.
  list res_list;
  ideal E0;
  list N0;
  (E0, N0) = redRepN(E, N, c);
  list sub1 = E0, N0;
  res_list = insert(res_list, sub1, size(res_list));
  list sub2;
  if (E0[1] == 1) {
    // (E0, N0) is inconsistent.
    sub2 = E, N;
  } else {
    ideal E1;
    list N1;
    (E1, N1) = redRepNN(E, N, c);
    sub2 = E1, N1;
  }
  res_list = insert(res_list, sub2, size(res_list));
  return (res_list);
}


proc checkNull(poly c, ideal E, list N) 
"Check whether c is determined to be 0 under (E, N).
"
{
  // Basering is @RP.
  ideal E_res;
  list N_res;
  (E_res, N_res) = redRepN(E, N, c);

  if (E_res[1] == 1 && N_res[1] == 0) {
    return (0);
  } else {
    // Now need to check if (E, N x {c}) is consistent.
    (E_res, N_res) = redRepNN(E, N, c);
    if (E_res[1] == 1) {
      // c is determined to be 0 under (E, N).
      return (1);
    } else {
     // c is not determined under (E, N).
      return (0);
    }
  }
}


/*
proc checkNull(poly c, ideal E, list N) {
  // Basering is @RP.

  ideal E_rad = radical(E);
  if (reduce(c, groebner(E_rad)) == 0) {
    return (1);
  } else {
    return (0);
  }
}
*/

/*
proc checkNull(poly c, ideal E, list N) {
  // Basering is @RP.
  // (E, N) in R-representation.
  poly Nprod = 1;
  int i;
  for (i = 1; i <= size(N); i++) {
    Nprod = Nprod * N[i];
  }

  ideal Ered = radical(ideal_exclude(E, ideal(Nprod)));

  if (reduce(c, groebner(Ered)) == 0) {
    return (1);
  } else {
    return (0);
  }
}
*/

/*
proc checkNullRRep(poly c, ideal E, list N) {
  // Basering is @RP.

  if (reduce(c, groebner(E)) == 0) {
    return (1);
  } 

  return (0);
}
*/

proc checkNonNull(poly c, ideal E, list N) 
"
Check whether c id determined to be non-zero under (E, N).
"
{
  // Basering is @RP.
  ideal E0;
  list N0;
  (E0, N0) = redRepN(E, N, c);
  if (E0[1] == 1) {
    return (1);
  } else { 
    return (0); 
  }
}

proc makeRRepInBranch(ideal E, list N) {
  // Basering is @RP.
  if (size(E) == 0 && size(N) == 0) {
    return (ideal(), list(1));
  }

  ideal newE = radical(E);
  
  poly prod_N = 1;
  int i;
  for (i = 1; i <= size(N); i++) {
    prod_N = prod_N * N[i];
  }
  poly prod_N_rem = reduce(prod_N, newE);
  ideal FL_N = factorize(prod_N_rem, 1);

  list newN;
  if (size(FL_N) == 0) {
    newN = 0;
  } else {
    for (i = 1; i <= size(FL_N); i++) {
      newN = insert(newN, FL_N[i], size(newN));
    }
  }

  return (newE, newN);
}

proc makeRRep(list modcgs) {
  // Basering is @RP.
  list modcgsRed;
  int i;
  for (i = 1; i <= size(modcgs); i++) {
    ideal E;
    list N;
    (E, N) = makeRRepInBranch(modcgs[i][1], modcgs[i][2]);
    list branch = E, N, modcgs[i][3];
    modcgsRed = insert(modcgsRed, branch, size(modcgsRed));
  }

  return (modcgsRed);
}

proc appearsInBranch(poly f, list branch) {
  // Basering is @RP.
  f = f / leadcoef(f);
  if (size(branch[3]) == 0) {
    return (0);
  } 

  ideal E = branch[1];
  list N = branch[2];

  int i;
  for (i = 1; i <= size(branch[3]); i++) {
    poly g = branch[3][i][1] + branch[3][i][2];
    g = g / leadcoef(g);
    if (g == f) {
      return (1);
    } 
  }

  return (0);
}

proc lppX(poly P) {
  int flag = 0;
  if (nameof(basering) != "@R") {
    def BR = basering;
    setring(@R);
    flag = 1;
    def P = imap(BR, P);
  }

  def m = leadmonom(P);
  if (flag) {
    setring(BR);
    def m = imap(@R, m);
  }

  return (m);
}

proc leadcoef_U(poly P) {
  int flag = 0;
  if (nameof(basering) != "@R") {
    def BR = basering;
    setring(@R);
    flag = 1;
    def P = imap(BR, P);
  }
  poly C = leadcoef(P);
  
  if (flag) {
    setring(BR);
    def C = imap(@R, C);
  }

  return (C);
}

proc lm_X(poly P) {
  int flag = 0;
  if (nameof(basering) != "@R") {
    def BR = basering;
    setring(@R);
    flag = 1;
    def P = imap(BR, P);
  }

  def T = lead(P);
  if (flag) {
    setring(BR);
    def T = imap(@R, T);
  }

  return (T);
}

proc deletePolyFromList(list L, poly f) {
  // Basering is @RP.
  if (size(L) == 0) {
    return (list());
  }

  int i;
  for (i = 1; i <= size(L); i++) {
    if (f == L[i]) {
      L = delete(L, i);
      break;
    }
  }

  return (L);
}

proc delEquivPolyFromList(list L, poly f) {
  // Basering is @RP.
  if (size(L) == 0) {
    return (list());
  }

  int i;
  for (i = 1; i <= size(L); i++) {
    if (equivalent(f, L[i])) {
      L = delete(L, i);
      break;
    }
  }

  return (L);
}

proc getCandidatePolys(poly pp, list M, ideal E, list N) {
  if (size(M) == 0) {
    return (list());
  }

  int i;
  list G_can;
  for (i = 1; i <= size(M); i++) {
    poly cur_g = M[i];
    while (cur_g != 0) {
      if (lppX(cur_g) == pp) {
	// Only consider the coef of pp in M[i].
	if (!checkNull(leadcoef_U(cur_g), E, N)) {
	  // This coef is not determined to be 0 under (E, N).
	  G_can = insert(G_can, M[i], size(G_can));
	  break;
	}
      }
      cur_g = cur_g - lm_X(cur_g);
    }
  }

  return (G_can);
}

proc deletePolyFromG(list G, poly f) {
  // Basering is @RP.
  if (size(G) == 0) {
    return (list());
  }

  int i;
  for (i = 1; i <= size(G); i++) {
    if (equivalent(G[i][1] + G[i][2], f)) {
      G = delete(G, i);
      break;
    }
  }

  return (G);
}

proc insertPolyIntoG(list G, poly f, ideal E, list N) {
  // Basering is @RP.
  poly f_null;
  poly f_nonnull;
  
  while (f > 0) {
    poly cur_coef = leadcoef_U(f);
    if (checkNull(cur_coef, E, N)) {
      f_null = f_null + lm_X(f);
    } else {
      poly m_nonnull = reduce(lm_X(f), E);
      poly m_null = lm_X(f) - m_nonnull;
      f_nonnull = f_nonnull + m_nonnull;
      f_null = f_null + m_null;
    }
    f = f - lm_X(f);
  }

  // Make f_nonnull monic.
  poly div_factor = leadcoef(f_nonnull);
  if (div_factor != 1) {
    f_nonnull = f_nonnull / div_factor;
    f_null = f_null / div_factor;
  }

  list l = f_nonnull, f_null;
  G = insert(G, l, size(G));
  return (G);
}

proc lookUpIndex(poly f) {
  // Basering is @RP.
  if (size(CGB) == 0) {
    return (0);
  } else {
    int i;
    for (i = 1; i <= size(CGB); i++) {
      if (CGB[i] == f) {
	return (i);
      }
    }
    return (0);
  }
}

proc checkEssentialByHC(poly f, poly pf, list higher_coefs, poly g, list G_can, ideal E, list N, list G_branch, list BL) {
  // Basering is @RP.
  if (size(higher_coefs) == 0) {
    // {g} covers f in (E, N).
    G_branch = deletePolyFromG(G_branch, f);
    G_branch = insertPolyIntoG(G_branch, g, E, N);
    BL = insert(BL, list(E, N, G_branch), size(BL));

    int idx_g = lookUpIndex(g);
    int idx_f = lookUpIndex(f);

    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "{f_%s = %s} covers f_%s = %s in (<%s>, {%s})" + newline, string(idx_g), string(g), string(idx_f), string(f), string(E), string(N));
    }
    return (0, BL);
  } else {
    int i;
    for (i = 1; i <= size(higher_coefs); i++) {
      poly cur_c = higher_coefs[i];
      
      if (checkNull(cur_c, E, N)) {
	// sigma(cur_c) is always 0.
	i++; // In SINGULAR, we need this statement before continue.
	continue;
      } else {
	if (checkNonNull(cur_c, E, N)) {
	  // sigma(cur_c) is never 0.
	  G_can = deletePolyFromList(G_can, g);
	  if (defined(debug_mode) && debug_mode == 1) {
	    fprintf(out, "There is some non-null higher coef %s. So %s cannot cover %s in (<%s>, {%s})", cur_c, g, f, E, N);
	  }
	  return (checkEssentialInBranch(f, pf, G_can, E, N, G_branch, BL));
	} else {
	  // sigma(cur_c) is not determined.
	  if (defined(debug_mode) && debug_mode >= 1) {
	    fprintf(out, "Split branch (<%s>, {%s}) w.r.t. %s:", E, N, cur_c);
	  }
	  list branches = splitBranch(E, N, cur_c);
	  int is_essential;
	  if (defined(debug_mode) && debug_mode == 1) {
	    fprintf(out, "Come to sub-branch (<%s> {%s}):", branches[1][1], branches[1][2]);
	  }
	  (is_essential, BL) = checkEssentialInBranch(f, pf, G_can, branches[1][1], branches[1][2], G_branch, BL);
	  if (is_essential) {
	    return (1, BL);
	  } else {
	    G_can = deletePolyFromList(G_can, g);
	    if (defined(debug_mode) && debug_mode == 1) {
	      fprintf(out, "%s is covered in the first sub-branch (<%s>, {%s}).", f, branches[1][1], branches[1][2]);
	      fprintf(out, "Continue with the other sub-branch (<%s>, {%s}):", branches[2][1], branches[2][2]);
	    }
	    return (checkEssentialInBranch(f, pf, G_can, branches[2][1], branches[2][2], G_branch, BL));
	  }
	}
      }

    }

    G_branch = deletePolyFromG(G_branch, f);
    G_branch = insertPolyIntoG(G_branch, g, E, N);
    BL = insert(BL, list(E, N, G_branch), size(BL));

    int idx_g = lookUpIndex(g);
    int idx_f = lookUpIndex(f);

    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "{f_%s = %s} covers f_%s = %s in (<%s>, {%s})" + newline, string(idx_g), string(g), string(idx_f), string(f), string(E), string(N));
    }
    return (0, BL);
  }
}

proc checkEssentialByHCRandom(poly f, poly pf, list higher_coefs, poly g, list G_can, ideal E, list N, list G_branch, list BL) {
  // Basering is @RP.
  if (size(higher_coefs) == 0) {
    // {g} covers f in (E, N).
    G_branch = deletePolyFromG(G_branch, f);
    G_branch = insertPolyIntoG(G_branch, g, E, N);
    BL = insert(BL, list(E, N, G_branch), size(BL));

    int idx_g = lookUpIndex(g);
    int idx_f = lookUpIndex(f);

    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "{f_%s = %s} covers f_%s = %s in (<%s>, {%s})" + newline, string(idx_g), string(g), string(idx_f), string(f), string(E), string(N));
    }
    return (0, BL);
  } else {
    int i;
    for (i = 1; i <= size(higher_coefs); i++) {
      poly cur_c = higher_coefs[i];
      
      if (checkNull(cur_c, E, N)) {
	// sigma(cur_c) is always 0.
	i++; // In SINGULAR, we need this statement before continue.
	continue;
      } else {
	if (checkNonNull(cur_c, E, N)) {
	  // sigma(cur_c) is never 0.
	  G_can = deletePolyFromList(G_can, g);
	  if (defined(debug_mode) && debug_mode == 1) {
	    fprintf(out, "There is some non-null higher coef %s. So %s cannot cover %s in (<%s>, {%s})", cur_c, g, f, E, N);
	  }
	  return (checkEssentialInBranchRandom(f, pf, G_can, E, N, G_branch, BL));
	} else {
	  // sigma(cur_c) is not determined.
	  if (defined(debug_mode) && debug_mode >= 1) {
	    fprintf(out, "Split branch (<%s>, {%s}) w.r.t. %s:", E, N, cur_c);
	  }
	  list branches = splitBranch(E, N, cur_c);
	  int is_essential;
	  if (defined(debug_mode) && debug_mode == 1) {
	    fprintf(out, "Come to sub-branch (<%s> {%s}):", branches[1][1], branches[1][2]);
	  }
	  (is_essential, BL) = checkEssentialInBranchRandom(f, pf, G_can, branches[1][1], branches[1][2], G_branch, BL);
	  if (is_essential) {
	    return (1, BL);
	  } else {
	    G_can = deletePolyFromList(G_can, g);
	    if (defined(debug_mode) && debug_mode == 1) {
	      fprintf(out, "%s is covered in the first sub-branch (<%s>, {%s}).", f, branches[1][1], branches[1][2]);
	      fprintf(out, "Continue with the other sub-branch (<%s>, {%s}):", branches[2][1], branches[2][2]);
	    }
	    return (checkEssentialInBranchRandom(f, pf, G_can, branches[2][1], branches[2][2], G_branch, BL));
	  }
	}
      }

    }

    G_branch = deletePolyFromG(G_branch, f);
    G_branch = insertPolyIntoG(G_branch, g, E, N);
    BL = insert(BL, list(E, N, G_branch), size(BL));

    int idx_g = lookUpIndex(g);
    int idx_f = lookUpIndex(f);

    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "{f_%s = %s} covers f_%s = %s in (<%s>, {%s})" + newline, string(idx_g), string(g), string(idx_f), string(f), string(E), string(N));
    }
    return (0, BL);
  }
}

proc getHigherCoefs(poly f, poly pp) {
  // Basering is @RP.
  list higher_coefs;
  while (lppX(f) > pp) {
    higher_coefs = insert(higher_coefs, leadcoef_U(f), size(higher_coefs));
    f = f - lm_X(f);
  }

  return (higher_coefs);
}

proc getCoefOfPP(poly f, poly pp) {
  // Basering is @RP.
  while (lppX(f) >= pp) {
    if (lppX(f) == pp) {
      return (leadcoef_U(f));
    }
    f = f - lm_X(f);
  }

  return (0);
}
proc checkEssentialInBranch(poly f, poly pf, list MRem, ideal E, list N, list G_branch, list BL) {
  // Basering is @RP.
  MRem = listAsceOrd(MRem);
  list G_can = getCandidatePolys(pf, MRem, E, N);
  if (size(G_can) == 0) {
    list branch = E, N, list(0);
    BL = insert(BL, branch, size(BL));

    int idx_f = lookUpIndex(f);

    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "No subsets of M covers f_%s = %s in (<%s>, {%s})" + newline, string(idx_f), string(f), string(E), string(N));
      fprintf(out, "%s is essential due to (<%s>, {%s}).", f, E, N);
    }
    return (1, BL);
  }

  poly g = G_can[1];
  list higher_coefs = getHigherCoefs(g, pf);
  poly cp = getCoefOfPP(g, pf);
  if (defined(debug_mode) && debug_mode == 1) {
    fprintf(out, "Coef(%s, %s) = %s", g, pf, cp);
  }
  if (checkNonNull(cp, E, N)) {
    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "Coef(g, pf) is non-null. Now check higher coefs:");
    }
    return (checkEssentialByHC(f, pf, higher_coefs, g, G_can, E, N, G_branch, BL));
  } else {
    if (defined(debug_mode) && debug_mode >= 1) {
      fprintf(out, "Split branch (<%s>, {%s}) w.r.t. %s:", E, N, cp);
    }
    list branches = splitBranch(E, N, cp);
    int is_essential;
    list G_can_rem = deletePolyFromList(G_can, g);
    if (defined(debug_mode) && debug_mode >= 1) {
      fprintf(out, "Come to sub-branch (<%s>, {%s}):", branches[1][1], branches[1][2]);
    }
    (is_essential, BL) = checkEssentialInBranch(f, pf, G_can_rem, branches[1][1], branches[1][2], G_branch, BL);
    if (is_essential) {
      return (1, BL);
    } else {
      int idx_f = lookUpIndex(f);
      if (defined(debug_mode) && debug_mode >= 1) {
	fprintf(out, "f_%s = %s is covered in the first sub-branch (<%s>, {%s}).", string(idx_f), f, branches[1][1], branches[1][2]);
	fprintf(out, "Continue with the other sub-branch (<%s>, {%s}):", branches[2][1], branches[2][2]);
      }
      return (checkEssentialInBranch(f, pf, G_can, branches[2][1], branches[2][2], G_branch, BL));
    }
  }
}

proc checkEssentialInBranchRandom(poly f, poly pf, list MRem, ideal E, list N, list G_branch, list BL) {
  // Basering is @RP.
  if (defined(debug_mode) && debug_mode == 1) {
    fprintf(out, newline + "Come to locally closed set (<%s>, {%s}):", E, N);
  }

  list G_can = getCandidatePolys(pf, MRem, E, N);
  if (size(G_can) == 0) {
    list branch = E, N, list(0);
    BL = insert(BL, branch, size(BL));

    int idx_f = lookUpIndex(f);

    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "No subsets of M covers f_%s = %s in (<%s>, {%s})" + newline, string(idx_f), string(f), string(E), string(N));
      fprintf(out, "%s is essential due to (<%s>, {%s}).", f, E, N);
    }
    return (1, BL);
  }

  int idx = random(1, size(G_can));
  poly g = G_can[idx];
  list higher_coefs = getHigherCoefs(g, pf);
  poly cp = getCoefOfPP(g, pf);
  if (defined(debug_mode) && debug_mode == 1) {
    fprintf(out, "Coef(%s, %s) = %s", g, pf, cp);
  }
  if (checkNonNull(cp, E, N)) {
    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "Coef(g, pf) is non-null. Now check higher coefs:");
    }
    return (checkEssentialByHCRandom(f, pf, higher_coefs, g, G_can, E, N, G_branch, BL));
  } else {
    if (defined(debug_mode) && debug_mode >= 1) {
      fprintf(out, "Split branch (<%s>, {%s}) w.r.t. %s:", E, N, cp);
    }
    list branches = splitBranch(E, N, cp);
    int is_essential;
    list G_can_rem = deletePolyFromList(G_can, g);
    if (defined(debug_mode) && debug_mode >= 1) {
      fprintf(out, "Come to sub-branch (<%s>, {%s}):", branches[1][1], branches[1][2]);
    }
    (is_essential, BL) = checkEssentialInBranchRandom(f, pf, G_can_rem, branches[1][1], branches[1][2], G_branch, BL);
    if (is_essential) {
      return (1, BL);
    } else {
      int idx_f = lookUpIndex(f);
      if (defined(debug_mode) && debug_mode >= 1) {
	fprintf(out, "f_%s = %s is covered in the first sub-branch (<%s>, {%s}).", string(idx_f), f, branches[1][1], branches[1][2]);
	fprintf(out, "Continue with the other sub-branch (<%s>, {%s}):", branches[2][1], branches[2][2]);
      }
      return (checkEssentialInBranchRandom(f, pf, G_can, branches[2][1], branches[2][2], G_branch, BL));
    }
  }
}

proc equivalent(poly f, poly g) {
  // Basering is @RP.
  f = f / leadcoef(f);
  g = g / leadcoef(g);

  if (f == g) {
    return (1);
  } else {
    return (0);
  }
}

proc checkEssential(poly f, list M, list modcgs) {
  // Basering is @RP.
  list BL;
  int i, j;
  
  for (i = 1; i <= size(modcgs); i++) {
    if (appearsInBranch(f, modcgs[i])) {
      // f appears in this branch.
      poly pf;
      for (j = 1; j <= size(modcgs[i][3]); j++) {
	if (equivalent(f, modcgs[i][3][j][1] + modcgs[i][3][j][2])) {
	  pf = lppX(modcgs[i][3][j][1]);
	  break;
	}
      }
      int is_essential;
      list MRem = deletePolyFromList(M, f);
      ideal E_cur = modcgs[i][1];
      list N_cur = modcgs[i][2];
      list G_cur = modcgs[i][3];
      if (defined(debug_mode) && debug_mode == 1) {
	fprintf(out, "Now come to Branch %s: (<%s>, {%s}):", string(i), E_cur, N_cur);
      }
      (is_essential, BL) = checkEssentialInBranch(f, pf, MRem, E_cur, N_cur, G_cur, BL);
      if (is_essential) {
	if (defined(debug_mode) && debug_mode == 1) {
	  fprintf(out, "%s is essential" + newline + "=================", string(f));
	}
	return (1, list());
      } 
    }
  }

  if (defined(debug_mode) && debug_mode == 1) {
    fprintf(out, "%s is non-essential" + newline + "=====================", string(f));
  }
  return (0, BL);
}

proc checkEssentialRandom(poly f, list M, list modcgs) {
  // Basering is @RP.
  list BL;
  int i, j;
  
  for (i = 1; i <= size(modcgs); i++) {
    if (appearsInBranch(f, modcgs[i])) {
      // f appears in this branch.
      poly pf;
      for (j = 1; j <= size(modcgs[i][3]); j++) {
	if (equivalent(f, modcgs[i][3][j][1] + modcgs[i][3][j][2])) {
	  pf = lppX(modcgs[i][3][j][1]);
	  break;
	}
      }
      int is_essential;
      list MRem = deletePolyFromList(M, f);
      ideal E_cur = modcgs[i][1];
      list N_cur = modcgs[i][2];
      list G_cur = modcgs[i][3];
      if (defined(debug_mode) && debug_mode == 1) {
	fprintf(out, "Now come to Branch %s: (<%s>, {%s}):", string(i), E_cur, N_cur);
      }
      (is_essential, BL) = checkEssentialInBranchRandom(f, pf, MRem, E_cur, N_cur, G_cur, BL);
      if (is_essential) {
	if (defined(debug_mode) && debug_mode == 1) {
	  fprintf(out, "%s is essential" + newline + "=================", string(f));
	}
	return (1, list());
      } 
    }
  }

  if (defined(debug_mode) && debug_mode == 1) {
    fprintf(out, "%s is non-essential" + newline + "=====================", string(f));
  }
  return (0, BL);
}

proc listContains(list l, poly f) {
  if (size(l) == 0) {
    return (0);
  } 

  int i;
  for (i = 1; i <= size(l); i++) {
    if (l[i] == f) {
      return (1);
    }
  }

  return (0);
}

proc idealContains(ideal I, poly f) {
  if (size(I) == 0) {
    return (0);
  }

  int i;
  for (i = 1; i <= size(I); i++) {
    if (I[i] == f) {
      return (1);
    }
  }

  return (0);
}

proc listLookUp(list l, poly f) {
  if (size(l) == 0) {
    return (-1);
  }

  int i;
  for (i = 1; i <= size(l); i++) {
    if (l[i] == f) {
      return (i);
    }
  }

  return (-1);
}

proc listContainsList(list m_l, list m) {
  if (size(m_l) == 0) {
    return (0);
  }

  int i;
  for (i = 1; i <= size(m_l); i++) {
    if (listEquals(m_l[i], m)) {
      return (1);
    }
  }

  return (0);
}

proc listEquals(list l1, list l2) {
  if (size(l1) != size(l2)) {
    return (0);
  }

  if (size(l1) == 0) {
    if (size(l2) == 0) {
      return (1);
    } else {return (0);}
  }

  if (size(l2) == 0) {
    return (0);
  }

  // General Case.
  int i;
  for (i = 1; i <= size(l1); i++) {
    if (!listContains(l2, l1[i])) {
      return (0);
    }
  }

  for (i = 1; i <= size(l2); i++) {
    if (!listContains(l1, l2[i])) {
      return (0);
    }
  }

  return (1);
}

proc set_global_objects() {
  // Basering is @R.
  def BR = basering;

  list Variables;
  int i;
  for (i = 1; i <= nvars(BR); i++) {
    Variables[i] = var(i);
  }
  
  // Siwtch to @RP.
  setring @RP;
  def Variables = imap(BR, Variables);

  // Switch to @P.
  setring @P;
  list Parameters;
  for (i = 1; i <= nvars(@P); i++) {
    Parameters[i] = var(i);
  }

  // Switch back to @RP.
  setring @RP;
  def Parameters = imap(@P, Parameters);

  poly VMinDPoly = Variables[size(Variables)];
  list Checks = 0, 0, 0, 0, 0, 0;

  export(Variables, Parameters, VMinDPoly, Checks);

  // Switch back to @R.
  setring BR;
}

proc mcgbMain(ideal E, list N, ideal F) {
  // basering is @R.
  ideal G;
  list modcgs;

  (G, modcgs) = cgb_mod(F, E, N, out);

  if (size(G) == 0 || size(modcgs) == 0) {
    return (list());
  }

  set_global_rings_mcgb();

  set_global_objects();

  // Switch to @RP.
  setring(@RP);
  def G = imap(@R, G);
  G = sortPolyDesc(G);

  def CGB = G;
  exportto(Top, CGB);
  def modcgs = imap(@R, modcgs);

  list modcgsRed = makeRRep(modcgs);
  list M;
  int i, j;
  for (i = 1; i <= size(G); i++) {
    M[i] = G[i];
  }

  for (i = 1; i <= size(G); i++) {
    poly cur_f = G[i];
    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "Now check f_%s = %s:", string(i), cur_f);
    }
    int is_essential;
    list BL;
    (is_essential, BL) = checkEssential(cur_f, M, modcgsRed);
    if (is_essential == 0) {
      
      list modcgs1;
      for (j = 1; j <= size(modcgsRed); j++) {
	if (!appearsInBranch(cur_f, modcgsRed[j])) {
	  modcgs1 = insert(modcgs1, modcgsRed[j], size(modcgs1));
	}
      }
      for (j = 1; j <= size(BL); j++) {
	modcgs1 = insert(modcgs1, BL[j], size(modcgs1));
      }
      modcgsRed = modcgs1;
      M = deletePolyFromList(M, cur_f);
    } 
    
  }


  // Switch back to @R.
  setring(@R);
  def M = imap(@RP, M);
  def modcgsRed = imap(@RP, modcgsRed);

  return (M, modcgsRed);
}

proc mcgbRandMain(ideal E, list N, ideal F) {
  // basering is @R.
  ideal G;
  list modcgs;

  (G, modcgs) = cgb_mod(F, E, N, out);

  if (size(G) == 0 || size(modcgs) == 0) {
    return (list());
  }

  set_global_rings_mcgb();
  set_global_objects();

  // Switch to @RP.
  setring(@RP);
  def G = imap(@R, G);

  def CGB = G;
  exportto(Top, CGB);
  def modcgs = imap(@R, modcgs);

  list modcgsRed = makeRRep(modcgs);
  list M;
  int i, j;
  for (i = 1; i <= size(G); i++) {
    M[i] = G[i];
  }

  int size_cgb = size(G);
  list checked_indices;

  while (size(checked_indices) < size_cgb) {
    int cur_idx = random(1, size_cgb);
    while (listContains(checked_indices, cur_idx)) {
      cur_idx = random(1, size_cgb);
    }
    poly cur_f = G[cur_idx];
    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "Now check f_%s = %s:", string(cur_idx), cur_f);
    }
    int is_essential;
    list BL;
    (is_essential, BL) = checkEssentialRandom(cur_f, M, modcgsRed);
    if (is_essential == 0) {
      
      list modcgs1;
      for (j = 1; j <= size(modcgsRed); j++) {
	if (!appearsInBranch(cur_f, modcgsRed[j])) {
	  modcgs1 = insert(modcgs1, modcgsRed[j], size(modcgs1));
	}
      }
      for (j = 1; j <= size(BL); j++) {
	modcgs1 = insert(modcgs1, BL[j], size(modcgs1));
      }
      modcgsRed = modcgs1;
      M = deletePolyFromList(M, cur_f);
    } 
    checked_indices = insert(checked_indices, cur_idx, size(checked_indices));
  }
  

  // Switch back to @R.
  setring(@R);
  def M = imap(@RP, M);
  def modcgsRed = imap(@RP, modcgsRed);

  return (M, modcgsRed);
}

proc homogenize_ring(string var_name) {
  // Basering is @R.
  def BR = basering;

  if (defined(@H)) {
    kill @H;
  }

  list ring_list = ringlist(BR);
  
  // Add the variable name.
  ring_list[2] = insert(ring_list[2], var_name, size(ring_list[2]));

  // Update the term ordering configuration.
  intvec iv = ring_list[3][1][2];
  iv = iv, 1;
  ring_list[3][1][2] = iv;

  // Construct the associated homogeneous ring.
  def @H = ring(ring_list);
  exportto(Top, @H);

  setring BR;
}

proc mcgbRandMainHomo(ideal E, list N, ideal F, string var_name) {
  def BR = basering;

  // Construct the homogeneous ring from @R.
  homogenize_ring(var_name);

  // Switch to @H.
  setring @H;
  def E = imap(BR, E);
  def N = imap(BR, N);
  def F = imap(BR, F);
  def additional_var = var(nvars(@H));

  // Homogenize F.
  F = homog(F, additional_var);

  // Construct rings @R = @H, @RP, @P.
  set_global_rings_mcgb();

  ideal G;
  list modcgs;

  (G, modcgs) = cgb_mod(F, E, N, out);

  if (size(G) == 0 || size(modcgs) == 0) {
    return (list());
  }

  set_global_rings_mcgb();

  // Switch to @RP.
  setring(@RP);
  def G = imap(@R, G);

  def CGB = G;
  exportto(Top, CGB);
  def modcgs = imap(@R, modcgs);

  list modcgsRed = makeRRep(modcgs);
  list M;
  int i, j;
  for (i = 1; i <= size(G); i++) {
    M[i] = G[i];
  }

  int size_cgb = size(G);
  list checked_indices;

  while (size(checked_indices) < size_cgb) {
    int cur_idx = random(1, size_cgb);
    while (listContains(checked_indices, cur_idx)) {
      cur_idx = random(1, size_cgb);
    }
    poly cur_f = G[cur_idx];
    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "Now check f_%s = %s:", string(cur_idx), cur_f);
    }
    int is_essential;
    list BL;
    (is_essential, BL) = checkEssential(cur_f, M, modcgsRed);
    if (is_essential == 0) {
      
      list modcgs1;
      for (j = 1; j <= size(modcgsRed); j++) {
	if (!appearsInBranch(cur_f, modcgsRed[j])) {
	  modcgs1 = insert(modcgs1, modcgsRed[j], size(modcgs1));
	}
      }
      for (j = 1; j <= size(BL); j++) {
	modcgs1 = insert(modcgs1, BL[j], size(modcgs1));
      }
      modcgsRed = modcgs1;
      M = deletePolyFromList(M, cur_f);
    } 
    checked_indices = insert(checked_indices, cur_idx, size(checked_indices));
  }
  

  // Switch back to @R.
  setring(@R);
  def M = imap(@RP, M);
  def modcgsRed = imap(@RP, modcgsRed);

  return (M, modcgsRed);
}

// For Canonical CGB.

proc monic(poly f) {
  // basering is @RP.
  if (f == 0) {
    return (f);
  } else {
    return (f / leadcoef(f));
  }
}

proc lesscoef(poly coef_f, coef_g) {
  if (coef_f == 0 && coef_g == 0) {
    return (2);
  }

  if (leadmonom(coef_f) < leadmonom(coef_g)) {
    return (1);
  } else {
    if (leadmonom(coef_f) > leadmonom(coef_g)) {
      return (0);
    } else {
      if (leadcoef(coef_f) == leadcoef(coef_g)) {
	return (lesscoef(coef_f - lead(coef_f), coef_g - lead(coef_g)));
      } else {
	return (leadcoef(coef_f) < leadcoef(coef_g));
      }
    }
  }
}

proc lesspoly(poly f, poly g) 
"
f, g are monic polynomials.
"
{
  // basering is @RP.
  if (f == 0 || g == 0) {
    return (2);
  }

  if (lppX(f) < lppX(g)) {
    return (1);
  } else {
    if (lppX(f) > lppX(g)) {
      return (0);
    } else {
      poly lc_f = leadcoef_U(f);
      poly lc_g = leadcoef_U(g);
      if (lc_f != lc_g) {
	return (lesscoef(lc_f, lc_g));
      } else {
	return (lesspoly(f - lm_X(f), g - lm_X(g)));
      }
    }
  }
}

proc sortPolyDesc(ideal I) {
  // Basering is @RP.
  if (size(I) <= 1) {
    return (I);
  }

  // Bubble sort.
  int i;
  int swapped = 1;
  int n = size(I);
  poly tmp;
  
  while (swapped == 1) {
    swapped = 0;
    for (i = 1; i <= n-1; i++) {
      if (lesspoly(I[i], I[i+1])) {
	tmp = I[i];
	I[i] = I[i+1];
	I[i+1] = tmp;
	swapped = 1;
      }
    }
    n = n - 1;
  }

  return (I);
}

proc sortIdealAsce(ideal I) {
  // Basering is @R.
  def BR = basering;
  setring @RP;
  def I = imap(@R, I);
  
  if (size(I) <= 1) {
    setring BR;
    return (I);
  }

  // Bubble sort.
  int i;
  int swapped = 1;
  int n = size(I);
  poly tmp;
  
  while (swapped == 1) {
    swapped = 0;
    for (i = 1; i <= n-1; i++) {
      if (!lesspoly(I[i], I[i+1])) {
	tmp = I[i];
	I[i] = I[i+1];
	I[i+1] = tmp;
	swapped = 1;
      }
    }

    n = n - 1;
  }

  setring BR;
  def I_res = imap(@RP, I);

  return (I_res);
}

proc sortListAsce(list L) {
  // Basering is @R.
  def BR = basering;
  setring @RP;
  def L = imap(@R, L);
  
  if (size(L) <= 1) {
    setring BR;
    return (L);
  }

  // Bubble sort.
  int i;
  int swapped = 1;
  int n = size(L);
  poly tmp;
  
  while (swapped == 1) {
    swapped = 0;
    for (i = 1; i <= n-1; i++) {
      if (!lesspoly(L[i], L[i+1])) {
	tmp = L[i];
	L[i] = L[i+1];
	L[i+1] = tmp;
	swapped = 1;
      }
    }

    n = n - 1;
  }

  setring BR;
  def L_res = imap(@RP, L);

  return (L_res);
}

proc idealExcludePoly(ideal M, poly f) {
  // Basering is @RP.
  if (size(M) == 0) {
    return (M);
  }

  ideal new_M;
  int i;

  for (i = 1; i <= size(M); i++) {
    if (!equivalent(M[i], f)) {
      new_M = new_M + M[i];
    }
  }

  return (new_M);
}

proc updateCGS(list CGS, poly f, list BL) {
  // Basering @RP.
  if (size(CGS) == 0) {return (CGS);}

  list CGS_new;
  int i;

  for (i = 1; i <= size(CGS); i++) {
    if (!appearsInBranch(f, CGS[i])) {
      CGS_new = insert(CGS_new, CGS[i], size(CGS_new));
    }
  }

  for (i = 1; i <= size(BL); i++) {
    CGS_new = insert(CGS_new, BL[i], size(CGS_new));
  }

  return (CGS_new);
}

proc listAsceOrd(list L) {
  if (size(L) <= 1) {return (L);}

  // Bubble sort.
  int i;
  int swapped = 1;
  int n = size(L);
  poly tmp;

  while (swapped == 1) {
    swapped = 0;
    for (i = 1; i <= n-1; i++) {
      if (lesspoly(L[i+1], L[i])) {
	tmp = L[i];
	L[i] = L[i+1];
	L[i+1] = tmp;
	swapped = 1;
      }
    }
    n = n - 1;
  }

  return (L);
}

proc getEssentialOnlyInBranchByHC(poly f, poly pp_f, list higher_coefs, poly g, list G_can, ideal E, list N, list G_branch, list BL) {
  // Basering is @RP.
  if (size(higher_coefs) == 0) {
    // g covers f in (E, N).
    G_branch = deletePolyFromG(G_branch, f);
    // Issue: the function below must make the non-zero part monic.
    G_branch = insertPolyIntoG(G_branch, g, E, N);
    BL = insert(BL, list(E, N, G_branch), size(BL));

    return (BL);
  } else {
    int i;
    for (i = 1; i <= size(higher_coefs); i++) {
      poly cur_c = higher_coefs[i];

      if (checkNull(cur_c, E, N)) {
	// sigma(cur_c) is always 0.
	i++; // In SINGULAR, we need this statement before continue.
	continue;
      } else {
	if (checkNonNull(cur_c, E, N)) {
	  // sigma(cur_c) is never 0.
	  G_can = deletePolyFromList(G_can, g);
	  return (getEssentialOnlyInBranch(f, pp_f, G_can, E, N, G_branch, BL));
	} else {
	  // sigma(cur_c) is not determined.
	  list branches = splitBranch(E, N, cur_c);
	  list G_can_rem = deletePolyFromList(G_can_rem, g);
	  BL = getEssentialOnlyInBranch(f, pp_f, G_can, branches[1][1], branches[1][2], G_branch, BL);
	  BL = getEssentialOnlyInBranch(f, pp_f, G_can, branches[2][1], branches[2][2], G_branch, BL);
	  return (BL);
	}
      }
    } // End for.
    
    // all higher coefs are zero.
    G_branch = deletePolyFromG(G_branch, f);
    G_branch = insertPolyIntoG(G_branch, g, E, N);
    BL = insert(BL, list(E, N, G_branch), size(BL));

    return (BL);
  } // End if.
}

proc getEssentialOnlyInBranch(poly f, poly pp_f, list MRem, ideal E, list N, list G_branch, list BL) {
  // Basering is @RP.
  MRem = listAsceOrd(MRem);
  list G_can = getCandidatePolys(pp_f, MRem, E, N);
  
  if (size(G_can) == 0) {
    list branch = E, N, G_branch;
    BL = insert(BL, branch, size(BL));
    return (BL);
  }

  poly g = G_can[1];
  list higher_coefs = getHigherCoefs(g, pp_f);
  poly cp = getCoefOfPP(g, pp_f);
  if (checkNonNull(cp, E, N)) {
    return (getEssentialOnlyInBranchByHC(f, pp_f, higher_coefs, g, G_can, E, N, G_branch, BL));
  } else {
    list branches = splitBranch(E, N, cp);
    list G_can_rem = deletePolyFromList(G_can, g);
    BL = getEssentialOnlyInBranch(f, pp_f, G_can_rem, branches[1][1], branches[1][2], G_branch, BL);
    BL = getEssentialOnlyInBranch(f, pp_f, G_can, branches[2][1], branches[2][2], G_branch, BL);
    return (BL);
  }
}

proc getEssentialOnlyCGS(poly f, list M, list CGS) {
  // Basering is @RP.
  list BL;
  int i, j;

  for (i = 1; i <= size(CGS); i++) {
    if (appearsInBranch(f, CGS[i])) {
      poly pp_f;
      for (j = 1; j <= size(CGS[i][3]); j++) {
	if (equivalent(f, CGS[i][3][j][1] + CGS[i][3][j][2])) {
	  pp_f = lppX(CGS[i][3][j][1]);
	}
      }
      list MRem = deletePolyFromList(M, f);
      ideal E_cur = CGS[i][1];
      list N_cur = CGS[i][2];
      list G_cur = CGS[i][3];
      BL = getEssentialOnlyInBranch(f, pp_f, MRem, E_cur, N_cur, G_cur, BL);
      
    }
  }

  CGS = updateCGS(CGS, f, BL);
  
  for (i = 1; i <= size(CGS); i++) {
    if (appearsInBranch(f, CGS[i])) {
      return (1, CGS);
    }
  }

  return (0, CGS);
}

// A little bit cheating.
proc checkCGB(list M1, list M, list CGS) {
  // Basering is @RP.
  poly g;
  int i;
  int is_essential;
  list BL;

  for (i = 1; i <= size(M); i++) {
    if (!listContains(M1, M[i])) {
      g = M[i];
      break;
    }
  }

  if (g == 0) {return (0, list());}

  if (size(CGS) == 0) {return (1, CGS);}

  (is_essential, BL) = checkEssential(g, M1, CGS);

  if (is_essential) {
    return(0, list());
  } else {
    CGS = updateCGS(CGS, g, BL);
    return (1, CGS);
  }
}

proc trySubstitute(poly f, poly f_red, list M, list CGS) {
  // Basering is @RP.
  int is_essential;
  list CGS1;
  (is_essential, CGS1) = getEssentialOnlyCGS(f, M, CGS);

  if (!is_essential) {
    return (-1, CGS1);
  } else {
    int success;
    list M1 = substPolyInList(M, f, f_red);
    (success, CGS1) = checkCGB(M1, M, CGS1);
    if (success) {
      return (1, CGS1);
    } else {
      return (0, list());
    }
  }
}

proc substPolyInList(list M, poly g_old, poly g_new) {
  // Basering is @RP.
  int idx = listLookUp(M, g_old);

  if (idx != -1) {
    M = delete(M, idx);
    M = insert(M, g_new, idx - 1);
  }

  return (M);
}

proc ccgbMain(ideal E, list N, ideal F) {
  ideal G;
  list modcgs;

  (G, modcgs) = cgb_mod(F, E, N, out);

  if (size(G) == 0 || size(modcgs) == 0) {
    return (list());
  }

  set_global_rings_mcgb();
  set_global_objects();

  // Switch to @RP.
  setring @RP;
  def G = imap(@R, G);
  G = sortPolyDesc(G);
  def CGB = G;
  exportto(Top, CGB);
  def modcgs = imap(@R, modcgs);

  list modcgsRed = makeRRep(modcgs);
  list M;
  int i, j;

  for (i = 1; i <= size(G); i++) {
    M = insert(M, G[i], size(M));
  }

  for (i = 1; i <= size(G); i++) {
    poly cur_g = G[i];
    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "Now check g_%s = %s:", string(i), cur_g);
    }
    int is_essential;
    list BL;
    list modcgs_new;
    
    ideal MRem_ideal;
    for (j = 1; j <= size(M); j++) {
      if (M[j] != cur_g) {
	MRem_ideal = MRem_ideal + M[j];
      }
    }

    poly g_red = reduce(cur_g, MRem_ideal);
    g_red = monic(g_red);
    if (g_red == 0 || g_red == cur_g) {
      (is_essential, BL) = checkEssential(cur_g, M, modcgsRed);
      if (!is_essential) {
	modcgsRed = updateCGS(modcgsRed, cur_g, BL);
	M = deletePolyFromList(M, cur_g);
      }
    } else {
      int success; 
      (success, modcgs_new) = trySubstitute(cur_g, g_red, M, modcgsRed);

      if (success == -1) {
	// cur_g is already non-essential.
	modcgsRed = modcgs_new;
	M = deletePolyFromList(M, cur_g);
      } else {
	if (success == 1) {
	  // cur_g is essential,
	  // and when replaced by g_red, M is still a CGB.
	  modcgsRed = modcgs_new;
	  M = substPolyInList(M, cur_g, g_red);
	}
	// Otherwise, cur_g is kept in M.
      }

    }
  } // End of for.

  ideal M_ideal;
  for (i = 1; i <= size(M); i++) {
    M_ideal = M_ideal + M[i];
  }

  // Switch back to @R.
  setring @R;
  def CCGB = imap(@RP, M_ideal);
  def CGSRed = imap(@RP, modcgsRed);
  
  return (CCGB, CGSRed);
}

proc getRGB(ideal F) {
  // Basering is @R.
  if (size(F) == 0) {return (ideal());}

  def BR = basering;
  setring @RP;
  def F = imap(BR, F);
  option(redSB);
  def RGB = std(F);
  if (size(RGB) == 1 && RGB[1] == 1) {
    setring BR;
    return (ideal(1));
  } else {
    // Make polys in RGB monic.
    int i;
    for (i = 1; i <= size(RGB); i++) {
      RGB[i] = RGB[i] / leadcoef(RGB[i]);
    }

    setring BR;
    def RGB = imap(@RP, RGB);
    return (RGB);
  }
}

proc showMCGB(list M, link out) {
    int i;

    fprintf(out, "M = [" + newline );
    if (size(M) == 0) {
        fprintf(out, newline);
    } else {
	for (i = 1; i < size(M); i++) {
	    fprintf(out, "%s,", M[i]);
	}
	fprintf(out, "%s." + newline, M[size(M)]);
    }
    fprintf(out, "]."+newline);
}

proc showCCGB(G, link out) {
  // G can only be an ideal or a list.

  int i;
  fprintf(out, "C = [" + newline);
  if (size(G) == 0) {
    fprintf(out, newline);
  } else {
    for (i = 1; i < size(G); i++) {
      fprintf(out, "%s", G[i]);
    }
    fprintf(out, "%s." + newline, G[size(G)]);
  }
  fprintf(out, "]."+newline);
}

proc showRGB(ideal G, link out) {
  int i;
  fprintf(out, "RGB = [" + newline);
  if (size(G) == 0) {
    fprintf(out, newline);
  } else {
    for (i = 1; i < size(G); i++) {
      fprintf(out, "%s", G[i]);
    }
    fprintf(out, "%s." + newline, G[size(G)]);
  }
  fprintf(out, "]."+newline);
}

proc simplifyPoly(poly g, ideal E) {
  // Basering is @RP.
  poly g_nonzero = 0;
  poly g_zero = 0;
  ideal E_rad = radical(E);

  while (g != 0) {
    poly lc_g = leadcoef_U(g);
    if (!Check_Consistence_CGB(E_rad, list(lc_g))) {
      // lc_g is determined to be 0.
      g_zero = g_zero + lm_X(g);
    } else {
      poly f = reduce(lm_X(g), groebner(radical(E)));
      g_nonzero = g_nonzero + f;
      g_zero = g_zero + lm_X(g) - f;
    }
    g = g - lm_X(g);
  }

  return (g_nonzero, g_zero);
}

proc buildLCUFactors(list G_tuple) {
  // Basering is @RP.
  if (size(G_tuple) == 0) {
    return (ideal());
  }

  poly lc_prod = 1;
  int i;
  for (i = 1; i <= size(G_tuple); i++) {
    if (G_tuple[i][1] != 0) {
      lc_prod = lc_prod * leadcoef_U(G_tuple[i][1]);
    }
  }

  ideal LC_factors = factorize(lc_prod, 1);
  return (LC_factors);
}

proc updateNonNullList(list N, ideal I) {
  // Basering is @RP.
  if (size(I) == 0) {
    return (N);
  }

  poly N_prod = 1;
  int i;
  if (size(N) != 0) {
    for (i = 1; i <= size(N); i++) {
      N_prod = N_prod * N[i];
    }
  }

  if (size(I) > 0) {
    for (i = 1; i <= size(I); i++) {
      N_prod = N_prod * I[i];
    }
  }

  ideal N_new_factors = factorize(N_prod, 1);
  list N_new;
  if (size(N_new_factors) == 0) {
    N_new = list(1);
  } else {
    for (i = 1; i <= size(N_new_factors); i++) {
      N_new = insert(N_new, N_new_factors[i], size(N_new));
    }
  }

  return (N_new);

}

proc removeRedundancy(list G_tuple) {
  // Basering is @RP.
  if (size(G_tuple) == 0) {
    return (list());
  }

  int i;
  list G_tuple_new;
  for (i = 1; i <= size(G_tuple); i++) {
    if (G_tuple[i][1] != 0) {
      G_tuple_new = insert(G_tuple_new, G_tuple[i], size(G_tuple_new));
    }
  }

  return (G_tuple_new);
}

proc sortPolyAsce(list G_tuple) {
  // Basering is @RP.
  if (size(G_tuple) <= 1) {
    return (G_tuple);
  }

  // Bubble sort.
  int i;
  int swapped = 1;
  int n = size(G_tuple);
  list tmp;

  while (swapped == 1) {
    swapped = 0;
    for (i = 1; i <= n - 1; i++) {
      if (!lesspoly(G_tuple[i][1], G_tuple[i+1][1])) {
	tmp = G_tuple[i];
	G_tuple[i] = G_tuple[i+1];
	G_tuple[i+1] = tmp;
	swapped = 1;
      }
    }
    n = n - 1;
  }

  return (G_tuple);
}

proc removeLPPXRedundancy(list G_tuple) {
  // Basering is @RP.
  // G is sorted in an ascending order.

  if (size(G_tuple) <= 1) {
    return (G_tuple);
  }

  int i, j;
  for (i = 1; i <= size(G_tuple); i++) {
    for (j = i+1; j <= size(G_tuple); j++) {
      if (lppX(G_tuple[j][1]) / lppX(G_tuple[i][1]) != 0) {
	G_tuple = delete(G_tuple, j);
	continue;
      }
    }
  }

  return (G_tuple);
}

proc getMDBasis(list G_tuple) {
  // Basering is @RP.
  G_tuple = sortPolyAsce(G_tuple);
  G_tuple = removeLPPXRedundancy(G_tuple);

  return (G_tuple);
}

proc buildCGS_rec(ideal E, list N, list G_tuple, list CGS) {
  // Basering is @RP.
  if (size(G_tuple) == 0) {return (CGS);}

  if (!Check_Consistence_CGB(E, N)) {
    return (CGS);
  }

  // Simplify G_tuple due to E.
  int i;
  for (i = 1; i <= size(G_tuple); i++) {
    if (G_tuple[i][1] != 0) {
      poly g = G_tuple[i][1];
      poly g_nonzero, g_zero;
      (g_nonzero, g_zero) = simplifyPoly(g, E);
      G_tuple[i][1] = g_nonzero;
      G_tuple[i][2] = G_tuple[i][2] + g_zero;
    }
  }
  G_tuple = removeRedundancy(G_tuple);

  list mdbasis = getMDBasis(G_tuple);

  ideal LC_factors = buildLCUFactors(mdbasis);

  list N_branch = updateNonNullList(N, LC_factors);

  // Add new branch.
  CGS = insert(CGS, list(E, N_branch, mdbasis), size(CGS));
  
  list N_lc = N;
  for (i = 1; i <= size(LC_factors); i++) {
    poly lc_factor = LC_factors[i];
    CGS = buildCGS_rec(E+ideal(lc_factor), N_lc, G_tuple, CGS);
    N_lc = insert(N_lc, lc_factor, size(N_lc));
  }
  
  return (CGS);
}

proc buildCGS(list MCGB) {
  // Basering is @R.
  if (size(MCGB) == 0) {
    return (list());
  }

  // Switch to @RP.
  setring @RP;
  if (defined(MCGB)) {kill MCGB;}
  def MCGB = imap(@R, MCGB);
  if (defined(CGS)) {kill CGS;}
  list CGS;

  int i;
  list MCGB_tuple;
  for (i = 1; i<= size(MCGB); i++) {
    MCGB_tuple = insert(MCGB_tuple, list(MCGB[i], 0), size(MCGB_tuple));
  }

  CGS = buildCGS_rec(ideal(), list(1), MCGB_tuple, CGS);

  // Switch back to @R.
  setring @R;
  if (defined(CGS)) {kill CGS;}
  def CGS = imap(@RP, CGS);
  return (CGS);
}

proc makeReduced(list M, list CGS, out) {
  // Basering is @R.
  if (size(M) <= 1) {
    return (listToIdeal(M), CGS);
  }
  
  def BR = basering;
  setring @RP;
  
  def M = imap(@R, M);
  def CGS = imap(@R, CGS);
  def G = listToIdeal(M);
  def CGB = G;
  exportto(Top, CGB);
  list CGS_red = makeRRep(CGS);
  
  int i, j;
  for (i = 1; i <= size(G); i++) {
    poly cur_g = G[i];
    if (defined(debug_mode) && debug_mode == 1) {
      fprintf(out, "Now check g_%s = %s:", string(i), cur_g);
    }
    int is_essential;
    list BL;
    list CGS_new;
    
    ideal MRem_ideal;
    for (j = 1; j <= size(M); j++) {
      if (M[j] != cur_g) {
	MRem_ideal = MRem_ideal + M[j];
      }
    }

    poly g_red = reduce(cur_g, MRem_ideal);
    g_red = monic(g_red);

    if (g_red == 0 || g_red == cur_g) {
      (is_essential, BL) = checkEssential(cur_g, M, CGS_red);
      if (!is_essential) {
	CGS_red = updateCGS(CGS_red, cur_g, BL);
	M = deletePolyFromList(M, cur_g);
      }
    } else {
      int success;
      (success, CGS_new) = trySubstitute(cur_g, g_red, M, CGS_red);

      if (success == -1) {
	// cur_g is already non-essential.
	CGS_red = CGS_new;
	M = deletePolyFromList(M, cur_g);
      } else {
	if (success == 1) {
	  // cur_g is essential
	  // and when replaced by g_red, M is still a CGB.
	  CGS_red = CGS_new;
	  M = substPolyInList(M, cur_g, g_red);
	}
	// Otherwise, cur_g is kept in M.
      }
    }
  } // End of for.

  ideal M_ideal;
  M_ideal = listToIdeal(M);

  // Switch back to @R.
  setring BR;
  def M_simpl = imap(@RP, M_ideal);
  def CGSRed = imap(@RP, CGS_red);

  return (M_simpl, CGSRed);
}

