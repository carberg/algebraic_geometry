LIB "mcgb.lib";
LIB "mcgbcheck.lib";

proc simulate_CGB(ideal E, list N, ideal F, int sim_times, link out, int debug_mode) {
  def BR = basering;

  exportto(Top, out);
  exportto(Top, debug_mode);
  open(out);

  int i;
  fprintf(out, newline+"+++++++++++++++++++++++++++++++++++++++"+newline);

  // Print ring configuration.
  fprintf(out, "The given ring is:");
  fprintf(out, "%s" + newline, BR);

  // Print the given ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  // KSWCGB and KSWCGS.
  ideal G;
  list Modcgs;

  int sim_cnt = 1;
  list G_list;
  list CGS_list;
  
  while (sim_cnt <= sim_times) {
    ideal G;
    list Modcgs;
    
    (G, Modcgs) = cgb_mod(F, E, N, out);
    list G_L = idealToList(G);

    if (!listContainsList(G_list, G_L)) {
      G_list = insert(G_list, G_L, size(G_list));
      CGS_list = insert(CGS_list, Modcgs, size(CGS_list));
    }
    sim_cnt = sim_cnt + 1;
  }

  // Print all CGBs got by the KSW algorithm.
  for (i = 1; i <= size(G_list); i++) {
    fprintf(out, "-----------CGS and CGB %s ------------" + newline, string(i));
    fprintf(out, "%s" + newline, StringModCGS_mod(CGS_list[i]));
    fprintf(out, "%s" + newline, StringCGB(G_list[i]));
    fprintf(out, newline + "Size is: %s." + newline, string(size(G_list[i])));
  }
  
  close(out);
}

proc simulate_LeastMCGB(ideal E, list N, ideal F, int sim_times, link out, int debug_mode) {
  def BR = basering;

  exportto(Top, out);
  exportto(Top, debug_mode);
  open(out);

  int i;
  fprintf(out, newline+"+++++++++++++++++++++++++++++++++++++++"+newline);

  // Print ring configuration.
  fprintf(out, "The given ring is:");
  fprintf(out, "%s" + newline, BR);

  // Print the given ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  // Least MCGBs.
  list LeastMCGB_list;
  list CGS_list;

  int sim_cnt = 1;
  while (sim_cnt <= sim_times) {
    list M_least, Modcgs_least;

    (M_least, Modcgs_least) = mcgbMain(E, N, F);
    
    if (!listContainsList(LeastMCGB_list, M_least)) {
      LeastMCGB_list = insert(LeastMCGB_list, M_least, size(LeastMCGB_list));
      CGS_list = insert(CGS_list, Modcgs_least, size(CGS_list));
    }
    sim_cnt = sim_cnt + 1;
  }

  // Print all least MCGBs got from KSWCGB.
  for (i = 1; i <= size(LeastMCGB_list); i++) {
    fprintf(out, "------------ Least MCGB %s -------------" + newline, string(i));
    showMCGB(LeastMCGB_list[i], out);
    check_validity(LeastMCGB_list[i], CGS_list[i]);
    fprintf(out, newline + "Size is: %s" + newline, string(size(LeastMCGB_list[i])));
  }

  close(out);
}

proc simulate_CCGB(ideal E, list N, ideal F, int sim_times, link out, int debug_mode) {
  def BR = basering;

  exportto(Top, out);
  exportto(Top, debug_mode);
  open(out);

  int i;
  fprintf(out, newline+"+++++++++++++++++++++++++++++++++++++++"+newline);

  // Print ring configuration.
  fprintf(out, "The given ring is:");
  fprintf(out, "%s" + newline, BR);

  // Print the given ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  // CCGBs.
  list CCGB_list, CGS_list;
  int sim_cnt = 1;

  while (sim_cnt <= sim_times) {
    ideal CCGB;
    list CGS_ccgb;
    (CCGB, CGS_ccgb) = ccgbMain(E, N, F);
    list CCGB_L = idealToList(CCGB);

    if (!listContainsList(CCGB_list, CCGB_L)) {
      CCGB_list = insert(CCGB_list, CCGB_L, size(CCGB_list));
      CGS_list = insert(CGS_list, CGS_ccgb, size(CGS_list));
    }
    sim_cnt = sim_cnt + 1;
  }

  // Print all CCGBs.
  for (i = 1; i <= size(CCGB_list); i++) {
    fprintf(out, "----------------- CCGB %s -------------------" + newline, string(i));
    showCCGB(CCGB_list[i], out);  // Problematic.
    fprintf(out, newline + "Size is: %s." + newline, string(size(CCGB_list[i])));
    check_validity(CCGB_list[i], CGS_list[i]);
  }

  close(out);
}

proc simulate(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);

  exportto(Top, out);
  exportto(Top, debug_mode);
  open(out);

  int i;
  fprintf(out, newline+"+++++++++++++++++++++++++++++++++++++++"+newline);

  // Print ring configuration.
  fprintf(out, "The given ring is:");
  fprintf(out, "%s" + newline, BR);

  // Print the given ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  // KSWCGB and KSWCGS.
  ideal G_beginning;
  list Modcgs;
  
  (G_beginning, Modcgs) = cgb_mod(F, E, N, out);

  fprintf(out, "%s" + newline, StringModCGS_mod(Modcgs));
  fprintf(out, "%s" + newline, StringCGB(G_beginning));
  fprintf(out, newline + "Size is: %s." + newline, string(size(G_beginning)));

    
  // Algorithm 1.
  if (sim_option[1] > 0){
    fprintf(out, "================ Algorithm 1 =====================" + newline);
    int sim_cnt = 1;
    list M_list;

    while (sim_cnt <= sim_times) {
      list M, Modcgs_new;
      (M, Modcgs_new) = mcgbRandMain(E, N, F);
      if (size(M_list) == 0 || !listContainsList(M_list, M)) {
	M_list = insert(M_list, M, size(M_list));
      }
      sim_cnt = sim_cnt + 1;
    }
  
    // Print all MCGBs got from KSWCGB.
    for (i = 1; i <= size(M_list); i++) {
      fprintf(out, "---------------------" + newline);
      fprintf(out, "M_%s" + newline, string(i));
      showMCGB(M_list[i], out);
      fprintf(out, "Size is: %s." + newline, string(size(M_list[i])));
      check_validity(M_list[i], Modcgs);
    }
  }
  
  if (sim_option[2] > 0) {
    // Algorithm 2.
    fprintf(out, newline + "======================= Algorithm 2 ================" + newline);
    list M_least, Modcgs_least;
    (M_least, Modcgs_least) = mcgbMain(E, N, F);

    // Print the least one among all MCGBs got from KSWCGB.
    showMCGB(M_least, out);
    fprintf(out, newline + "Size is: %s" + newline, string(size(M_least)));
  
    check_validity(M_least, Modcgs);
  }

  if (sim_option[3] > 0) {
    // Algorithm 3.
    fprintf(out, newline + "========================= Algorithm 3 ======================" + newline);
    ideal CCGB;
    list CGS_ccgb;
    (CCGB, CGS_ccgb) = ccgbMain(E, N, F);
  
    // Print the canonical CGB of the given ideal.
    showCCGB(CCGB, out);
    fprintf(out, newline + "Size is: %s." + newline, string(size(CCGB)));
    if (size(CCGB) != 0) {
      list CCGB_list = idealToList(CCGB);
      check_validity(CCGB_list, Modcgs);
    } else {
      check_validity(list(), Modcgs);
    }
  }
  
  if (sim_option[4] > 0) {
    // RGB.
    fprintf(out, newline + "=================== RGB =================" + newline);
    ideal RGB = getRGB(F);

    // Print the RGB of the given ideal.
    showRGB(RGB, out);
    fprintf(out, newline + "Size is: %s." + newline, string(size(RGB)));
    if (size(RGB) != 0) {
      list RGB_list;
      for (i = 1; i <= size(RGB); i++) {
	RGB_list = insert(RGB_list, RGB[i], size(RGB_list));
      }
      check_validity(RGB_list, Modcgs);
    } else {
      check_validity(list(), Modcgs);
    }

      int contain_flag = 1;
 
      for (i = 1; i <= size(RGB); i++) {
	if (! idealContains(G_beginning, RGB[i])) {
	  contain_flag = 0;
	  break;
	}
      }
      if (contain_flag) {
	fprintf(out, "RGB is a subset of CGB!");
      } else {
	fprintf(out, "RGB is not a subset of CGB!");
      }
  }
  


  if (sim_option[5] > 0) {
    list CGS_rebuilt = buildCGS(CCGB_list);
    //list CGS_rebuilt = buildCGS(M_least);
    fprintf(out, newline + "================ Reconstruct CGS from CCGB ================");
    fprintf(out, "%s" + newline, StringModCGS_mod(CGS_rebuilt));
    fprintf(out, "Number of branches: %s" +newline, size(CGS_rebuilt));
  }

  close(out);
}

proc simulate_homog(ideal E, list N, ideal F, string var_name, int sim_times, link out, int debug_mode) {
  def BR = basering;

  homogenize_ring(var_name);

  setring @H;
  def dummy_var = var(nvars(@H));

  // Homogenize the ideal F.
  def F = imap(BR, F);
  F = homog(F, dummy_var);
  
  def E = imap(BR, E);

  if (!defined(N)) {
    def N = imap(BR, N);
  }
  
  simulate(E, N, F, sim_times, out, debug_mode);
  

}
