LIB "mcgb.lib";
LIB "mcgbcheck.lib";
LIB "buchtrace.lib";

proc simulate(ideal E, list N, ideal F, int sim_times, link out, int debug_mode, intvec sim_option) {
  def BR = basering;
  system("--no-warn", 1);

  exportto(Top, out);
  exportto(Top, debug_mode);
  open(out);

  int i, j;

  // Print the ring configuration.
  fprintf(out, "The given ring is:");
  fprintf(out, "%s" + newline, BR);

  // Print the given parametric ideal.
  fprintf(out, "F = {");
  if (size(F) > 0) {
    for (i = 1; i < size(F); i++) {
      fprintf(out, "%s, ", F[i]);
    }
    fprintf(out, "%s" + newline + "}." + newline, F[size(F)]);
  } else {
    fprintf(out, newline + "}." + newline);
  }

  // Print the given parameter space.
  fprintf(out, "E = {%s}." + newline, E);
  fprintf(out, "N = {%s}." + newline, string(N));

  // KSWCGB and KSWCGS.
  ideal G_beginning;
  list Modcgs;

  (G_beginning, Modcgs) = cgb_mod(F, E, N, out);

  set_global_rings_mcgb();
  G_beginning = purifyCGB(G_beginning);

  exportto(Top, G_beginning);
  exportto(Top, Modcgs);

  // Generate MCGBs.
  int sim_cnt = 1;
  list M_list;
  list M_norm_list;

  while (sim_cnt <= sim_times) {
    list M, M_norm, Modcgs_new;
    (M, Modcgs_new) = mcgbRandMain(E, N, F);
    if (size(M_list) == 0 || !listContainsList(M_list, M)) {
      M = sortSetAsce(M);
      M_list = insert(M_list, M, size(M_list));
      M_norm = makeMCGBReduced(M, Modcgs_new);
      M_norm = sortSetAsce(M_norm);
      M_norm_list = insert(M_norm_list, M_norm, size(M_norm_list));
    }
    sim_cnt = sim_cnt + 1;
  }

  // Generate CCGB.
  ideal CCGB;
  list CGS_ccgb;
  (CCGB, CGS_ccgb) = ccgbMain(E, N, F);

  // Generate RGB.
  ideal RGB = getRGB(F);

  // Sort polynomials in KSWCGB, RGB, MCGBs, and CCGB w.r.t. the ordering.
  list all_polys = idealToList(CCGB);

  if (size(RGB) > 0) {
    for (i = 1; i <= size(RGB); i++) {
      if (!listContains(all_polys, RGB[i])) {
	all_polys = insert(all_polys, RGB[i], size(all_polys));
      }
    }
  }

  if (size(G_beginning) > 0) {
    for (i = 1; i <= size(G_beginning); i++) {
      if (!listContains(all_polys, G_beginning[i])) {
	all_polys = insert(all_polys, G_beginning[i], size(all_polys));
      }
    }
  }

  if (size(M_list) > 0) {
    for (i = 1; i <= size(M_list); i++) {
      if (size(M_list[i]) > 0) {
	for (j = 1; j <= size(M_list[i]); j++) {
	  if (!listContains(all_polys, M_list[i][j])) {
	    all_polys = insert(all_polys, M_list[i][j], size(all_polys));
	  }
	}
      }
    }
  }

  if (size(M_norm_list) > 0) {
    for (i = 1; i <= size(M_norm_list); i++) {
      if (size(M_norm_list[i]) > 0) {
	for (j = 1; j <= size(M_norm_list[i]); j++) {
	  if (!listContains(all_polys, M_norm_list[i][j])) {
	    all_polys = insert(all_polys, M_norm_list[i][j], size(all_polys));
	  }
	}
      }
    }
  }

  all_polys = sortSetAsce(all_polys);
  exportto(Top, all_polys);

  // Print RGB and/or CCGB.
  fprintf(out, "=============================" + newline);
  if (idealEquals(CCGB, RGB)) {
    // RGB is the CCGB.
    fprintf(out, newline + "RGB is the CCGB." + newline);
    fprintf(out, "----------------------------" + newline);
    showCCGB(CCGB, all_polys, out);
    fprintf(out, "Size is: %s." + newline, string(size(CCGB)));
    if (size(CCGB) != 0) {
      check_validity(idealToList(CCGB), Modcgs);
    } else {
      check_validity(list(), Modcgs);
    }

  } else {
    // RGB is not the CCGB.

    // Show RGB.
    fprintf(out, newline + "RGB is not the CCGB." + newline);
    fprintf(out, "--------------------------------" + newline);
    showRGB(RGB, all_polys, out);
    fprintf(out, newline + "Size is : %s." + newline, string(size(RGB)));
    if (size(RGB) != 0) {
      check_validity(idealToList(RGB), Modcgs);
    } else {
      check_validity(list(), Modcgs);
    }

    // Show CCGB.
    fprintf(out, newline + "------------------------------" + newline);
    showCCGB(CCGB, all_polys, out);
    fprintf(out, newline + "Size is: %s." + newline, string(size(CCGB)));
    if (size(CCGB) > 0) {
      check_validity(idealToList(CCGB), Modcgs);
    } else {
      check_validity(list(), Modcgs);
    }
  }

  // Print MCGBs.
  if (size(M_list) > 1) {
    (M_list, M_norm_list) = sortMCGBs(M_list, M_norm_list);
  }

  if (size(M_list) > 0) {
    for (i = 1; i <= size(M_list); i++) {
      fprintf(out, "--------------------------" + newline);
      fprintf(out, "M_%s" + newline, string(i));
      showMCGB(M_list[i], all_polys, out);
      fprintf(out, "Size is: %s." + newline, string(size(M_list[i])));
      check_validity(M_list[i], Modcgs);
      
      fprintf(out, newline + "Normal form of M_%s :", string(i));
      showMCGB(M_norm_list[i], all_polys, out);
      fprintf(out, "Size is: %s." + newline, string(size(M_norm_list[i])));
      check_validity(M_norm_list[i], Modcgs);
    }
  }

  // Print the KSWCGS and KSWCGB.
  fprintf(out, "==================================" + newline);
  fprintf(out, "%s" + newline, StringCGB(G_beginning, all_polys));
  fprintf(out, newline + "Size is: %s." + newline, string(size(G_beginning)));
  fprintf(out, "--------------------------------------" + newline);
  fprintf(out, "%s" + newline, StringModCGS_mod(F, Modcgs, 1));
 

  close(out);
}
