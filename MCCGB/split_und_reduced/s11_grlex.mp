The given ring is:
(0,r,Z,r2,d3,d4),(t),(dp(1),C)

F = {
(r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-2*r+2*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2+4*d4^2)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4+4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-r*d3*d4-r+Z+r2^2*d3*d4+r2^2+d3^3*d4+d3^2*d4^2+d3*d4^3-d3*d4)
}.

E = {0}.

N = {}.

=============================


RGB is the CCGB.

----------------------------

C = [

/* f_1 = */ (-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)*t^4+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4+4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t^3+(2*r-2*Z-4*r2^2*d4^2-2*r2^2+2*d3^2*d4^2-4*d4^2)*t^2+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4-4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t+(r*d3*d4+r-Z-r2^2*d3*d4-r2^2-d3^3*d4-d3^2*d4^2-d3*d4^3+d3*d4);

].

Size is: 1.

It is comprehensive and minimal.
--------------------------

M_1

M = [

/* f_1 = */ (-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)*t^4+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4+4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t^3+(2*r-2*Z-4*r2^2*d4^2-2*r2^2+2*d3^2*d4^2-4*d4^2)*t^2+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4-4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t+(r*d3*d4+r-Z-r2^2*d3*d4-r2^2-d3^3*d4-d3^2*d4^2-d3*d4^3+d3*d4);

].

Size is: 1.

It is comprehensive and minimal.

Normal form of Split form of M_1 :
M = [

/* f_1 = */ (-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)*t^4+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4+4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t^3+(2*r-2*Z-4*r2^2*d4^2-2*r2^2+2*d3^2*d4^2-4*d4^2)*t^2+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4-4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t+(r*d3*d4+r-Z-r2^2*d3*d4-r2^2-d3^3*d4-d3^2*d4^2-d3*d4^3+d3*d4);

].

Size is : 1.

It is comprehensive and minimal.
==================================


Comprehensive Groebner Basis: 

/* f_1 = */ (-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)*t^4+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4+4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t^3+(2*r-2*Z-4*r2^2*d4^2-2*r2^2+2*d3^2*d4^2-4*d4^2)*t^2+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4-4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t+(r*d3*d4+r-Z-r2^2*d3*d4-r2^2-d3^3*d4-d3^2*d4^2-d3*d4^3+d3*d4),
/* f_2 = */ (-r*r2*d3*d4^2+r*r2*d4-Z*r2*d4+r2^3*d3*d4^2-r2^3*d4+r2*d3^3*d4^2-r2*d3^2*d4^3+r2*d3*d4^4-r2*d3*d4^2)*t^5+(4*r*r2^2*d4^2-4*r*d3^2*d4^2+5*r*d3*d4^3+3*r*d3*d4-5*r*d4^2+r-4*Z*d3*d4+5*Z*d4^2-Z-4*r2^4*d4^2+3*r2^2*d3*d4^3-3*r2^2*d3*d4-4*r2^2*d4^4+r2^2*d4^2-r2^2+4*d3^4*d4^2-9*d3^3*d4^3+d3^3*d4+9*d3^2*d4^4-5*d3^2*d4^2-5*d3*d4^5+6*d3*d4^3-d3*d4)/2*t^4+(4*r*r2*d3*d4^2-5*r*r2*d4^3+3*r*r2*d4-2*Z*r2*d4-4*r2^3*d3*d4^2+r2^3*d4^3-3*r2^3*d4-4*r2*d3^3*d4^2+15*r2*d3^2*d4^3-r2*d3^2*d4-14*r2*d3*d4^4-2*r2*d3*d4^2+5*r2*d4^5-r2*d4)*t^3+(2*r*r2^2*d4^2+4*r*d3*d4-5*r*d4^2+r-4*Z*d3*d4+5*Z*d4^2-Z-2*r2^4*d4^2-2*r2^2*d3^2*d4^2-12*r2^2*d3*d4^3-4*r2^2*d3*d4+8*r2^2*d4^4+r2^2*d4^2-r2^2+4*d3^3*d4^3-5*d3^2*d4^4+d3^2*d4^2-8*d3*d4^3+10*d4^4-2*d4^2)*t^2+(5*r*r2*d3*d4^2-5*r*r2*d4^3+2*r*r2*d4-Z*r2*d4-5*r2^3*d3*d4^2+5*r2^3*d4^3-2*r2^3*d4-5*r2*d3^3*d4^2-4*r2*d3^2*d4^3-r2*d3^2*d4+5*r2*d3*d4^4-5*r2*d3*d4^2+5*r2*d4^5+4*r2*d4^3-r2*d4)*t+(4*r*d3^2*d4^2-5*r*d3*d4^3+5*r*d3*d4-5*r*d4^2+r-4*Z*d3*d4+5*Z*d4^2-Z-4*r2^2*d3^2*d4^2+5*r2^2*d3*d4^3-5*r2^2*d3*d4+5*r2^2*d4^2-r2^2-4*d3^4*d4^2+d3^3*d4^3-d3^3*d4+d3^2*d4^4+3*d3^2*d4^2+5*d3*d4^5-6*d3*d4^3+d3*d4)/2,
/* f_3 = */ (-r*r2*d3*d4^4+2*r*r2*d3*d4^2+r*r2*d4^3-2*r*r2*d4-Z*r2*d4^3+2*Z*r2*d4+r2^3*d3*d4^4-2*r2^3*d3*d4^2-r2^3*d4^3+2*r2^3*d4+r2*d3^3*d4^4-2*r2*d3^3*d4^2-r2*d3^2*d4^5+2*r2*d3^2*d4^3+r2*d3*d4^6-3*r2*d3*d4^4+2*r2*d3*d4^2)*t^5+(-3*r*Z*d3*d4+3*r*Z+4*r*r2^2*d4^4-8*r*r2^2*d4^2-4*r*d3^2*d4^4+8*r*d3^2*d4^2+8*r*d3*d4^5-13*r*d3*d4^3-3*r*d3*d4-8*r*d4^4+17*r*d4^2-5*r-3*Z^2+3*Z*r2^2*d3*d4-3*Z*r2^2+3*Z*d3^3*d4-3*Z*d3^2*d4^2-Z*d3*d4^3+5*Z*d3*d4+8*Z*d4^4-17*Z*d4^2+5*Z-4*r2^4*d4^4+8*r2^4*d4^2-3*r2^2*d3*d4^3+3*r2^2*d3*d4-4*r2^2*d4^6+12*r2^2*d4^4-9*r2^2*d4^2+5*r2^2+4*d3^4*d4^4-8*d3^4*d4^2-12*d3^3*d4^5+25*d3^3*d4^3-5*d3^3*d4+12*d3^2*d4^6-29*d3^2*d4^4+13*d3^2*d4^2-8*d3*d4^7+25*d3*d4^5-22*d3*d4^3+5*d3*d4)/2*t^4+(3*r*Z*r2*d4+4*r*r2*d3*d4^4-8*r*r2*d3*d4^2-8*r*r2*d4^5+19*r*r2*d4^3-9*r*r2*d4-3*Z*r2^3*d4-3*Z*r2*d3^2*d4+6*Z*r2*d3*d4^2-5*Z*r2*d4^3+Z*r2*d4-4*r2^3*d3*d4^4+8*r2^3*d3*d4^2+4*r2^3*d4^5-11*r2^3*d4^3+9*r2^3*d4-4*r2*d3^3*d4^4+8*r2*d3^3*d4^2+18*r2*d3^2*d4^5-37*r2*d3^2*d4^3+5*r2*d3^2*d4-20*r2*d3*d4^6+38*r2*d3*d4^4-2*r2*d3*d4^2+8*r2*d4^7-13*r2*d4^5-4*r2*d4^3+5*r2*d4)*t^3+(3*r*Z+2*r*r2^2*d4^4-4*r*r2^2*d4^2+4*r*d3*d4^3-8*r*d3*d4-8*r*d4^4+17*r*d4^2-5*r-3*Z^2-6*Z*r2^2*d4^2-3*Z*r2^2+3*Z*d3^2*d4^2-4*Z*d3*d4^3+8*Z*d3*d4+8*Z*d4^4-23*Z*d4^2+5*Z-2*r2^4*d4^4+4*r2^4*d4^2-2*r2^2*d3^2*d4^4+4*r2^2*d3^2*d4^2-12*r2^2*d3*d4^5+20*r2^2*d3*d4^3+8*r2^2*d3*d4+14*r2^2*d4^6-24*r2^2*d4^4-3*r2^2*d4^2+5*r2^2+4*d3^3*d4^5-8*d3^3*d4^3-8*d3^2*d4^6+17*d3^2*d4^4-5*d3^2*d4^2-8*d3*d4^5+16*d3*d4^3+16*d4^6-34*d4^4+10*d4^2)*t^2+(3*r*Z*r2*d4+5*r*r2*d3*d4^4-10*r*r2*d3*d4^2-8*r*r2*d4^5+18*r*r2*d4^3-7*r*r2*d4-3*Z*r2^3*d4-3*Z*r2*d3^2*d4-6*Z*r2*d3*d4^2-4*Z*r2*d4^3-Z*r2*d4-5*r2^3*d3*d4^4+10*r2^3*d3*d4^2+8*r2^3*d4^5-18*r2^3*d4^3+7*r2^3*d4-5*r2*d3^3*d4^4+10*r2*d3^3*d4^2-r2*d3^2*d4^5+r2*d3^2*d4^3+5*r2*d3^2*d4+11*r2*d3*d4^6-27*r2*d3*d4^4+16*r2*d3*d4^2+8*r2*d4^7-9*r2*d4^5-12*r2*d4^3+5*r2*d4)*t+(3*r*Z*d3*d4+3*r*Z+4*r*d3^2*d4^4-8*r*d3^2*d4^2-8*r*d3*d4^5+21*r*d3*d4^3-13*r*d3*d4-8*r*d4^4+17*r*d4^2-5*r-3*Z^2-3*Z*r2^2*d3*d4-3*Z*r2^2-3*Z*d3^3*d4-3*Z*d3^2*d4^2-7*Z*d3*d4^3+11*Z*d3*d4+8*Z*d4^4-17*Z*d4^2+5*Z-4*r2^2*d3^2*d4^4+8*r2^2*d3^2*d4^2+8*r2^2*d3*d4^5-21*r2^2*d3*d4^3+13*r2^2*d3*d4+8*r2^2*d4^4-17*r2^2*d4^2+5*r2^2-4*d3^4*d4^4+8*d3^4*d4^2+4*d3^3*d4^5-9*d3^3*d4^3+5*d3^3*d4+4*d3^2*d4^6-5*d3^2*d4^4-3*d3^2*d4^2+8*d3*d4^7-25*d3*d4^5+22*d3*d4^3-5*d3*d4)/2;




Size is: 3.

--------------------------------------


Module Comprehensive Groebner Systems: 

Branch 1:
constraints: r2^2*d3*d4+d3^3*d4-d3^2*d4^2+d3*d4^3-r*d3*d4-r2^2-d3*d4+r-Z!=0,
RGB from KSW:
[(-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)*t^4+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4+4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t^3+(2*r-2*Z-4*r2^2*d4^2-2*r2^2+2*d3^2*d4^2-4*d4^2)*t^2+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4-4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t+(r*d3*d4+r-Z-r2^2*d3*d4-r2^2-d3^3*d4-d3^2*d4^2-d3*d4^3+d3*d4)  ,  0]

Module Groebner basis: 
[(-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)*t^4+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4+4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t^3+(2*r-2*Z-4*r2^2*d4^2-2*r2^2+2*d3^2*d4^2-4*d4^2)*t^2+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4-4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t+(r*d3*d4+r-Z-r2^2*d3*d4-r2^2-d3^3*d4-d3^2*d4^2-d3*d4^3+d3*d4) , 0].

LPP Set of Module Groebner Basis under specialization:
[ t^4 ]

Branch 2:
constraints: r2^2*d3*d4+d3^3*d4-d3^2*d4^2+d3*d4^3-r*d3*d4-r2^2-d3*d4+r-Z=0,r2!=0,r2^2+d3^2-2*d3*d4+d4^2-r+1!=0,d4!=0,
RGB from KSW:
[(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-2*r+2*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2+4*d4^2)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4+4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-2*r+2*Z+2*r2^2+2*d3^2*d4^2)  ,  (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)]
[(2*r*r2-2*Z*r2-2*r2^3+2*r2*d3^2*d4^2-4*r2*d3*d4)*t^3+(-4*r*d3*d4^2+2*r*d3+4*r*d4-2*Z*d3-4*Z*d4-2*r2^2*d3-4*r2^2*d4+6*d3^3*d4^2-4*d3^2*d4^3+4*d3*d4^4-8*d3*d4^2)*t^2+(2*r*r2-2*Z*r2-2*r2^3-6*r2*d3^2*d4^2-4*r2*d3*d4)*t+(2*r*d3-2*Z*d3-2*r2^2*d3-2*d3^3*d4^2)  ,  (-r*d3^2*d4+r*d3-Z*d3+r2^2*d3^2*d4-r2^2*d3+d3^4*d4-d3^3*d4^2+d3^2*d4^3-d3^2*d4)*t^4+(2*r*r2*d3*d4-2*r*r2+2*Z*r2-2*r2^3*d3*d4+2*r2^3-2*r2*d3^3*d4+2*r2*d3^2*d4^2-2*r2*d3*d4^3+2*r2*d3*d4)*t^3+(4*r*d3*d4^2-4*r*d4+4*Z*d4-4*r2^2*d3*d4^2+4*r2^2*d4-4*d3^3*d4^2+4*d3^2*d4^3-4*d3*d4^4+4*d3*d4^2)*t^2+(2*r*r2*d3*d4-2*r*r2+2*Z*r2-2*r2^3*d3*d4+2*r2^3-2*r2*d3^3*d4+2*r2*d3^2*d4^2-2*r2*d3*d4^3+2*r2*d3*d4)*t+(r*d3^2*d4-r*d3+Z*d3-r2^2*d3^2*d4+r2^2*d3-d3^4*d4+d3^3*d4^2-d3^2*d4^3+d3^2*d4)]
[(2*r^2*r2-2*r*Z*r2-4*r*r2^3-2*r*r2*d3^2+8*r*r2+2*Z*r2^3+2*Z*r2*d3^2-4*Z*r2*d3*d4+2*Z*r2*d4^2-8*Z*r2+2*r2^5+2*r2^3*d3^2-8*r2^3+4*r2*d3^3*d4+8*r2*d3*d4^3-16*r2*d3*d4-2*r2*d4^4-2*r2*d4^2)*t^3+(2*r^2*d3-2*r*Z*d3-4*r*r2^2*d3-4*r*r2^2*d4-2*r*d3^3-12*r*d3*d4^2+12*r*d3+8*r*d4+2*Z*r2^2*d3+4*Z*r2^2*d4+2*Z*d3^3-4*Z*d3^2*d4+2*Z*d3*d4^2-12*Z*d3-8*Z*d4+2*r2^4*d3+4*r2^4*d4+2*r2^2*d3^3-12*r2^2*d3-4*r2^2*d4^3-8*r2^2*d4+4*d3^4*d4+12*d3^3*d4^2-4*d3^2*d4^3-4*d3^2*d4+10*d3*d4^4-22*d3*d4^2-4*d4^3)*t^2+(2*r^2*r2-2*r*Z*r2-4*r*r2^3-2*r*r2*d3^2+2*Z*r2^3+2*Z*r2*d3^2+4*Z*r2*d3*d4+2*Z*r2*d4^2+2*r2^5+2*r2^3*d3^2-4*r2*d3^3*d4-16*r2*d3^2*d4^2-8*r2*d3*d4^3-8*r2*d3*d4-2*r2*d4^4-2*r2*d4^2)*t+(2*r^2*d3-2*r*Z*d3-4*r*r2^2*d3-2*r*d3^3+8*r*d3+2*Z*r2^2*d3+2*Z*d3^3+2*Z*d3*d4^2-8*Z*d3+2*r2^4*d3+2*r2^2*d3^3-8*r2^2*d3-8*d3^3*d4^2-2*d3*d4^4+2*d3*d4^2)  ,  (-r^2*d3^2*d4+r^2*d3-r*Z*d3+2*r*r2^2*d3^2*d4-2*r*r2^2*d3+2*r*d3^4*d4-2*r*d3^3*d4^2-r*d3^3+2*r*d3^2*d4^3-4*r*d3^2*d4-2*r*d3*d4^2+4*r*d3+r*d4+Z*r2^2*d3+Z*d3^3-Z*d3^2*d4+Z*d3*d4^2-4*Z*d3-Z*d4-r2^4*d3^2*d4+r2^4*d3-2*r2^2*d3^4*d4+2*r2^2*d3^3*d4^2+r2^2*d3^3-2*r2^2*d3^2*d4^3+4*r2^2*d3^2*d4+2*r2^2*d3*d4^2-4*r2^2*d3-r2^2*d4-d3^6*d4+2*d3^5*d4^2-3*d3^4*d4^3+5*d3^4*d4+2*d3^3*d4^4-4*d3^3*d4^2-d3^2*d4^5+4*d3^2*d4^3-4*d3^2*d4+d3*d4^4-d3*d4^2)*t^4+(2*r^2*r2*d3*d4-2*r^2*r2+2*r*Z*r2-4*r*r2^3*d3*d4+4*r*r2^3-4*r*r2*d3^3*d4+6*r*r2*d3^2*d4^2+2*r*r2*d3^2-4*r*r2*d3*d4^3+6*r*r2*d3*d4+2*r*r2*d4^2-8*r*r2-2*Z*r2^3-2*Z*r2*d3^2+4*Z*r2*d3*d4-2*Z*r2*d4^2+8*Z*r2+2*r2^5*d3*d4-2*r2^5+4*r2^3*d3^3*d4-6*r2^3*d3^2*d4^2-2*r2^3*d3^2+4*r2^3*d3*d4^3-6*r2^3*d3*d4-2*r2^3*d4^2+8*r2^3+2*r2*d3^5*d4-6*r2*d3^4*d4^2+8*r2*d3^3*d4^3-10*r2*d3^3*d4-6*r2*d3^2*d4^4+12*r2*d3^2*d4^2+2*r2*d3*d4^5-10*r2*d3*d4^3+8*r2*d3*d4)*t^3+(-4*r*r2^2*d3*d4^2+4*r*r2^2*d4+2*r*d3^3*d4^2+2*r*d3^2*d4+6*r*d3*d4^2-4*r*d3-6*r*d4-4*Z*r2^2*d4+2*Z*d3^2*d4+4*Z*d3+6*Z*d4+4*r2^4*d3*d4^2-4*r2^4*d4+2*r2^2*d3^3*d4^2-4*r2^2*d3^2*d4^3-2*r2^2*d3^2*d4+4*r2^2*d3*d4^4-10*r2^2*d3*d4^2+4*r2^2*d3+6*r2^2*d4-2*d3^5*d4^2+2*d3^4*d4^3-4*d3^4*d4-2*d3^3*d4^4+2*d3^2*d4^3+4*d3^2*d4-6*d3*d4^4+6*d3*d4^2)*t^2+(2*r^2*r2*d3*d4-2*r^2*r2+2*r*Z*r2-4*r*r2^3*d3*d4+4*r*r2^3-4*r*r2*d3^3*d4-2*r*r2*d3^2*d4^2+2*r*r2*d3^2-4*r*r2*d3*d4^3+6*r*r2*d3*d4+2*r*r2*d4^2-2*Z*r2^3-2*Z*r2*d3^2-4*Z*r2*d3*d4-2*Z*r2*d4^2+2*r2^5*d3*d4-2*r2^5+4*r2^3*d3^3*d4+2*r2^3*d3^2*d4^2-2*r2^3*d3^2+4*r2^3*d3*d4^3-6*r2^3*d3*d4-2*r2^3*d4^2+2*r2*d3^5*d4+2*r2*d3^4*d4^2-2*r2*d3^3*d4+2*r2*d3^2*d4^4-4*r2*d3^2*d4^2+2*r2*d3*d4^5-2*r2*d3*d4^3)*t+(r^2*d3^2*d4-r^2*d3+r*Z*d3-2*r*r2^2*d3^2*d4+2*r*r2^2*d3-2*r*d3^4*d4+r*d3^3-2*r*d3^2*d4^3+6*r*d3^2*d4-4*r*d3+r*d4-Z*r2^2*d3-Z*d3^3-Z*d3^2*d4-Z*d3*d4^2+4*Z*d3-Z*d4+r2^4*d3^2*d4-r2^4*d3+2*r2^2*d3^4*d4-r2^2*d3^3+2*r2^2*d3^2*d4^3-6*r2^2*d3^2*d4+4*r2^2*d3-r2^2*d4+d3^6*d4+d3^4*d4^3-5*d3^4*d4+4*d3^3*d4^2+d3^2*d4^5-6*d3^2*d4^3+4*d3^2*d4+d3*d4^4-d3*d4^2)]
[(-2*r*r2^2-2*r*d3^2*d4^2+4*r*d3*d4-2*r+2*Z*r2^2-2*Z*d3*d4+2*Z+2*r2^4+2*r2^2+2*d3^4*d4^2-2*d3^3*d4^3-2*d3^3*d4+2*d3^2*d4^4-2*d3*d4^3+2*d3*d4)*t^3+(4*r*r2*d3*d4^2-2*r*r2*d3-4*r*r2*d4+2*Z*r2*d3+4*Z*r2*d4+2*r2^3*d3+4*r2^3*d4-6*r2*d3^3*d4^2+4*r2*d3^2*d4^3-4*r2*d3*d4^4+8*r2*d3*d4^2)*t^2+(-2*r*r2^2+6*r*d3^2*d4^2+4*r*d3*d4-10*r+2*Z*r2^2+6*Z*d3*d4+10*Z+2*r2^4+10*r2^2-6*d3^4*d4^2+6*d3^3*d4^3-10*d3^3*d4-6*d3^2*d4^4+16*d3^2*d4^2-10*d3*d4^3+10*d3*d4)*t+(-2*r*r2*d3+2*Z*r2*d3+2*r2^3*d3+2*r2*d3^3*d4^2)  ,  (r*r2*d3^2*d4-r*r2*d3+Z*r2*d3-r2^3*d3^2*d4+r2^3*d3-r2*d3^4*d4+r2*d3^3*d4^2-r2*d3^2*d4^3+r2*d3^2*d4)*t^4+(-2*r*r2^2*d3*d4+2*r*r2^2+2*r*d3^2*d4^2-4*r*d3*d4+2*r-2*Z*r2^2+2*Z*d3*d4-2*Z+2*r2^4*d3*d4-2*r2^4+2*r2^2*d3^3*d4-4*r2^2*d3^2*d4^2+2*r2^2*d3*d4^3+2*r2^2*d3*d4-2*r2^2-2*d3^4*d4^2+2*d3^3*d4^3+2*d3^3*d4-2*d3^2*d4^4+2*d3*d4^3-2*d3*d4)*t^3+(-4*r*r2*d3*d4^2+4*r*r2*d4-4*Z*r2*d4+4*r2^3*d3*d4^2-4*r2^3*d4+4*r2*d3^3*d4^2-4*r2*d3^2*d4^3+4*r2*d3*d4^4-4*r2*d3*d4^2)*t^2+(-2*r*r2^2*d3*d4+2*r*r2^2-6*r*d3^2*d4^2-4*r*d3*d4+10*r-2*Z*r2^2-6*Z*d3*d4-10*Z+2*r2^4*d3*d4-2*r2^4+2*r2^2*d3^3*d4+4*r2^2*d3^2*d4^2+2*r2^2*d3*d4^3+2*r2^2*d3*d4-10*r2^2+6*d3^4*d4^2-6*d3^3*d4^3+10*d3^3*d4+6*d3^2*d4^4-16*d3^2*d4^2+10*d3*d4^3-10*d3*d4)*t+(-r*r2*d3^2*d4+r*r2*d3-Z*r2*d3+r2^3*d3^2*d4-r2^3*d3+r2*d3^4*d4-r2*d3^3*d4^2+r2*d3^2*d4^3-r2*d3^2*d4)]

Module Groebner basis: 
[(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-2*r+2*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2+4*d4^2)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4+4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-2*r+2*Z+2*r2^2+2*d3^2*d4^2) , (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)].

LPP Set of Module Groebner Basis under specialization:
[ t^3 ]

Branch 3:
constraints: r2^2+d3^2-2*d3*d4+d4^2-r+1=0,d3^2*d4^2+d3^2-4*d3*d4+d4^2-Z+1=0,-2*d3*d4^3+d4^4-r*d4^2-d3^2+5*d3*d4-d4^2+Z-1!=0,
RGB from KSW:
[(4*r*d4^2-4*Z+4*d3^2+8*d3*d4^3-20*d3*d4-4*d4^4+4*d4^2+4)*t^2+(8*r2*d3*d4^2)*t+(4*Z-4*d3^2+12*d3*d4-4*d4^2-4)  ,  (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-4*r*d4^2-2*r+6*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2-4*d3^2-8*d3*d4^3+20*d3*d4+4*d4^4-4)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-r*d3*d4-r-3*Z+r2^2*d3*d4+r2^2+d3^3*d4+d3^2*d4^2+4*d3^2+d3*d4^3-13*d3*d4+4*d4^2+4)]
[(4*r*Z-4*r*d3^2+16*r*d3*d4+8*r*d4^2-4*r-4*Z*d3^2+8*Z*d3*d4-4*Z*d4^2+28*Z+4*d3^4-28*d3^3*d4-24*d3^2+92*d3*d4-8*d4^4-24*d4^2-28)*t^2+(8*Z*r2*d3-8*r2*d3^3+32*r2*d3^2*d4+16*r2*d3*d4^2-8*r2*d3)*t+(4*Z*d3^2+8*Z-4*d3^4+12*d3^3*d4-12*d3^2+20*d3*d4-8*d4^2-8)  ,  (r*d3^3*d4-r*d3^2+3*r*d3*d4-3*r+Z*d3^2+3*Z-r2^2*d3^3*d4+r2^2*d3^2-3*r2^2*d3*d4+3*r2^2-d3^5*d4+d3^4*d4^2-d3^3*d4^3-2*d3^3*d4+3*d3^2*d4^2-3*d3*d4^3+3*d3*d4)*t^4+(-2*r*r2*d3^2*d4-6*r*r2*d4+2*r2^3*d3^2*d4+6*r2^3*d4+2*r2*d3^4*d4-4*r2*d3^3*d4^2+2*r2*d3^2*d4^3+8*r2*d3^2*d4-12*r2*d3*d4^2+6*r2*d4^3+6*r2*d4)*t^3+(-4*r*Z+2*r*d3^2-16*r*d3*d4-8*r*d4^2-2*r+6*Z*d3^2-8*Z*d3*d4+4*Z*d4^2-22*Z+4*r2^2*d3^2*d4^2+2*r2^2*d3^2+12*r2^2*d4^2+6*r2^2-2*d3^4*d4^2-4*d3^4+28*d3^3*d4-2*d3^2*d4^2+24*d3^2-92*d3*d4+8*d4^4+36*d4^2+28)*t^2+(-2*r*r2*d3^2*d4-6*r*r2*d4-8*Z*r2*d3+2*r2^3*d3^2*d4+6*r2^3*d4+2*r2*d3^4*d4+4*r2*d3^3*d4^2+8*r2*d3^3+2*r2*d3^2*d4^3-24*r2*d3^2*d4-4*r2*d3*d4^2+8*r2*d3+6*r2*d4^3+6*r2*d4)*t+(-r*d3^3*d4-r*d3^2-3*r*d3*d4-3*r-3*Z*d3^2-5*Z+r2^2*d3^3*d4+r2^2*d3^2+3*r2^2*d3*d4+3*r2^2+d3^5*d4+d3^4*d4^2+4*d3^4+d3^3*d4^3-10*d3^3*d4+3*d3^2*d4^2+12*d3^2+3*d3*d4^3-23*d3*d4+8*d4^2+8)]
[(-8*r*d3*d4^2-4*r*d4^3+8*Z*d3-12*Z*d4-8*d3^3+52*d3^2*d4-52*d3*d4^2-8*d3+4*d4^5+12*d4^3+12*d4)*t^2+(-16*Z*r2+16*r2*d3^2-8*r2*d3*d4^3-64*r2*d3*d4+16*r2*d4^2+16*r2)*t+(-8*Z*d3-4*Z*d4+8*d3^3-20*d3^2*d4-4*d3*d4^2+8*d3+4*d4^3+4*d4)  ,  (-2*r*d3^2*d4-r*d3*d4^2+2*r*d3+r*d4-2*Z*d3-Z*d4+2*r2^2*d3^2*d4+r2^2*d3*d4^2-2*r2^2*d3-r2^2*d4+2*d3^4*d4-d3^3*d4^2+d3^2*d4^3-2*d3^2*d4+d3*d4^4-d3*d4^2)*t^4+(4*r*r2*d3*d4+2*r*r2*d4^2-4*r2^3*d3*d4-2*r2^3*d4^2-4*r2*d3^3*d4+6*r2*d3^2*d4^2-4*r2*d3*d4-2*r2*d4^4-2*r2*d4^2)*t^3+(8*r*d3*d4^2+4*r*d3+4*r*d4^3+2*r*d4-12*Z*d3+10*Z*d4-8*r2^2*d3*d4^2-4*r2^2*d3-4*r2^2*d4^3-2*r2^2*d4+4*d3^3*d4^2+8*d3^3+2*d3^2*d4^3-52*d3^2*d4+44*d3*d4^2+8*d3-4*d4^5-16*d4^3-12*d4)*t^2+(4*r*r2*d3*d4+2*r*r2*d4^2+16*Z*r2-4*r2^3*d3*d4-2*r2^3*d4^2-4*r2*d3^3*d4-10*r2*d3^2*d4^2-16*r2*d3^2+60*r2*d3*d4-2*r2*d4^4-18*r2*d4^2-16*r2)*t+(2*r*d3^2*d4+r*d3*d4^2+2*r*d3+r*d4+6*Z*d3+3*Z*d4-2*r2^2*d3^2*d4-r2^2*d3*d4^2-2*r2^2*d3-r2^2*d4-2*d3^4*d4-3*d3^3*d4^2-8*d3^3-3*d3^2*d4^3+22*d3^2*d4-d3*d4^4+5*d3*d4^2-8*d3-4*d4^3-4*d4)]

Module Groebner basis: 
[(4*r*d4^2-4*Z+4*d3^2+8*d3*d4^3-20*d3*d4-4*d4^4+4*d4^2+4)*t^2+(8*r2*d3*d4^2)*t+(4*Z-4*d3^2+12*d3*d4-4*d4^2-4) , (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-4*r*d4^2-2*r+6*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2-4*d3^2-8*d3*d4^3+20*d3*d4+4*d4^4-4)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-r*d3*d4-r-3*Z+r2^2*d3*d4+r2^2+d3^3*d4+d3^2*d4^2+4*d3^2+d3*d4^3-13*d3*d4+4*d4^2+4)].

LPP Set of Module Groebner Basis under specialization:
[ t^2 ]

Branch 4:
constraints: r2^2+d3^2-2*d3*d4+d4^2-r+1=0,2*d3*d4^3-d4^4+r*d4^2+d3^2-5*d3*d4+d4^2-Z+1=0,d3^2*d4^2+d3^2-4*d3*d4+d4^2-Z+1=0,d3^4-7*d3^3*d4-2*d4^4-r*d3^2-Z*d3^2+4*r*d3*d4+2*Z*d3*d4+2*r*d4^2-Z*d4^2+r*Z-6*d3^2+23*d3*d4-6*d4^2-r+7*Z-7=0,d4^5-2*r*d3*d4^2-r*d4^3-2*d3^3+13*d3^2*d4-13*d3*d4^2+3*d4^3+2*Z*d3-3*Z*d4-2*d3+3*d4=0,d3-d4!=0,d3!=0,d4!=0,
RGB from KSW:
[(8*d3^2*d4-8*d3*d4^2)*t+(4*Z*r2-4*r2*d3^2+12*r2*d3*d4-4*r2*d4^2-4*r2)  ,  (r*r2*d3*d4-r*r2+Z*r2-r2^3*d3*d4+r2^3-r2*d3^3*d4+r2*d3^2*d4^2-r2*d3*d4^3+r2*d3*d4)*t^4+(-2*r*r2^2*d4+2*r2^4*d4+2*r2^2*d3^2*d4-4*r2^2*d3*d4^2+2*r2^2*d4^3+2*r2^2*d4)*t^3+(-2*r*r2+2*Z*r2+4*r2^3*d4^2+2*r2^3-2*r2*d3^2*d4^2+4*r2*d4^2)*t^2+(-2*r*r2^2*d4+2*r2^4*d4+2*r2^2*d3^2*d4+4*r2^2*d3*d4^2+2*r2^2*d4^3+2*r2^2*d4-8*d3^2*d4+8*d3*d4^2)*t+(-r*r2*d3*d4-r*r2-3*Z*r2+r2^3*d3*d4+r2^3+r2*d3^3*d4+r2*d3^2*d4^2+4*r2*d3^2+r2*d3*d4^3-13*r2*d3*d4+4*r2*d4^2+4*r2)]
[(8*r*d4^2+8*Z*d3*d4-8*Z*d4^2-16*d3*d4+8*d4^2)*t+(-4*r*r2*d3*d4^2+4*Z*r2*d3*d4^2+4*Z*r2*d3-8*Z*r2*d4-4*r2*d3^3+24*r2*d3^2*d4-28*r2*d3*d4^2-4*r2*d3+8*r2*d4^3+8*r2*d4)  ,  (r*r2*d3^2*d4^3+r*r2*d3^2*d4-4*r*r2*d3*d4^2-r*r2*d3+3*r*r2*d4+Z*r2*d3*d4^2+Z*r2*d3-3*Z*r2*d4-r2^3*d3^2*d4^3-r2^3*d3^2*d4+4*r2^3*d3*d4^2+r2^3*d3-3*r2^3*d4-r2*d3^4*d4^3-r2*d3^4*d4+r2*d3^3*d4^4+4*r2*d3^3*d4^2-r2*d3^2*d4^5-3*r2*d3^2*d4^3+r2*d3^2*d4+3*r2*d3*d4^4-3*r2*d3*d4^2)*t^4+(-2*r*r2^2*d3*d4^3-2*r*r2^2*d3*d4+6*r*r2^2*d4^2+2*r2^4*d3*d4^3+2*r2^4*d3*d4-6*r2^4*d4^2+2*r2^2*d3^3*d4^3+2*r2^2*d3^3*d4-4*r2^2*d3^2*d4^4-10*r2^2*d3^2*d4^2+2*r2^2*d3*d4^5+16*r2^2*d3*d4^3+2*r2^2*d3*d4-6*r2^2*d4^4-6*r2^2*d4^2)*t^3+(-2*r*r2*d3*d4^2-2*r*r2*d3+6*r*r2*d4+2*Z*r2*d3*d4^2+2*Z*r2*d3-6*Z*r2*d4+4*r2^3*d3*d4^4+6*r2^3*d3*d4^2+2*r2^3*d3-12*r2^3*d4^3-6*r2^3*d4-2*r2*d3^3*d4^4-2*r2*d3^3*d4^2+6*r2*d3^2*d4^3+4*r2*d3*d4^4+4*r2*d3*d4^2-12*r2*d4^3)*t^2+(-2*r*r2^2*d3*d4^3-2*r*r2^2*d3*d4+6*r*r2^2*d4^2-8*r*d4^2-8*Z*d3*d4+8*Z*d4^2+2*r2^4*d3*d4^3+2*r2^4*d3*d4-6*r2^4*d4^2+2*r2^2*d3^3*d4^3+2*r2^2*d3^3*d4+4*r2^2*d3^2*d4^4-2*r2^2*d3^2*d4^2+2*r2^2*d3*d4^5-8*r2^2*d3*d4^3+2*r2^2*d3*d4-6*r2^2*d4^4-6*r2^2*d4^2+16*d3*d4-8*d4^2)*t+(-r*r2*d3^2*d4^3-r*r2*d3^2*d4+6*r*r2*d3*d4^2-r*r2*d3+3*r*r2*d4-3*Z*r2*d3*d4^2-3*Z*r2*d3+5*Z*r2*d4+r2^3*d3^2*d4^3+r2^3*d3^2*d4-2*r2^3*d3*d4^2+r2^3*d3-3*r2^3*d4+r2*d3^4*d4^3+r2*d3^4*d4+r2*d3^3*d4^4-2*r2*d3^3*d4^2+4*r2*d3^3+r2*d3^2*d4^5-3*r2*d3^2*d4^3-25*r2*d3^2*d4-3*r2*d3*d4^4+31*r2*d3*d4^2+4*r2*d3-8*r2*d4^3-8*r2*d4)]
[(-8*Z*d3+8*Z*d4+8*d3^3+8*d3-8*d4^3-8*d4)*t+(-2*r*r2*d4^2-4*Z*r2*d3*d4+10*Z*r2+4*r2*d3^3*d4-10*r2*d3^2+26*r2*d3*d4+2*r2*d4^4-10*r2*d4^2-10*r2)  ,  (-r*r2*d3^2*d4^2+6*r*r2*d3*d4-5*r*r2-Z*r2*d3*d4+5*Z*r2+r2^3*d3^2*d4^2-6*r2^3*d3*d4+5*r2^3+r2*d3^4*d4^2-r2*d3^3*d4^3-5*r2*d3^3*d4+r2*d3^2*d4^4+4*r2*d3^2*d4^2-5*r2*d3*d4^3+5*r2*d3*d4)*t^4+(2*r*r2^2*d3*d4^2-10*r*r2^2*d4-2*r2^4*d3*d4^2+10*r2^4*d4-2*r2^2*d3^3*d4^2+4*r2^2*d3^2*d4^3+10*r2^2*d3^2*d4-2*r2^2*d3*d4^4-22*r2^2*d3*d4^2+10*r2^2*d4^3+10*r2^2*d4)*t^3+(2*r*r2*d3*d4-10*r*r2-2*Z*r2*d3*d4+10*Z*r2-4*r2^3*d3*d4^3-2*r2^3*d3*d4+20*r2^3*d4^2+10*r2^3+2*r2*d3^3*d4^3-10*r2*d3^2*d4^2-4*r2*d3*d4^3+20*r2*d4^2)*t^2+(2*r*r2^2*d3*d4^2-10*r*r2^2*d4+8*Z*d3-8*Z*d4-2*r2^4*d3*d4^2+10*r2^4*d4-2*r2^2*d3^3*d4^2-4*r2^2*d3^2*d4^3+10*r2^2*d3^2*d4-2*r2^2*d3*d4^4+18*r2^2*d3*d4^2+10*r2^2*d4^3+10*r2^2*d4-8*d3^3-8*d3+8*d4^3+8*d4)*t+(r*r2*d3^2*d4^2-4*r*r2*d3*d4+2*r*r2*d4^2-5*r*r2+3*Z*r2*d3*d4-5*Z*r2-r2^3*d3^2*d4^2+4*r2^3*d3*d4+5*r2^3-r2*d3^4*d4^2-r2*d3^3*d4^3+r2*d3^3*d4-r2*d3^2*d4^4+6*r2*d3^2*d4^2+10*r2*d3^2+5*r2*d3*d4^3-31*r2*d3*d4-2*r2*d4^4+10*r2*d4^2+10*r2)]
[(-8*Z*r2+8*r2*d3^2-32*r2*d3*d4+8*r2*d4^2+8*r2)*t+(-4*Z*d3+4*d3^3-12*d3^2*d4+4*d3*d4^2+4*d3)  ,  (-r*d3^2*d4+r*d3-Z*d3+r2^2*d3^2*d4-r2^2*d3+d3^4*d4-d3^3*d4^2+d3^2*d4^3-d3^2*d4)*t^4+(2*r*r2*d3*d4-2*r2^3*d3*d4-2*r2*d3^3*d4+4*r2*d3^2*d4^2-2*r2*d3*d4^3-2*r2*d3*d4)*t^3+(2*r*d3-2*Z*d3-4*r2^2*d3*d4^2-2*r2^2*d3+2*d3^3*d4^2-4*d3*d4^2)*t^2+(2*r*r2*d3*d4+8*Z*r2-2*r2^3*d3*d4-2*r2*d3^3*d4-4*r2*d3^2*d4^2-8*r2*d3^2-2*r2*d3*d4^3+30*r2*d3*d4-8*r2*d4^2-8*r2)*t+(r*d3^2*d4+r*d3+3*Z*d3-r2^2*d3^2*d4-r2^2*d3-d3^4*d4-d3^3*d4^2-4*d3^3-d3^2*d4^3+13*d3^2*d4-4*d3*d4^2-4*d3)]
[(-8*r*Z+8*r*d3^2-32*r*d3*d4+8*r*d4^2+8*r+8*Z-8*d3^2+32*d3*d4-8*d4^2-8)*t+(-4*r*Z*r2*d4+4*r*r2*d3^2*d4-4*r*r2*d3*d4^2+4*r*r2*d4-4*Z*r2*d3*d4^2-4*Z*r2*d3+4*Z*r2*d4^3+4*Z*r2*d4+4*r2*d3^3-28*r2*d3^2*d4+28*r2*d3*d4^2+4*r2*d3-8*r2*d4^3-4*r2*d4)  ,  (-r^2*r2*d3*d4^2+r^2*r2*d4-r*Z*r2*d4+r*r2^3*d3*d4^2-r*r2^3*d4+r*r2*d3^3*d4^2-2*r*r2*d3^2*d4^3+2*r*r2*d3*d4^4-r*r2*d4^3-Z*r2*d3*d4^2+Z*r2*d4^3+r2^3*d3^2*d4^3-r2^3*d3*d4^4-r2^3*d3*d4^2+r2^3*d4^3+r2*d3^4*d4^3-2*r2*d3^3*d4^4+2*r2*d3^2*d4^5-r2*d3^2*d4^3-r2*d3*d4^6+r2*d3*d4^4)*t^4+(2*r^2*r2^2*d4^2-2*r*r2^4*d4^2-2*r*r2^2*d3^2*d4^2+6*r*r2^2*d3*d4^3-4*r*r2^2*d4^4-2*r*r2^2*d4^2-2*r2^4*d3*d4^3+2*r2^4*d4^4-2*r2^2*d3^3*d4^3+6*r2^2*d3^2*d4^4-6*r2^2*d3*d4^5-2*r2^2*d3*d4^3+2*r2^2*d4^6+2*r2^2*d4^4)*t^3+(2*r^2*r2*d4-2*r*Z*r2*d4-4*r*r2^3*d4^3-2*r*r2^3*d4+2*r*r2*d3^2*d4^3+2*r*r2*d3*d4^2-6*r*r2*d4^3-2*Z*r2*d3*d4^2+2*Z*r2*d4^3-4*r2^3*d3*d4^4-2*r2^3*d3*d4^2+4*r2^3*d4^5+2*r2^3*d4^3+2*r2*d3^3*d4^4-2*r2*d3^2*d4^5-4*r2*d3*d4^4+4*r2*d4^5)*t^2+(2*r^2*r2^2*d4^2+8*r*Z-2*r*r2^4*d4^2-2*r*r2^2*d3^2*d4^2-2*r*r2^2*d3*d4^3-4*r*r2^2*d4^4-2*r*r2^2*d4^2-8*r*d3^2+32*r*d3*d4-8*r*d4^2-8*r-8*Z-2*r2^4*d3*d4^3+2*r2^4*d4^4-2*r2^2*d3^3*d4^3-2*r2^2*d3^2*d4^4+2*r2^2*d3*d4^5-2*r2^2*d3*d4^3+2*r2^2*d4^6+2*r2^2*d4^4+8*d3^2-32*d3*d4+8*d4^2+8)*t+(r^2*r2*d3*d4^2+r^2*r2*d4+3*r*Z*r2*d4-r*r2^3*d3*d4^2-r*r2^3*d4-r*r2*d3^3*d4^2-4*r*r2*d3^2*d4-2*r*r2*d3*d4^4+6*r*r2*d3*d4^2-r*r2*d4^3-4*r*r2*d4+3*Z*r2*d3*d4^2+4*Z*r2*d3-3*Z*r2*d4^3-4*Z*r2*d4-r2^3*d3^2*d4^3+r2^3*d3*d4^4-r2^3*d3*d4^2+r2^3*d4^3-r2*d3^4*d4^3-4*r2*d3^3+r2*d3^2*d4^3+28*r2*d3^2*d4+r2*d3*d4^6-r2*d3*d4^4-28*r2*d3*d4^2-4*r2*d3+8*r2*d4^3+4*r2*d4)]
[(-4*r*d4^2-4*Z+4*d3^2-12*d3*d4+4*d4^4+4*d4^2+4)*t+(-4*Z*r2*d4+4*r2*d3^2*d4-12*r2*d3*d4^2+4*r2*d4^3+4*r2*d4)  ,  (-r*r2*d3*d4^2+r*r2*d4-Z*r2*d4+r2^3*d3*d4^2-r2^3*d4+r2*d3^3*d4^2-r2*d3^2*d4^3+r2*d3*d4^4-r2*d3*d4^2)*t^4+(2*r*r2^2*d4^2-2*r2^4*d4^2-2*r2^2*d3^2*d4^2+4*r2^2*d3*d4^3-2*r2^2*d4^4-2*r2^2*d4^2)*t^3+(2*r*r2*d4-2*Z*r2*d4-4*r2^3*d4^3-2*r2^3*d4+2*r2*d3^2*d4^3-4*r2*d4^3)*t^2+(2*r*r2^2*d4^2+4*r*d4^2+4*Z-2*r2^4*d4^2-2*r2^2*d3^2*d4^2-4*r2^2*d3*d4^3-2*r2^2*d4^4-2*r2^2*d4^2-4*d3^2+12*d3*d4-4*d4^4-4*d4^2-4)*t+(r*r2*d3*d4^2+r*r2*d4+3*Z*r2*d4-r2^3*d3*d4^2-r2^3*d4-r2*d3^3*d4^2-r2*d3^2*d4^3-4*r2*d3^2*d4-r2*d3*d4^4+13*r2*d3*d4^2-4*r2*d4^3-4*r2*d4)]
[(-8*Z*r2*d4+8*r2*d4^3+8*r2*d4)*t+(4*r*d3*d4-4*Z*d3*d4+12*Z-4*d3^3*d4-12*d3^2+36*d3*d4-12*d4^2-12)  ,  (-r^2*d3*d4+r^2-r*Z+r*r2^2*d3*d4-r*r2^2+2*r*d3^3*d4-4*r*d3^2*d4^2-r*d3^2+2*r*d3*d4^3+6*r*d3*d4-r*d4^2-4*r+Z*d3^2-3*Z*d3*d4+Z*d4^2+4*Z-r2^2*d3^3*d4+3*r2^2*d3^2*d4^2+r2^2*d3^2-r2^2*d3*d4^3-7*r2^2*d3*d4+r2^2*d4^2+4*r2^2-d3^5*d4+4*d3^4*d4^2-5*d3^3*d4^3-3*d3^3*d4+4*d3^2*d4^4+d3^2*d4^2-d3*d4^5-3*d3*d4^3+4*d3*d4)*t^4+(2*r^2*r2*d4-2*r*r2^3*d4-4*r*r2*d3^2*d4+10*r*r2*d3*d4^2-4*r*r2*d4^3-10*r*r2*d4+2*r2^3*d3^2*d4-6*r2^3*d3*d4^2+2*r2^3*d4^3+8*r2^3*d4+2*r2*d3^4*d4-10*r2*d3^3*d4^2+16*r2*d3^2*d4^3+10*r2*d3^2*d4-10*r2*d3*d4^4-22*r2*d3*d4^2+2*r2*d4^5+10*r2*d4^3+8*r2*d4)*t^3+(2*r^2-2*r*Z-4*r*r2^2*d4^2-2*r*r2^2+2*r*d3^2*d4^2-2*r*d3^2+6*r*d3*d4-6*r*d4^2-8*r+2*Z*d3^2-6*Z*d3*d4+2*Z*d4^2+8*Z+4*r2^2*d3^2*d4^2+2*r2^2*d3^2-12*r2^2*d3*d4^3-6*r2^2*d3*d4+4*r2^2*d4^4+18*r2^2*d4^2+8*r2^2-2*d3^4*d4^2+6*d3^3*d4^3-2*d3^2*d4^4-4*d3^2*d4^2-12*d3*d4^3+4*d4^4+16*d4^2)*t^2+(2*r^2*r2*d4-2*r*r2^3*d4-4*r*r2*d3^2*d4+2*r*r2*d3*d4^2-4*r*r2*d4^3-10*r*r2*d4+8*Z*r2*d4+2*r2^3*d3^2*d4-6*r2^3*d3*d4^2+2*r2^3*d4^3+8*r2^3*d4+2*r2*d3^4*d4-2*r2*d3^3*d4^2-8*r2*d3^2*d4^3+10*r2*d3^2*d4-2*r2*d3*d4^4+10*r2*d3*d4^2+2*r2*d4^5+2*r2*d4^3)*t+(r^2*d3*d4+r^2-r*Z-r*r2^2*d3*d4-r*r2^2-2*r*d3^3*d4+2*r*d3^2*d4^2-r*d3^2-2*r*d3*d4^3-4*r*d3*d4-r*d4^2-4*r+Z*d3^2+Z*d3*d4+Z*d4^2-8*Z+r2^2*d3^3*d4-3*r2^2*d3^2*d4^2+r2^2*d3^2+r2^2*d3*d4^3+r2^2*d3*d4+r2^2*d4^2+4*r2^2+d3^5*d4-2*d3^4*d4^2-d3^3*d4^3+7*d3^3*d4-2*d3^2*d4^4+7*d3^2*d4^2+12*d3^2+d3*d4^5+3*d3*d4^3-40*d3*d4+12*d4^2+12)]
[(-16*r*Z*d4+16*r*d4^3+16*r*d4+16*Z*d4-16*d4^3-16*d4)*t+(4*r^2*r2*d4^2-4*r*Z*r2*d4^2-4*r*Z*r2+4*r*r2*d3^2-12*r*r2*d3*d4-4*r*r2*d4^4+32*r*r2*d4^2+4*r*r2-4*Z^2*r2+4*Z*r2*d3^2-4*Z*r2*d3*d4+4*Z*r2*d4^4-12*Z*r2*d4^2+56*Z*r2-16*r2*d3^3*d4-52*r2*d3^2+140*r2*d3*d4-12*r2*d4^4-36*r2*d4^2-52*r2)  ,  (-r^2*r2*d3*d4^3-2*r^2*r2*d3*d4+r^2*r2*d4^2+2*r^2*r2-r*Z*r2*d3*d4-r*Z*r2*d4^2-r*Z*r2+r*r2^3*d3*d4^3+2*r*r2^3*d3*d4-r*r2^3*d4^2-2*r*r2^3+r*r2*d3^3*d4^3+3*r*r2*d3^3*d4-r*r2*d3^2*d4^4-r*r2*d3^2*d4^2-r*r2*d3^2+2*r*r2*d3*d4^5-4*r*r2*d3*d4^3+6*r*r2*d3*d4-r*r2*d4^4+5*r*r2*d4^2-9*r*r2-Z^2*r2+Z*r2^3*d3*d4-Z*r2^3+Z*r2*d3^3*d4-Z*r2*d3^2*d4^2+Z*r2*d3^2+Z*r2*d3*d4^3+Z*r2*d4^4-5*Z*r2*d4^2+9*Z*r2-r2^3*d3^3*d4-r2^3*d3^2*d4^2+r2^3*d3^2-r2^3*d3*d4^5+5*r2^3*d3*d4^3-8*r2^3*d3*d4+r2^3*d4^4-5*r2^3*d4^2+9*r2^3-r2*d3^5*d4-r2*d3^3*d4^5+5*r2*d3^3*d4^3-8*r2*d3^3*d4+r2*d3^2*d4^6-6*r2*d3^2*d4^4+10*r2*d3^2*d4^2-r2*d3*d4^7+6*r2*d3*d4^5-14*r2*d3*d4^3+9*r2*d3*d4)*t^4+(2*r^2*r2^2*d4^3+4*r^2*r2^2*d4+2*r*Z*r2^2*d4-2*r*r2^4*d4^3-4*r*r2^4*d4-2*r*r2^2*d3^2*d4^3-6*r*r2^2*d3^2*d4+4*r*r2^2*d3*d4^4+6*r*r2^2*d3*d4^2-4*r*r2^2*d4^5+4*r*r2^2*d4^3-22*r*r2^2*d4-2*Z*r2^4*d4-2*Z*r2^2*d3^2*d4+4*Z*r2^2*d3*d4^2-2*Z*r2^2*d4^3-2*Z*r2^2*d4+2*r2^4*d3^2*d4+2*r2^4*d3*d4^2+2*r2^4*d4^5-10*r2^4*d4^3+18*r2^4*d4+2*r2^2*d3^4*d4-2*r2^2*d3^3*d4^2+2*r2^2*d3^2*d4^5-12*r2^2*d3^2*d4^3+20*r2^2*d3^2*d4-4*r2^2*d3*d4^6+22*r2^2*d3*d4^4-34*r2^2*d3*d4^2+2*r2^2*d4^7-8*r2^2*d4^5+8*r2^2*d4^3+18*r2^2*d4)*t^3+(2*r^2*r2*d4^2+4*r^2*r2-2*r*Z*r2*d4^2-2*r*Z*r2-4*r*r2^3*d4^4-10*r*r2^3*d4^2-4*r*r2^3+2*r*r2*d3^2*d4^4+4*r*r2*d3^2*d4^2-2*r*r2*d3^2-2*r*r2*d3*d4-6*r*r2*d4^4+2*r*r2*d4^2-18*r*r2-2*Z^2*r2-4*Z*r2^3*d4^2-2*Z*r2^3+2*Z*r2*d3^2*d4^2+2*Z*r2*d3^2+2*Z*r2*d3*d4+2*Z*r2*d4^4-14*Z*r2*d4^2+18*Z*r2+4*r2^3*d3^2*d4^2+2*r2^3*d3^2+4*r2^3*d3*d4^3+2*r2^3*d3*d4+4*r2^3*d4^6-18*r2^3*d4^4+26*r2^3*d4^2+18*r2^3-2*r2*d3^4*d4^2-2*r2*d3^3*d4^3-2*r2*d3^2*d4^6+10*r2*d3^2*d4^4-14*r2*d3^2*d4^2+4*r2*d3*d4^3+4*r2*d4^6-20*r2*d4^4+36*r2*d4^2)*t^2+(2*r^2*r2^2*d4^3+4*r^2*r2^2*d4+2*r*Z*r2^2*d4+16*r*Z*d4-2*r*r2^4*d4^3-4*r*r2^4*d4-2*r*r2^2*d3^2*d4^3-6*r*r2^2*d3^2*d4-4*r*r2^2*d3*d4^4-10*r*r2^2*d3*d4^2-4*r*r2^2*d4^5+4*r*r2^2*d4^3-22*r*r2^2*d4-16*r*d4^3-16*r*d4-2*Z*r2^4*d4-2*Z*r2^2*d3^2*d4-4*Z*r2^2*d3*d4^2-2*Z*r2^2*d4^3-2*Z*r2^2*d4-16*Z*d4+2*r2^4*d3^2*d4+2*r2^4*d3*d4^2+2*r2^4*d4^5-10*r2^4*d4^3+18*r2^4*d4+2*r2^2*d3^4*d4+6*r2^2*d3^3*d4^2+2*r2^2*d3^2*d4^5-4*r2^2*d3^2*d4^3+20*r2^2*d3^2*d4+4*r2^2*d3*d4^6-18*r2^2*d3*d4^4+38*r2^2*d3*d4^2+2*r2^2*d4^7-8*r2^2*d4^5+8*r2^2*d4^3+18*r2^2*d4+16*d4^3+16*d4)*t+(r^2*r2*d3*d4^3+2*r^2*r2*d3*d4-3*r^2*r2*d4^2+2*r^2*r2+r*Z*r2*d3*d4+3*r*Z*r2*d4^2+3*r*Z*r2-r*r2^3*d3*d4^3-2*r*r2^3*d3*d4-r*r2^3*d4^2-2*r*r2^3-r*r2*d3^3*d4^3-3*r*r2*d3^3*d4-r*r2*d3^2*d4^4-3*r*r2*d3^2*d4^2-5*r*r2*d3^2-2*r*r2*d3*d4^5+4*r*r2*d3*d4^3+4*r*r2*d3*d4+3*r*r2*d4^4-27*r*r2*d4^2-13*r*r2+3*Z^2*r2-Z*r2^3*d3*d4-Z*r2^3-Z*r2*d3^3*d4-Z*r2*d3^2*d4^2-3*Z*r2*d3^2-Z*r2*d3*d4^3+6*Z*r2*d3*d4-3*Z*r2*d4^4+7*Z*r2*d4^2-47*Z*r2+r2^3*d3^3*d4+r2^3*d3^2*d4^2+r2^3*d3^2+r2^3*d3*d4^5-5*r2^3*d3*d4^3+10*r2^3*d3*d4+r2^3*d4^4-5*r2^3*d4^2+9*r2^3+r2*d3^5*d4+2*r2*d3^4*d4^2+r2*d3^3*d4^5-3*r2*d3^3*d4^3+24*r2*d3^3*d4+r2*d3^2*d4^6-4*r2*d3^2*d4^4+8*r2*d3^2*d4^2+52*r2*d3^2+r2*d3*d4^7-6*r2*d3*d4^5+14*r2*d3*d4^3-149*r2*d3*d4+12*r2*d4^4+36*r2*d4^2+52*r2)]
[(8*r2*d3*d4^2)*t+(4*Z-4*d3^2+12*d3*d4-4*d4^2-4)  ,  (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-2*r+2*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2+4*d4^2)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-r*d3*d4-r-3*Z+r2^2*d3*d4+r2^2+d3^3*d4+d3^2*d4^2+4*d3^2+d3*d4^3-13*d3*d4+4*d4^2+4)]
[(8*r*d3*d4^2-8*d3*d4^2)*t+(8*r*r2*d4^2+4*Z*r2*d3*d4-4*Z*r2*d4^2+12*Z*r2-4*r2*d3^3*d4-12*r2*d3^2+32*r2*d3*d4-4*r2*d4^4-8*r2*d4^2-12*r2)  ,  (r*r2*d3^2*d4^2-r*r2*d3*d4^3+r*r2*d4^2-r*r2+Z*r2*d3*d4-Z*r2*d4^2+Z*r2-r2^3*d3^2*d4^2+r2^3*d3*d4^3-r2^3*d4^2+r2^3-r2*d3^4*d4^2+2*r2*d3^3*d4^3-r2*d3^3*d4-2*r2*d3^2*d4^4+2*r2*d3^2*d4^2+r2*d3*d4^5-2*r2*d3*d4^3+r2*d3*d4)*t^4+(-2*r*r2^2*d3*d4^2+2*r*r2^2*d4^3-2*r*r2^2*d4+2*r2^4*d3*d4^2-2*r2^4*d4^3+2*r2^4*d4+2*r2^2*d3^3*d4^2-6*r2^2*d3^2*d4^3+2*r2^2*d3^2*d4+6*r2^2*d3*d4^4-2*r2^2*d3*d4^2-2*r2^2*d4^5+2*r2^2*d4)*t^3+(-2*r*r2*d3*d4+2*r*r2*d4^2-2*r*r2+2*Z*r2*d3*d4-2*Z*r2*d4^2+2*Z*r2+4*r2^3*d3*d4^3+2*r2^3*d3*d4-4*r2^3*d4^4+2*r2^3*d4^2+2*r2^3-2*r2*d3^3*d4^3+2*r2*d3^2*d4^4-2*r2*d3^2*d4^2+4*r2*d3*d4^3-4*r2*d4^4+4*r2*d4^2)*t^2+(-2*r*r2^2*d3*d4^2+2*r*r2^2*d4^3-2*r*r2^2*d4-8*r*d3*d4^2+2*r2^4*d3*d4^2-2*r2^4*d4^3+2*r2^4*d4+2*r2^2*d3^3*d4^2+2*r2^2*d3^2*d4^3+2*r2^2*d3^2*d4-2*r2^2*d3*d4^4+6*r2^2*d3*d4^2-2*r2^2*d4^5+2*r2^2*d4+8*d3*d4^2)*t+(-r*r2*d3^2*d4^2+r*r2*d3*d4^3-2*r*r2*d3*d4-7*r*r2*d4^2-r*r2-3*Z*r2*d3*d4+3*Z*r2*d4^2-11*Z*r2+r2^3*d3^2*d4^2-r2^3*d3*d4^3+2*r2^3*d3*d4-r2^3*d4^2+r2^3+r2*d3^4*d4^2+5*r2*d3^3*d4+12*r2*d3^2-r2*d3*d4^5+2*r2*d3*d4^3-33*r2*d3*d4+4*r2*d4^4+8*r2*d4^2+12*r2)]
[(8*r*r2*d4^2-8*Z*r2*d4^2-8*r2*d3*d4+8*r2*d4^2)*t+(4*r*d3*d4^2-4*Z*d3*d4^2+4*Z*d4-8*d3^2*d4+12*d3*d4^2-4*d4^3-4*d4)  ,  (-r*d3^2*d4^3+3*r*d3*d4^2-2*r*d4-Z*d3*d4^2+2*Z*d4+r2^2*d3^2*d4^3-3*r2^2*d3*d4^2+2*r2^2*d4+d3^4*d4^3-d3^3*d4^4-2*d3^3*d4^2+d3^2*d4^5+d3^2*d4^3-2*d3*d4^4+2*d3*d4^2)*t^4+(2*r*r2*d3*d4^3-4*r*r2*d4^2-2*r2^3*d3*d4^3+4*r2^3*d4^2-2*r2*d3^3*d4^3+4*r2*d3^2*d4^4+4*r2*d3^2*d4^2-2*r2*d3*d4^5-10*r2*d3*d4^3+4*r2*d4^4+4*r2*d4^2)*t^3+(2*r*d3*d4^2-4*r*d4-2*Z*d3*d4^2+4*Z*d4-4*r2^2*d3*d4^4-2*r2^2*d3*d4^2+8*r2^2*d4^3+4*r2^2*d4+2*d3^3*d4^4-4*d3^2*d4^3-4*d3*d4^4+8*d4^3)*t^2+(2*r*r2*d3*d4^3-12*r*r2*d4^2+8*Z*r2*d4^2-2*r2^3*d3*d4^3+4*r2^3*d4^2-2*r2*d3^3*d4^3-4*r2*d3^2*d4^4+4*r2*d3^2*d4^2-2*r2*d3*d4^5+6*r2*d3*d4^3+8*r2*d3*d4+4*r2*d4^4-4*r2*d4^2)*t+(r*d3^2*d4^3-5*r*d3*d4^2-2*r*d4+3*Z*d3*d4^2-2*Z*d4-r2^2*d3^2*d4^3+r2^2*d3*d4^2+2*r2^2*d4-d3^4*d4^3-d3^3*d4^4+2*d3^3*d4^2-d3^2*d4^5+3*d3^2*d4^3+8*d3^2*d4+2*d3*d4^4-14*d3*d4^2+4*d4^3+4*d4)]
[(8*r^2*d4^2-8*r*Z*d4^2-8*r*d3*d4+8*Z*d4^2+8*d3*d4-8*d4^2)*t+(-4*r^2*r2*d3*d4^2+4*r*Z*r2*d3*d4^2+4*r*Z*r2*d3-4*r*Z*r2*d4-4*r*r2*d3^3+24*r*r2*d3^2*d4-24*r*r2*d3*d4^2-4*r*r2*d3+8*r*r2*d4^3+4*r*r2*d4-4*Z^2*r2*d3+4*Z^2*r2*d4+4*Z*r2*d3^3-24*Z*r2*d3^2*d4+20*Z*r2*d3*d4^2+4*Z*r2*d3-8*Z*r2*d4^3+4*r2*d3*d4^2-4*r2*d4)  ,  (r^2*r2*d3^2*d4^3-7*r^2*r2*d3*d4^2+6*r^2*r2*d4-r*Z*r2*d3^2*d4+2*r*Z*r2*d3*d4^2+r*Z*r2*d3-7*r*Z*r2*d4-r*r2^3*d3^2*d4^3+7*r*r2^3*d3*d4^2-6*r*r2^3*d4-r*r2*d3^4*d4^3+r*r2*d3^4*d4+r*r2*d3^3*d4^4+6*r*r2*d3^3*d4^2-r*r2*d3^3-r*r2*d3^2*d4^5-11*r*r2*d3^2*d4^3+7*r*r2*d3^2*d4+9*r*r2*d3*d4^4+r*r2*d3*d4^2-7*r*r2*d3-3*r*r2*d4^3-r*r2*d4-Z^2*r2*d3+Z^2*r2*d4+Z*r2^3*d3^2*d4-Z*r2^3*d3*d4^2-Z*r2^3*d3+Z*r2^3*d4+Z*r2*d3^4*d4-2*Z*r2*d3^3*d4^2+Z*r2*d3^3+2*Z*r2*d3^2*d4^3-Z*r2*d3^2*d4-Z*r2*d3*d4^4-5*Z*r2*d3*d4^2+7*Z*r2*d3+3*Z*r2*d4^3+Z*r2*d4-r2^3*d3^4*d4+r2^3*d3^3+6*r2^3*d3^2*d4^3-7*r2^3*d3^2*d4-3*r2^3*d3*d4^4-7*r2^3*d3*d4^2+7*r2^3*d3+3*r2^3*d4^3+r2^3*d4-r2*d3^6*d4+r2*d3^5*d4^2+5*r2*d3^4*d4^3-6*r2*d3^4*d4-9*r2*d3^3*d4^4+6*r2*d3^3*d4^2+9*r2*d3^2*d4^5-12*r2*d3^2*d4^3+7*r2*d3^2*d4-3*r2*d3*d4^6+2*r2*d3*d4^4+r2*d3*d4^2)*t^4+(-2*r^2*r2^2*d3*d4^3+12*r^2*r2^2*d4^2+2*r*Z*r2^2*d3*d4-2*r*Z*r2^2*d4^2+2*r*r2^4*d3*d4^3-12*r*r2^4*d4^2+2*r*r2^2*d3^3*d4^3-2*r*r2^2*d3^3*d4-4*r*r2^2*d3^2*d4^4-12*r*r2^2*d3^2*d4^2+2*r*r2^2*d3*d4^5+38*r*r2^2*d3*d4^3-14*r*r2^2*d3*d4-18*r*r2^2*d4^4-14*r*r2^2*d4^2-2*Z*r2^4*d3*d4+2*Z*r2^4*d4^2-2*Z*r2^2*d3^3*d4+6*Z*r2^2*d3^2*d4^2-6*Z*r2^2*d3*d4^3-2*Z*r2^2*d3*d4+2*Z*r2^2*d4^4+2*Z*r2^2*d4^2+2*r2^4*d3^3*d4-12*r2^4*d3*d4^3+14*r2^4*d3*d4+6*r2^4*d4^4+2*r2^4*d4^2+2*r2^2*d3^5*d4-4*r2^2*d3^4*d4^2-10*r2^2*d3^3*d4^3+16*r2^2*d3^3*d4+30*r2^2*d3^2*d4^4-26*r2^2*d3^2*d4^2-24*r2^2*d3*d4^5-2*r2^2*d3*d4^3+14*r2^2*d3*d4+6*r2^2*d4^6+8*r2^2*d4^4+2*r2^2*d4^2)*t^3+(-2*r^2*r2*d3*d4^2+12*r^2*r2*d4+2*r*Z*r2*d3*d4^2+2*r*Z*r2*d3-14*r*Z*r2*d4+4*r*r2^3*d3*d4^4+2*r*r2^3*d3*d4^2-24*r*r2^3*d4^3-12*r*r2^3*d4-2*r*r2*d3^3*d4^4-2*r*r2*d3^3+12*r*r2*d3^2*d4^3+4*r*r2*d3*d4^4+12*r*r2*d3*d4^2-14*r*r2*d3-30*r*r2*d4^3-2*r*r2*d4-2*Z^2*r2*d3+2*Z^2*r2*d4-4*Z*r2^3*d3*d4^2-2*Z*r2^3*d3+4*Z*r2^3*d4^3+2*Z*r2^3*d4+2*Z*r2*d3^3*d4^2+2*Z*r2*d3^3-2*Z*r2*d3^2*d4^3-16*Z*r2*d3*d4^2+14*Z*r2*d3+10*Z*r2*d4^3+2*Z*r2*d4+4*r2^3*d3^3*d4^2+2*r2^3*d3^3-24*r2^3*d3*d4^4+16*r2^3*d3*d4^2+14*r2^3*d3+12*r2^3*d4^5+10*r2^3*d4^3+2*r2^3*d4-2*r2*d3^5*d4^2+12*r2*d3^3*d4^4-10*r2*d3^3*d4^2-6*r2*d3^2*d4^5-2*r2*d3^2*d4^3-24*r2*d3*d4^4+28*r2*d3*d4^2+12*r2*d4^5+4*r2*d4^3)*t^2+(-2*r^2*r2^2*d3*d4^3+12*r^2*r2^2*d4^2-8*r^2*d4^2+2*r*Z*r2^2*d3*d4-2*r*Z*r2^2*d4^2+8*r*Z*d4^2+2*r*r2^4*d3*d4^3-12*r*r2^4*d4^2+2*r*r2^2*d3^3*d4^3-2*r*r2^2*d3^3*d4+4*r*r2^2*d3^2*d4^4-12*r*r2^2*d3^2*d4^2+2*r*r2^2*d3*d4^5-10*r*r2^2*d3*d4^3-14*r*r2^2*d3*d4-18*r*r2^2*d4^4-14*r*r2^2*d4^2+8*r*d3*d4-2*Z*r2^4*d3*d4+2*Z*r2^4*d4^2-2*Z*r2^2*d3^3*d4-2*Z*r2^2*d3^2*d4^2+2*Z*r2^2*d3*d4^3-2*Z*r2^2*d3*d4+2*Z*r2^2*d4^4+2*Z*r2^2*d4^2-8*Z*d4^2+2*r2^4*d3^3*d4-12*r2^4*d3*d4^3+14*r2^4*d3*d4+6*r2^4*d4^4+2*r2^4*d4^2+2*r2^2*d3^5*d4+4*r2^2*d3^4*d4^2-10*r2^2*d3^3*d4^3+16*r2^2*d3^3*d4-18*r2^2*d3^2*d4^4+30*r2^2*d3^2*d4^2+6*r2^2*d3*d4^3+14*r2^2*d3*d4+6*r2^2*d4^6+8*r2^2*d4^4+2*r2^2*d4^2-8*d3*d4+8*d4^2)*t+(-r^2*r2*d3^2*d4^3+9*r^2*r2*d3*d4^2+6*r^2*r2*d4+r*Z*r2*d3^2*d4-4*r*Z*r2*d3*d4^2-3*r*Z*r2*d3-3*r*Z*r2*d4+r*r2^3*d3^2*d4^3-5*r*r2^3*d3*d4^2-6*r*r2^3*d4+r*r2*d3^4*d4^3-r*r2*d3^4*d4+r*r2*d3^3*d4^4-6*r*r2*d3^3*d4^2+3*r*r2*d3^3+r*r2*d3^2*d4^5-r*r2*d3^2*d4^3-31*r*r2*d3^2*d4-9*r*r2*d3*d4^4+35*r*r2*d3*d4^2-3*r*r2*d3-11*r*r2*d4^3-5*r*r2*d4+3*Z^2*r2*d3-3*Z^2*r2*d4-Z*r2^3*d3^2*d4+Z*r2^3*d3*d4^2-Z*r2^3*d3+Z*r2^3*d4-Z*r2*d3^4*d4-3*Z*r2*d3^3+25*Z*r2*d3^2*d4+Z*r2*d3*d4^4-27*Z*r2*d3*d4^2+3*Z*r2*d3+11*Z*r2*d4^3+Z*r2*d4+r2^3*d3^4*d4+r2^3*d3^3-6*r2^3*d3^2*d4^3+7*r2^3*d3^2*d4+3*r2^3*d3*d4^4-5*r2^3*d3*d4^2+7*r2^3*d3+3*r2^3*d4^3+r2^3*d4+r2*d3^6*d4+r2*d3^5*d4^2-5*r2*d3^4*d4^3+6*r2*d3^4*d4-3*r2*d3^3*d4^4+8*r2*d3^3*d4^2-3*r2*d3^2*d4^5+14*r2*d3^2*d4^3-7*r2*d3^2*d4+3*r2*d3*d4^6-2*r2*d3*d4^4-5*r2*d3*d4^2+4*r2*d4)]
[(16*r*Z*r2*d4-16*r*r2*d4-16*Z^2*r2*d4+32*Z*r2*d4-16*r2*d4)*t+(-8*r^2*d3*d4-4*r^2*d4^2+16*r*Z*d3*d4+4*r*Z*d4^2-20*r*Z+8*r*d3^3*d4+20*r*d3^2-60*r*d3*d4+4*r*d4^4+8*r*d4^2+20*r-8*Z^2*d3*d4+20*Z^2-8*Z*d3^3*d4-20*Z*d3^2+60*Z*d3*d4-4*Z*d4^4-12*Z*d4^2-40*Z+8*d3^3*d4+20*d3^2-52*d3*d4+4*d4^4+12*d4^2+20)  ,  (2*r^3*d3*d4-2*r^3-2*r^2*Z*d3*d4+4*r^2*Z-2*r^2*r2^2*d3*d4+2*r^2*r2^2-4*r^2*d3^3*d4+8*r^2*d3^2*d4^2+2*r^2*d3^2-3*r^2*d3*d4^3-10*r^2*d3*d4+r^2*d4^2+6*r^2-2*r*Z^2+2*r*Z*r2^2*d3*d4-2*r*Z*r2^2+4*r*Z*d3^3*d4-8*r*Z*d3^2*d4^2-4*r*Z*d3^2+4*r*Z*d3*d4^3+17*r*Z*d3*d4-3*r*Z*d4^2-13*r*Z+2*r*r2^2*d3^3*d4-6*r*r2^2*d3^2*d4^2-2*r*r2^2*d3^2+r*r2^2*d3*d4^3+12*r*r2^2*d3*d4-r*r2^2*d4^2-6*r*r2^2+2*r*d3^5*d4-8*r*d3^4*d4^2+9*r*d3^3*d4^3+3*r*d3^3*d4-7*r*d3^2*d4^4+r*d3^2*d4^2+r*d3^2+8*r*d3*d4^3-12*r*d3*d4+r*d4^4-3*r*d4^2+5*r+2*Z^2*d3^2-6*Z^2*d3*d4+2*Z^2*d4^2+7*Z^2-2*Z*r2^2*d3^3*d4+6*Z*r2^2*d3^2*d4^2+2*Z*r2^2*d3^2-2*Z*r2^2*d3*d4^3-13*Z*r2^2*d3*d4+2*Z*r2^2*d4^2+7*Z*r2^2-2*Z*d3^5*d4+8*Z*d3^4*d4^2-10*Z*d3^3*d4^3-5*Z*d3^3*d4+8*Z*d3^2*d4^4+Z*d3^2*d4^2-Z*d3^2-2*Z*d3*d4^5-5*Z*d3*d4^3+8*Z*d3*d4-Z*d4^4+3*Z*d4^2-5*Z+r2^2*d3^3*d4-r2^2*d3^2*d4^2-r2^2*d3^2+r2^2*d3*d4^5-3*r2^2*d3*d4^3+6*r2^2*d3*d4-r2^2*d4^4+3*r2^2*d4^2-5*r2^2+d3^5*d4-2*d3^4*d4^2+d3^3*d4^5-d3^3*d4^3+4*d3^3*d4-d3^2*d4^6+2*d3^2*d4^4-4*d3^2*d4^2+d3*d4^7-4*d3*d4^5+8*d3*d4^3-5*d3*d4)*t^4+(-4*r^3*r2*d4+4*r^2*Z*r2*d4+4*r^2*r2^3*d4+8*r^2*r2*d3^2*d4-20*r^2*r2*d3*d4^2+6*r^2*r2*d4^3+16*r^2*r2*d4-4*r*Z*r2^3*d4-8*r*Z*r2*d3^2*d4+20*r*Z*r2*d3*d4^2-8*r*Z*r2*d4^3-18*r*Z*r2*d4-4*r*r2^3*d3^2*d4+12*r*r2^3*d3*d4^2-2*r*r2^3*d4^3-12*r*r2^3*d4-4*r*r2*d3^4*d4+20*r*r2*d3^3*d4^2-30*r*r2*d3^2*d4^3-14*r*r2*d3^2*d4+16*r*r2*d3*d4^4+34*r*r2*d3*d4^2-20*r*r2*d4^3-2*r*r2*d4+4*Z*r2^3*d3^2*d4-12*Z*r2^3*d3*d4^2+4*Z*r2^3*d4^3+14*Z*r2^3*d4+4*Z*r2*d3^4*d4-20*Z*r2*d3^3*d4^2+32*Z*r2*d3^2*d4^3+18*Z*r2*d3^2*d4-20*Z*r2*d3*d4^4-40*Z*r2*d3*d4^2+4*Z*r2*d4^5+18*Z*r2*d4^3+14*Z*r2*d4-2*r2^3*d3^2*d4+2*r2^3*d3*d4^2-2*r2^3*d4^5+6*r2^3*d4^3-10*r2^3*d4-2*r2*d3^4*d4+6*r2*d3^3*d4^2-2*r2*d3^2*d4^5-12*r2*d3^2*d4+4*r2*d3*d4^6-10*r2*d3*d4^4+22*r2*d3*d4^2-2*r2*d4^7+4*r2*d4^5-4*r2*d4^3-10*r2*d4)*t^3+(-4*r^3+8*r^2*Z+8*r^2*r2^2*d4^2+4*r^2*r2^2-4*r^2*d3^2*d4^2+4*r^2*d3^2-12*r^2*d3*d4+10*r^2*d4^2+12*r^2-4*r*Z^2-8*r*Z*r2^2*d4^2-4*r*Z*r2^2+4*r*Z*d3^2*d4^2-8*r*Z*d3^2+24*r*Z*d3*d4-14*r*Z*d4^2-26*r*Z-8*r*r2^2*d3^2*d4^2-4*r*r2^2*d3^2+24*r*r2^2*d3*d4^3+12*r*r2^2*d3*d4-4*r*r2^2*d4^4-26*r*r2^2*d4^2-12*r*r2^2+4*r*d3^4*d4^2-12*r*d3^3*d4^3+2*r*d3^2*d4^4+4*r*d3^2*d4^2+2*r*d3^2+24*r*d3*d4^3-2*r*d3*d4-2*r*d4^4-30*r*d4^2+10*r+4*Z^2*d3^2-12*Z^2*d3*d4+4*Z^2*d4^2+14*Z^2+8*Z*r2^2*d3^2*d4^2+4*Z*r2^2*d3^2-24*Z*r2^2*d3*d4^3-12*Z*r2^2*d3*d4+8*Z*r2^2*d4^4+32*Z*r2^2*d4^2+14*Z*r2^2-4*Z*d3^4*d4^2+12*Z*d3^3*d4^3-4*Z*d3^2*d4^4-6*Z*d3^2*d4^2-2*Z*d3^2-24*Z*d3*d4^3+2*Z*d3*d4+6*Z*d4^4+34*Z*d4^2-10*Z-4*r2^2*d3^2*d4^2-2*r2^2*d3^2+4*r2^2*d3*d4^3+2*r2^2*d3*d4-4*r2^2*d4^6+10*r2^2*d4^4-14*r2^2*d4^2-10*r2^2+2*d3^4*d4^2-2*d3^3*d4^3+2*d3^2*d4^6-6*d3^2*d4^4+6*d3^2*d4^2+4*d3*d4^3-4*d4^6+12*d4^4-20*d4^2)*t^2+(-4*r^3*r2*d4+4*r^2*Z*r2*d4+4*r^2*r2^3*d4+8*r^2*r2*d3^2*d4-4*r^2*r2*d3*d4^2+6*r^2*r2*d4^3+16*r^2*r2*d4-4*r*Z*r2^3*d4-8*r*Z*r2*d3^2*d4+4*r*Z*r2*d3*d4^2-8*r*Z*r2*d4^3-34*r*Z*r2*d4-4*r*r2^3*d3^2*d4+12*r*r2^3*d3*d4^2-2*r*r2^3*d4^3-12*r*r2^3*d4-4*r*r2*d3^4*d4+4*r*r2*d3^3*d4^2+18*r*r2*d3^2*d4^3-14*r*r2*d3^2*d4+8*r*r2*d3*d4^4-14*r*r2*d3*d4^2-20*r*r2*d4^3+14*r*r2*d4+16*Z^2*r2*d4+4*Z*r2^3*d3^2*d4-12*Z*r2^3*d3*d4^2+4*Z*r2^3*d4^3+14*Z*r2^3*d4+4*Z*r2*d3^4*d4-4*Z*r2*d3^3*d4^2-16*Z*r2*d3^2*d4^3+18*Z*r2*d3^2*d4-4*Z*r2*d3*d4^4+16*Z*r2*d3*d4^2+4*Z*r2*d4^5+18*Z*r2*d4^3-18*Z*r2*d4-2*r2^3*d3^2*d4+2*r2^3*d3*d4^2-2*r2^3*d4^5+6*r2^3*d4^3-10*r2^3*d4-2*r2*d3^4*d4-2*r2*d3^3*d4^2-2*r2*d3^2*d4^5+8*r2*d3^2*d4^3-12*r2*d3^2*d4-4*r2*d3*d4^6+14*r2*d3*d4^4-18*r2*d3*d4^2-2*r2*d4^7+4*r2*d4^5-4*r2*d4^3+6*r2*d4)*t+(-2*r^3*d3*d4-2*r^3+2*r^2*Z*d3*d4+4*r^2*Z+2*r^2*r2^2*d3*d4+2*r^2*r2^2+4*r^2*d3^3*d4-4*r^2*d3^2*d4^2+2*r^2*d3^2+3*r^2*d3*d4^3+6*r^2*d3*d4+5*r^2*d4^2+6*r^2-2*r*Z^2-2*r*Z*r2^2*d3*d4-2*r*Z*r2^2-4*r*Z*d3^3*d4+4*r*Z*d3^2*d4^2-4*r*Z*d3^2-4*r*Z*d3*d4^3-9*r*Z*d3*d4-7*r*Z*d4^2+7*r*Z-2*r*r2^2*d3^3*d4+6*r*r2^2*d3^2*d4^2-2*r*r2^2*d3^2-r*r2^2*d3*d4^3-r*r2^2*d4^2-6*r*r2^2-2*r*d3^5*d4+4*r*d3^4*d4^2+3*r*d3^3*d4^3-11*r*d3^3*d4+5*r*d3^2*d4^4-13*r*d3^2*d4^2-19*r*d3^2-8*r*d3*d4^3+70*r*d3*d4-3*r*d4^4-11*r*d4^2-15*r+2*Z^2*d3^2+2*Z^2*d3*d4+2*Z^2*d4^2-13*Z^2+2*Z*r2^2*d3^3*d4-6*Z*r2^2*d3^2*d4^2+2*Z*r2^2*d3^2+2*Z*r2^2*d3*d4^3+Z*r2^2*d3*d4+2*Z*r2^2*d4^2+7*Z*r2^2+2*Z*d3^5*d4-4*Z*d3^4*d4^2-2*Z*d3^3*d4^3+13*Z*d3^3*d4-4*Z*d3^2*d4^4+13*Z*d3^2*d4^2+19*Z*d3^2+2*Z*d3*d4^5+5*Z*d3*d4^3-66*Z*d3*d4+3*Z*d4^4+15*Z*d4^2+35*Z-r2^2*d3^3*d4+r2^2*d3^2*d4^2-r2^2*d3^2-r2^2*d3*d4^5+3*r2^2*d3*d4^3-4*r2^2*d3*d4-r2^2*d4^4+3*r2^2*d4^2-5*r2^2-d3^5*d4-d3^3*d4^5+3*d3^3*d4^3-12*d3^3*d4-d3^2*d4^6+4*d3^2*d4^4-6*d3^2*d4^2-20*d3^2-d3*d4^7+4*d3*d4^5-8*d3*d4^3+57*d3*d4-4*d4^4-12*d4^2-20)]
[(16*r^2*Z*d4-16*r^2*d4-16*r*Z^2*d4+16*r*Z*d4+16*Z^2*d4-32*Z*d4+16*d4)*t+(4*r^2*Z*r2*d4^2-8*r^2*r2*d3*d4-8*r^2*r2*d4^2-4*r*Z^2*r2*d4^2+4*r*Z^2*r2-4*r*Z*r2*d3^2+20*r*Z*r2*d3*d4-4*r*Z*r2*d4^4+16*r*Z*r2*d4^2-28*r*Z*r2+8*r*r2*d3^3*d4+24*r*r2*d3^2-64*r*r2*d3*d4+8*r*r2*d4^4+24*r*r2-4*Z^3*r2+4*Z^2*r2*d3^2-12*Z^2*r2*d3*d4+4*Z^2*r2*d4^4-4*Z^2*r2*d4^2+32*Z^2*r2-8*Z*r2*d3^3*d4-28*Z*r2*d3^2+68*Z*r2*d3*d4-12*Z*r2*d4^4-4*Z*r2*d4^2-52*Z*r2+8*r2*d3^3*d4+24*r2*d3^2-56*r2*d3*d4+8*r2*d4^4+8*r2*d4^2+24*r2)  ,  (2*r^3*r2*d3*d4-2*r^3*r2-r^2*Z*r2*d3*d4^3+r^2*Z*r2*d4^2+2*r^2*Z*r2-2*r^2*r2^3*d3*d4+2*r^2*r2^3-4*r^2*r2*d3^3*d4+8*r^2*r2*d3^2*d4^2+2*r^2*r2*d3^2-2*r^2*r2*d3*d4^3-12*r^2*r2*d3*d4+8*r^2*r2-r*Z^2*r2*d3*d4-r*Z^2*r2*d4^2+r*Z^2*r2+r*Z*r2^3*d3*d4^3-r*Z*r2^3*d4^2+r*Z*r2*d3^3*d4^3+r*Z*r2*d3^3*d4-r*Z*r2*d3^2*d4^4-r*Z*r2*d3^2*d4^2-3*r*Z*r2*d3^2+2*r*Z*r2*d3*d4^5-4*r*Z*r2*d3*d4^3+14*r*Z*r2*d3*d4-r*Z*r2*d4^4+3*r*Z*r2*d4^2-15*r*Z*r2+2*r*r2^3*d3^3*d4-6*r*r2^3*d3^2*d4^2-2*r*r2^3*d3^2+14*r*r2^3*d3*d4-8*r*r2^3+2*r*r2*d3^5*d4-8*r*r2*d3^4*d4^2+8*r*r2*d3^3*d4^3+6*r*r2*d3^3*d4-6*r*r2*d3^2*d4^4-6*r*r2*d3^2*d4^2-2*r*r2*d3*d4^5+16*r*r2*d3*d4^3-8*r*r2*d3*d4+2*r*r2*d4^4-8*r*r2*d4^2+4*r*r2-Z^3*r2+Z^2*r2^3*d3*d4-Z^2*r2^3+Z^2*r2*d3^3*d4-Z^2*r2*d3^2*d4^2+Z^2*r2*d3^2+Z^2*r2*d3*d4^3-2*Z^2*r2*d3*d4+Z^2*r2*d4^4-3*Z^2*r2*d4^2+7*Z^2*r2-Z*r2^3*d3^3*d4+Z*r2^3*d3^2*d4^2+Z*r2^3*d3^2-Z*r2^3*d3*d4^5+3*Z*r2^3*d3*d4^3-8*Z*r2^3*d3*d4+Z*r2^3*d4^4-3*Z*r2^3*d4^2+7*Z*r2^3-Z*r2*d3^5*d4+2*Z*r2*d3^4*d4^2-Z*r2*d3^3*d4^5+Z*r2*d3^3*d4^3-6*Z*r2*d3^3*d4+Z*r2*d3^2*d4^6-2*Z*r2*d3^2*d4^4+6*Z*r2*d3^2*d4^2-Z*r2*d3*d4^7+4*Z*r2*d3*d4^5-10*Z*r2*d3*d4^3+3*Z*r2*d3*d4-2*Z*r2*d4^4+8*Z*r2*d4^2-4*Z*r2+4*r2^3*d3^2*d4^2+2*r2^3*d3*d4^5-8*r2^3*d3*d4^3-2*r2^3*d4^4+8*r2^3*d4^2-4*r2^3+4*r2*d3^4*d4^2+2*r2*d3^3*d4^5-12*r2*d3^3*d4^3+4*r2*d3^3*d4-2*r2*d3^2*d4^6+12*r2*d3^2*d4^4-8*r2*d3^2*d4^2+2*r2*d3*d4^7-10*r2*d3*d4^5+12*r2*d3*d4^3-4*r2*d3*d4)*t^4+(-4*r^3*r2^2*d4+2*r^2*Z*r2^2*d4^3+4*r^2*r2^4*d4+8*r^2*r2^2*d3^2*d4-20*r^2*r2^2*d3*d4^2+4*r^2*r2^2*d4^3+20*r^2*r2^2*d4+2*r*Z^2*r2^2*d4-2*r*Z*r2^4*d4^3-2*r*Z*r2^2*d3^2*d4^3-2*r*Z*r2^2*d3^2*d4+4*r*Z*r2^2*d3*d4^4+2*r*Z*r2^2*d3*d4^2-4*r*Z*r2^2*d4^5+4*r*Z*r2^2*d4^3-14*r*Z*r2^2*d4-4*r*r2^4*d3^2*d4+12*r*r2^4*d3*d4^2-16*r*r2^4*d4-4*r*r2^2*d3^4*d4+20*r*r2^2*d3^3*d4^2-28*r*r2^2*d3^2*d4^3-20*r*r2^2*d3^2*d4+12*r*r2^2*d3*d4^4+52*r*r2^2*d3*d4^2+4*r*r2^2*d4^5-32*r*r2^2*d4^3-8*r*r2^2*d4-2*Z^2*r2^4*d4-2*Z^2*r2^2*d3^2*d4+4*Z^2*r2^2*d3*d4^2-2*Z^2*r2^2*d4^3-2*Z^2*r2^2*d4+2*Z*r2^4*d3^2*d4-2*Z*r2^4*d3*d4^2+2*Z*r2^4*d4^5-6*Z*r2^4*d4^3+14*Z*r2^4*d4+2*Z*r2^2*d3^4*d4-6*Z*r2^2*d3^3*d4^2+2*Z*r2^2*d3^2*d4^5+16*Z*r2^2*d3^2*d4-4*Z*r2^2*d3*d4^6+10*Z*r2^2*d3*d4^4-30*Z*r2^2*d3*d4^2+2*Z*r2^2*d4^7-4*Z*r2^2*d4^5+8*Z*r2^2*d4^3+14*Z*r2^2*d4-8*r2^4*d3*d4^2-4*r2^4*d4^5+16*r2^4*d4^3-8*r2^4*d4-8*r2^2*d3^3*d4^2-4*r2^2*d3^2*d4^5+32*r2^2*d3^2*d4^3-8*r2^2*d3^2*d4+8*r2^2*d3*d4^6-40*r2^2*d3*d4^4+8*r2^2*d3*d4^2-4*r2^2*d4^7+12*r2^2*d4^5+8*r2^2*d4^3-8*r2^2*d4)*t^3+(-4*r^3*r2+2*r^2*Z*r2*d4^2+4*r^2*Z*r2+8*r^2*r2^3*d4^2+4*r^2*r2^3-4*r^2*r2*d3^2*d4^2+4*r^2*r2*d3^2-12*r^2*r2*d3*d4+8*r^2*r2*d4^2+16*r^2*r2-2*r*Z^2*r2*d4^2+2*r*Z^2*r2-4*r*Z*r2^3*d4^4-2*r*Z*r2^3*d4^2+2*r*Z*r2*d3^2*d4^4-6*r*Z*r2*d3^2+14*r*Z*r2*d3*d4-6*r*Z*r2*d4^4+6*r*Z*r2*d4^2-30*r*Z*r2-8*r*r2^3*d3^2*d4^2-4*r*r2^3*d3^2+24*r*r2^3*d3*d4^3+12*r*r2^3*d3*d4-32*r*r2^3*d4^2-16*r*r2^3+4*r*r2*d3^4*d4^2-12*r*r2*d3^3*d4^3+8*r*r2*d3^2*d4^2+24*r*r2*d3*d4^3+8*r*r2*d3*d4+4*r*r2*d4^4-48*r*r2*d4^2+8*r*r2-2*Z^3*r2-4*Z^2*r2^3*d4^2-2*Z^2*r2^3+2*Z^2*r2*d3^2*d4^2+2*Z^2*r2*d3^2-2*Z^2*r2*d3*d4+2*Z^2*r2*d4^4-10*Z^2*r2*d4^2+14*Z^2*r2+4*Z*r2^3*d3^2*d4^2+2*Z*r2^3*d3^2-4*Z*r2^3*d3*d4^3-2*Z*r2^3*d3*d4+4*Z*r2^3*d4^6-10*Z*r2^3*d4^4+22*Z*r2^3*d4^2+14*Z*r2^3-2*Z*r2*d3^4*d4^2+2*Z*r2*d3^3*d4^3-2*Z*r2*d3^2*d4^6+6*Z*r2*d3^2*d4^4-10*Z*r2*d3^2*d4^2-4*Z*r2*d3*d4^3-8*Z*r2*d3*d4+4*Z*r2*d4^6-16*Z*r2*d4^4+44*Z*r2*d4^2-8*Z*r2-16*r2^3*d3*d4^3-8*r2^3*d3*d4-8*r2^3*d4^6+28*r2^3*d4^4-8*r2^3+8*r2*d3^3*d4^3+4*r2*d3^2*d4^6-16*r2*d3^2*d4^4+8*r2*d3^2*d4^2-16*r2*d3*d4^3-8*r2*d4^6+32*r2*d4^4-16*r2*d4^2)*t^2+(-4*r^3*r2^2*d4+2*r^2*Z*r2^2*d4^3-16*r^2*Z*d4+4*r^2*r2^4*d4+8*r^2*r2^2*d3^2*d4-4*r^2*r2^2*d3*d4^2+4*r^2*r2^2*d4^3+20*r^2*r2^2*d4+16*r^2*d4+2*r*Z^2*r2^2*d4+16*r*Z^2*d4-2*r*Z*r2^4*d4^3-2*r*Z*r2^2*d3^2*d4^3-2*r*Z*r2^2*d3^2*d4-4*r*Z*r2^2*d3*d4^4+2*r*Z*r2^2*d3*d4^2-4*r*Z*r2^2*d4^5+4*r*Z*r2^2*d4^3-14*r*Z*r2^2*d4-16*r*Z*d4-4*r*r2^4*d3^2*d4+12*r*r2^4*d3*d4^2-16*r*r2^4*d4-4*r*r2^2*d3^4*d4+4*r*r2^2*d3^3*d4^2+20*r*r2^2*d3^2*d4^3-20*r*r2^2*d3^2*d4+12*r*r2^2*d3*d4^4-12*r*r2^2*d3*d4^2+4*r*r2^2*d4^5-32*r*r2^2*d4^3-8*r*r2^2*d4-2*Z^2*r2^4*d4-2*Z^2*r2^2*d3^2*d4-4*Z^2*r2^2*d3*d4^2-2*Z^2*r2^2*d4^3-2*Z^2*r2^2*d4-16*Z^2*d4+2*Z*r2^4*d3^2*d4-2*Z*r2^4*d3*d4^2+2*Z*r2^4*d4^5-6*Z*r2^4*d4^3+14*Z*r2^4*d4+2*Z*r2^2*d3^4*d4+2*Z*r2^2*d3^3*d4^2+2*Z*r2^2*d3^2*d4^5-8*Z*r2^2*d3^2*d4^3+16*Z*r2^2*d3^2*d4+4*Z*r2^2*d3*d4^6-14*Z*r2^2*d3*d4^4+26*Z*r2^2*d3*d4^2+2*Z*r2^2*d4^7-4*Z*r2^2*d4^5+8*Z*r2^2*d4^3+14*Z*r2^2*d4+32*Z*d4-8*r2^4*d3*d4^2-4*r2^4*d4^5+16*r2^4*d4^3-8*r2^4*d4-8*r2^2*d3^3*d4^2-4*r2^2*d3^2*d4^5-8*r2^2*d3^2*d4-8*r2^2*d3*d4^6+24*r2^2*d3*d4^4-24*r2^2*d3*d4^2-4*r2^2*d4^7+12*r2^2*d4^5+8*r2^2*d4^3-8*r2^2*d4-16*d4)*t+(-2*r^3*r2*d3*d4-2*r^3*r2+r^2*Z*r2*d3*d4^3-3*r^2*Z*r2*d4^2+2*r^2*Z*r2+2*r^2*r2^3*d3*d4+2*r^2*r2^3+4*r^2*r2*d3^3*d4-4*r^2*r2*d3^2*d4^2+2*r^2*r2*d3^2+2*r^2*r2*d3*d4^3+8*r^2*r2*d3*d4+8*r^2*r2*d4^2+8*r^2*r2+r*Z^2*r2*d3*d4+3*r*Z^2*r2*d4^2-3*r*Z^2*r2-r*Z*r2^3*d3*d4^3-r*Z*r2^3*d4^2-r*Z*r2*d3^3*d4^3-r*Z*r2*d3^3*d4-r*Z*r2*d3^2*d4^4+r*Z*r2*d3^2*d4^2+r*Z*r2*d3^2-2*r*Z*r2*d3*d4^5+4*r*Z*r2*d3*d4^3-20*r*Z*r2*d3*d4+3*r*Z*r2*d4^4-13*r*Z*r2*d4^2+13*r*Z*r2-2*r*r2^3*d3^3*d4+6*r*r2^3*d3^2*d4^2-2*r*r2^3*d3^2-2*r*r2^3*d3*d4-8*r*r2^3-2*r*r2*d3^5*d4+4*r*r2*d3^4*d4^2+4*r*r2*d3^3*d4^3-14*r*r2*d3^3*d4+6*r*r2*d3^2*d4^4-10*r*r2*d3^2*d4^2-24*r*r2*d3^2+2*r*r2*d3*d4^5-16*r*r2*d3*d4^3+80*r*r2*d3*d4-6*r*r2*d4^4-8*r*r2*d4^2-20*r*r2+3*Z^3*r2-Z^2*r2^3*d3*d4-Z^2*r2^3-Z^2*r2*d3^3*d4-Z^2*r2*d3^2*d4^2-3*Z^2*r2*d3^2-Z^2*r2*d3*d4^3+12*Z^2*r2*d3*d4-3*Z^2*r2*d4^4+Z^2*r2*d4^2-25*Z^2*r2+Z*r2^3*d3^3*d4-Z*r2^3*d3^2*d4^2+Z*r2^3*d3^2+Z*r2^3*d3*d4^5-3*Z*r2^3*d3*d4^3+6*Z*r2^3*d3*d4+Z*r2^3*d4^4-3*Z*r2^3*d4^2+7*Z*r2^3+Z*r2*d3^5*d4+Z*r2*d3^3*d4^5-3*Z*r2*d3^3*d4^3+14*Z*r2*d3^3*d4+Z*r2*d3^2*d4^6-4*Z*r2*d3^2*d4^4+8*Z*r2*d3^2*d4^2+28*Z*r2*d3^2+Z*r2*d3*d4^7-4*Z*r2*d3*d4^5+10*Z*r2*d3*d4^3-79*Z*r2*d3*d4+10*Z*r2*d4^4+12*Z*r2*d4^2+48*Z*r2-4*r2^3*d3^2*d4^2-2*r2^3*d3*d4^5+8*r2^3*d3*d4^3-8*r2^3*d3*d4-2*r2^3*d4^4+8*r2^3*d4^2-4*r2^3-4*r2*d3^4*d4^2-2*r2*d3^3*d4^5+4*r2*d3^3*d4^3-12*r2*d3^3*d4-2*r2*d3^2*d4^6+4*r2*d3^2*d4^4-24*r2*d3^2-2*r2*d3*d4^7+10*r2*d3*d4^5-12*r2*d3*d4^3+60*r2*d3*d4-8*r2*d4^4-8*r2*d4^2-24*r2)]

Module Groebner basis: 
[(8*d3^2*d4-8*d3*d4^2)*t+(4*Z*r2-4*r2*d3^2+12*r2*d3*d4-4*r2*d4^2-4*r2) , (r*r2*d3*d4-r*r2+Z*r2-r2^3*d3*d4+r2^3-r2*d3^3*d4+r2*d3^2*d4^2-r2*d3*d4^3+r2*d3*d4)*t^4+(-2*r*r2^2*d4+2*r2^4*d4+2*r2^2*d3^2*d4-4*r2^2*d3*d4^2+2*r2^2*d4^3+2*r2^2*d4)*t^3+(-2*r*r2+2*Z*r2+4*r2^3*d4^2+2*r2^3-2*r2*d3^2*d4^2+4*r2*d4^2)*t^2+(-2*r*r2^2*d4+2*r2^4*d4+2*r2^2*d3^2*d4+4*r2^2*d3*d4^2+2*r2^2*d4^3+2*r2^2*d4-8*d3^2*d4+8*d3*d4^2)*t+(-r*r2*d3*d4-r*r2-3*Z*r2+r2^3*d3*d4+r2^3+r2*d3^3*d4+r2*d3^2*d4^2+4*r2*d3^2+r2*d3*d4^3-13*r2*d3*d4+4*r2*d4^2+4*r2)].

LPP Set of Module Groebner Basis under specialization:
[ t ]

Branch 5:
constraints: d3=0,d4^2-Z+1=0,r2^2-r+Z=0,r*Z-Z^2-r+2*Z-1=0,
RGB from KSW:
[   ].

Module Groebner basis: 
[  ].


LPP Set of Module Groebner Basis under specialization:
[  ].

Branch 6:
constraints: d4=0,d3^2-Z+1=0,r2^2-r+Z=0,d3!=0,
RGB from KSW:
[   ].

Module Groebner basis: 
[  ].


LPP Set of Module Groebner Basis under specialization:
[  ].

Branch 7:
constraints: d3-d4=0,r-1=0,r2^2=0,d4^4-2*d4^2-Z+1=0,d4!=0,4*Z^2-4*Z!=0,
RGB from KSW:
[(4*Z^2-4*Z)  ,  (-2*r*r2*d3*d4^4+4*r*r2*d3*d4^2+2*r*r2*d4^3-4*r*r2*d4-2*Z*r2*d4^3+4*Z*r2*d4+2*r2^3*d3*d4^4-4*r2^3*d3*d4^2-2*r2^3*d4^3+4*r2^3*d4+2*r2*d3^3*d4^4-4*r2*d3^3*d4^2-2*r2*d3^2*d4^5+4*r2*d3^2*d4^3+2*r2*d3*d4^6-6*r2*d3*d4^4+4*r2*d3*d4^2)*t^5+(-3*r*Z*d3*d4+3*r*Z+4*r*r2^2*d4^4-8*r*r2^2*d4^2-4*r*d3^2*d4^4+8*r*d3^2*d4^2+8*r*d3*d4^5-13*r*d3*d4^3-3*r*d3*d4-8*r*d4^4+17*r*d4^2-5*r-3*Z^2+3*Z*r2^2*d3*d4-3*Z*r2^2+3*Z*d3^3*d4-3*Z*d3^2*d4^2-Z*d3*d4^3+5*Z*d3*d4+8*Z*d4^4-17*Z*d4^2+5*Z-4*r2^4*d4^4+8*r2^4*d4^2-3*r2^2*d3*d4^3+3*r2^2*d3*d4-4*r2^2*d4^6+12*r2^2*d4^4-9*r2^2*d4^2+5*r2^2+4*d3^4*d4^4-8*d3^4*d4^2-12*d3^3*d4^5+25*d3^3*d4^3-5*d3^3*d4+12*d3^2*d4^6-29*d3^2*d4^4+13*d3^2*d4^2-8*d3*d4^7+25*d3*d4^5-22*d3*d4^3+5*d3*d4)*t^4+(6*r*Z*r2*d4+8*r*r2*d3*d4^4-16*r*r2*d3*d4^2-16*r*r2*d4^5+38*r*r2*d4^3-18*r*r2*d4-6*Z*r2^3*d4-6*Z*r2*d3^2*d4+12*Z*r2*d3*d4^2-10*Z*r2*d4^3+2*Z*r2*d4-8*r2^3*d3*d4^4+16*r2^3*d3*d4^2+8*r2^3*d4^5-22*r2^3*d4^3+18*r2^3*d4-8*r2*d3^3*d4^4+16*r2*d3^3*d4^2+36*r2*d3^2*d4^5-74*r2*d3^2*d4^3+10*r2*d3^2*d4-40*r2*d3*d4^6+76*r2*d3*d4^4-4*r2*d3*d4^2+16*r2*d4^7-26*r2*d4^5-8*r2*d4^3+10*r2*d4)*t^3+(6*r*Z+4*r*r2^2*d4^4-8*r*r2^2*d4^2+8*r*d3*d4^3-16*r*d3*d4-16*r*d4^4+34*r*d4^2-10*r-6*Z^2-12*Z*r2^2*d4^2-6*Z*r2^2+6*Z*d3^2*d4^2-8*Z*d3*d4^3+16*Z*d3*d4+16*Z*d4^4-46*Z*d4^2+10*Z-4*r2^4*d4^4+8*r2^4*d4^2-4*r2^2*d3^2*d4^4+8*r2^2*d3^2*d4^2-24*r2^2*d3*d4^5+40*r2^2*d3*d4^3+16*r2^2*d3*d4+28*r2^2*d4^6-48*r2^2*d4^4-6*r2^2*d4^2+10*r2^2+8*d3^3*d4^5-16*d3^3*d4^3-16*d3^2*d4^6+34*d3^2*d4^4-10*d3^2*d4^2-16*d3*d4^5+32*d3*d4^3+32*d4^6-68*d4^4+20*d4^2)*t^2+(6*r*Z*r2*d4+10*r*r2*d3*d4^4-20*r*r2*d3*d4^2-16*r*r2*d4^5+36*r*r2*d4^3-14*r*r2*d4-6*Z*r2^3*d4-6*Z*r2*d3^2*d4-12*Z*r2*d3*d4^2-8*Z*r2*d4^3-2*Z*r2*d4-10*r2^3*d3*d4^4+20*r2^3*d3*d4^2+16*r2^3*d4^5-36*r2^3*d4^3+14*r2^3*d4-10*r2*d3^3*d4^4+20*r2*d3^3*d4^2-2*r2*d3^2*d4^5+2*r2*d3^2*d4^3+10*r2*d3^2*d4+22*r2*d3*d4^6-54*r2*d3*d4^4+32*r2*d3*d4^2+16*r2*d4^7-18*r2*d4^5-24*r2*d4^3+10*r2*d4)*t+(3*r*Z*d3*d4+3*r*Z+4*r*d3^2*d4^4-8*r*d3^2*d4^2-8*r*d3*d4^5+21*r*d3*d4^3-13*r*d3*d4-8*r*d4^4+17*r*d4^2-5*r-7*Z^2-3*Z*r2^2*d3*d4-3*Z*r2^2-3*Z*d3^3*d4-3*Z*d3^2*d4^2-7*Z*d3*d4^3+11*Z*d3*d4+8*Z*d4^4-17*Z*d4^2+9*Z-4*r2^2*d3^2*d4^4+8*r2^2*d3^2*d4^2+8*r2^2*d3*d4^5-21*r2^2*d3*d4^3+13*r2^2*d3*d4+8*r2^2*d4^4-17*r2^2*d4^2+5*r2^2-4*d3^4*d4^4+8*d3^4*d4^2+4*d3^3*d4^5-9*d3^3*d4^3+5*d3^3*d4+4*d3^2*d4^6-5*d3^2*d4^4-3*d3^2*d4^2+8*d3*d4^7-25*d3*d4^5+22*d3*d4^3-5*d3*d4)]
[(4*Z*d4^2)  ,  (-2*r*r2*d3*d4^2+2*r*r2*d4-2*Z*r2*d4+2*r2^3*d3*d4^2-2*r2^3*d4+2*r2*d3^3*d4^2-2*r2*d3^2*d4^3+2*r2*d3*d4^4-2*r2*d3*d4^2)*t^5+(4*r*r2^2*d4^2-4*r*d3^2*d4^2+5*r*d3*d4^3+3*r*d3*d4-5*r*d4^2+r-4*Z*d3*d4+5*Z*d4^2-Z-4*r2^4*d4^2+3*r2^2*d3*d4^3-3*r2^2*d3*d4-4*r2^2*d4^4+r2^2*d4^2-r2^2+4*d3^4*d4^2-9*d3^3*d4^3+d3^3*d4+9*d3^2*d4^4-5*d3^2*d4^2-5*d3*d4^5+6*d3*d4^3-d3*d4)*t^4+(8*r*r2*d3*d4^2-10*r*r2*d4^3+6*r*r2*d4-4*Z*r2*d4-8*r2^3*d3*d4^2+2*r2^3*d4^3-6*r2^3*d4-8*r2*d3^3*d4^2+30*r2*d3^2*d4^3-2*r2*d3^2*d4-28*r2*d3*d4^4-4*r2*d3*d4^2+10*r2*d4^5-2*r2*d4)*t^3+(4*r*r2^2*d4^2+8*r*d3*d4-10*r*d4^2+2*r-8*Z*d3*d4+10*Z*d4^2-2*Z-4*r2^4*d4^2-4*r2^2*d3^2*d4^2-24*r2^2*d3*d4^3-8*r2^2*d3*d4+16*r2^2*d4^4+2*r2^2*d4^2-2*r2^2+8*d3^3*d4^3-10*d3^2*d4^4+2*d3^2*d4^2-16*d3*d4^3+20*d4^4-4*d4^2)*t^2+(10*r*r2*d3*d4^2-10*r*r2*d4^3+4*r*r2*d4-2*Z*r2*d4-10*r2^3*d3*d4^2+10*r2^3*d4^3-4*r2^3*d4-10*r2*d3^3*d4^2-8*r2*d3^2*d4^3-2*r2*d3^2*d4+10*r2*d3*d4^4-10*r2*d3*d4^2+10*r2*d4^5+8*r2*d4^3-2*r2*d4)*t+(4*r*d3^2*d4^2-5*r*d3*d4^3+5*r*d3*d4-5*r*d4^2+r-4*Z*d3*d4+Z*d4^2-Z-4*r2^2*d3^2*d4^2+5*r2^2*d3*d4^3-5*r2^2*d3*d4+5*r2^2*d4^2-r2^2-4*d3^4*d4^2+d3^3*d4^3-d3^3*d4+d3^2*d4^4+3*d3^2*d4^2+5*d3*d4^5-6*d3*d4^3+d3*d4)]
[(8*Z*r2-8*r2)*t+(-4*Z*d4-4*d4^3+4*d4)  ,  (4*r*r2*d3*d4-4*r*r2+4*Z*r2-4*r2^3*d3*d4+4*r2^3-4*r2*d3^3*d4+4*r2*d3^2*d4^2-4*r2*d3*d4^3+4*r2*d3*d4)*t^5+(-8*r*r2^2*d4+8*r*d3^2*d4-9*r*d3*d4^2-8*r*d3+9*r*d4+8*Z*d3-9*Z*d4+8*r2^4*d4-7*r2^2*d3*d4^2+8*r2^2*d3+8*r2^2*d4^3-r2^2*d4-8*d3^4*d4+17*d3^3*d4^2-17*d3^2*d4^3+8*d3^2*d4+9*d3*d4^4-9*d3*d4^2)*t^4+(-16*r*r2*d3*d4+18*r*r2*d4^2-8*r*r2+8*Z*r2+16*r2^3*d3*d4-2*r2^3*d4^2+8*r2^3+16*r2*d3^3*d4-58*r2*d3^2*d4^2+52*r2*d3*d4^3+16*r2*d3*d4-18*r2*d4^4-2*r2*d4^2)*t^3+(-8*r*r2^2*d4-16*r*d3+18*r*d4+16*Z*d3-18*Z*d4+8*r2^4*d4+8*r2^2*d3^2*d4+48*r2^2*d3*d4^2+16*r2^2*d3-28*r2^2*d4^3-10*r2^2*d4-16*d3^3*d4^2+18*d3^2*d4^3+32*d3*d4^2-36*d4^3)*t^2+(-20*r*r2*d3*d4+18*r*r2*d4^2-4*r*r2-4*Z*r2+20*r2^3*d3*d4-18*r2^3*d4^2+4*r2^3+20*r2*d3^3*d4+18*r2*d3^2*d4^2-16*r2*d3*d4^3+12*r2*d3*d4-18*r2*d4^4-18*r2*d4^2+8*r2)*t+(-8*r*d3^2*d4+9*r*d3*d4^2-8*r*d3+9*r*d4+8*Z*d3-5*Z*d4+8*r2^2*d3^2*d4-9*r2^2*d3*d4^2+8*r2^2*d3-9*r2^2*d4+8*d3^4*d4-d3^3*d4^2-d3^2*d4^3-8*d3^2*d4-9*d3*d4^4+9*d3*d4^2+4*d4^3-4*d4)]

Module Groebner basis: 
[(4*Z^2-4*Z) , (-2*r*r2*d3*d4^4+4*r*r2*d3*d4^2+2*r*r2*d4^3-4*r*r2*d4-2*Z*r2*d4^3+4*Z*r2*d4+2*r2^3*d3*d4^4-4*r2^3*d3*d4^2-2*r2^3*d4^3+4*r2^3*d4+2*r2*d3^3*d4^4-4*r2*d3^3*d4^2-2*r2*d3^2*d4^5+4*r2*d3^2*d4^3+2*r2*d3*d4^6-6*r2*d3*d4^4+4*r2*d3*d4^2)*t^5+(-3*r*Z*d3*d4+3*r*Z+4*r*r2^2*d4^4-8*r*r2^2*d4^2-4*r*d3^2*d4^4+8*r*d3^2*d4^2+8*r*d3*d4^5-13*r*d3*d4^3-3*r*d3*d4-8*r*d4^4+17*r*d4^2-5*r-3*Z^2+3*Z*r2^2*d3*d4-3*Z*r2^2+3*Z*d3^3*d4-3*Z*d3^2*d4^2-Z*d3*d4^3+5*Z*d3*d4+8*Z*d4^4-17*Z*d4^2+5*Z-4*r2^4*d4^4+8*r2^4*d4^2-3*r2^2*d3*d4^3+3*r2^2*d3*d4-4*r2^2*d4^6+12*r2^2*d4^4-9*r2^2*d4^2+5*r2^2+4*d3^4*d4^4-8*d3^4*d4^2-12*d3^3*d4^5+25*d3^3*d4^3-5*d3^3*d4+12*d3^2*d4^6-29*d3^2*d4^4+13*d3^2*d4^2-8*d3*d4^7+25*d3*d4^5-22*d3*d4^3+5*d3*d4)*t^4+(6*r*Z*r2*d4+8*r*r2*d3*d4^4-16*r*r2*d3*d4^2-16*r*r2*d4^5+38*r*r2*d4^3-18*r*r2*d4-6*Z*r2^3*d4-6*Z*r2*d3^2*d4+12*Z*r2*d3*d4^2-10*Z*r2*d4^3+2*Z*r2*d4-8*r2^3*d3*d4^4+16*r2^3*d3*d4^2+8*r2^3*d4^5-22*r2^3*d4^3+18*r2^3*d4-8*r2*d3^3*d4^4+16*r2*d3^3*d4^2+36*r2*d3^2*d4^5-74*r2*d3^2*d4^3+10*r2*d3^2*d4-40*r2*d3*d4^6+76*r2*d3*d4^4-4*r2*d3*d4^2+16*r2*d4^7-26*r2*d4^5-8*r2*d4^3+10*r2*d4)*t^3+(6*r*Z+4*r*r2^2*d4^4-8*r*r2^2*d4^2+8*r*d3*d4^3-16*r*d3*d4-16*r*d4^4+34*r*d4^2-10*r-6*Z^2-12*Z*r2^2*d4^2-6*Z*r2^2+6*Z*d3^2*d4^2-8*Z*d3*d4^3+16*Z*d3*d4+16*Z*d4^4-46*Z*d4^2+10*Z-4*r2^4*d4^4+8*r2^4*d4^2-4*r2^2*d3^2*d4^4+8*r2^2*d3^2*d4^2-24*r2^2*d3*d4^5+40*r2^2*d3*d4^3+16*r2^2*d3*d4+28*r2^2*d4^6-48*r2^2*d4^4-6*r2^2*d4^2+10*r2^2+8*d3^3*d4^5-16*d3^3*d4^3-16*d3^2*d4^6+34*d3^2*d4^4-10*d3^2*d4^2-16*d3*d4^5+32*d3*d4^3+32*d4^6-68*d4^4+20*d4^2)*t^2+(6*r*Z*r2*d4+10*r*r2*d3*d4^4-20*r*r2*d3*d4^2-16*r*r2*d4^5+36*r*r2*d4^3-14*r*r2*d4-6*Z*r2^3*d4-6*Z*r2*d3^2*d4-12*Z*r2*d3*d4^2-8*Z*r2*d4^3-2*Z*r2*d4-10*r2^3*d3*d4^4+20*r2^3*d3*d4^2+16*r2^3*d4^5-36*r2^3*d4^3+14*r2^3*d4-10*r2*d3^3*d4^4+20*r2*d3^3*d4^2-2*r2*d3^2*d4^5+2*r2*d3^2*d4^3+10*r2*d3^2*d4+22*r2*d3*d4^6-54*r2*d3*d4^4+32*r2*d3*d4^2+16*r2*d4^7-18*r2*d4^5-24*r2*d4^3+10*r2*d4)*t+(3*r*Z*d3*d4+3*r*Z+4*r*d3^2*d4^4-8*r*d3^2*d4^2-8*r*d3*d4^5+21*r*d3*d4^3-13*r*d3*d4-8*r*d4^4+17*r*d4^2-5*r-7*Z^2-3*Z*r2^2*d3*d4-3*Z*r2^2-3*Z*d3^3*d4-3*Z*d3^2*d4^2-7*Z*d3*d4^3+11*Z*d3*d4+8*Z*d4^4-17*Z*d4^2+9*Z-4*r2^2*d3^2*d4^4+8*r2^2*d3^2*d4^2+8*r2^2*d3*d4^5-21*r2^2*d3*d4^3+13*r2^2*d3*d4+8*r2^2*d4^4-17*r2^2*d4^2+5*r2^2-4*d3^4*d4^4+8*d3^4*d4^2+4*d3^3*d4^5-9*d3^3*d4^3+5*d3^3*d4+4*d3^2*d4^6-5*d3^2*d4^4-3*d3^2*d4^2+8*d3*d4^7-25*d3*d4^5+22*d3*d4^3-5*d3*d4)].

LPP Set of Module Groebner Basis under specialization:
[ 1 ]

Branch 8:
constraints: d3-d4=0,r-1=0,r2^2=0,Z^2-Z=0,r2*d4^2+Z*r2-r2=0,d4^4-2*d4^2-Z+1=0,d4!=0,4*Z*d4^2!=0,
RGB from KSW:
[(4*Z*d4^2)  ,  (-2*r*r2*d3*d4^2+2*r*r2*d4-2*Z*r2*d4+2*r2^3*d3*d4^2-2*r2^3*d4+2*r2*d3^3*d4^2-2*r2*d3^2*d4^3+2*r2*d3*d4^4-2*r2*d3*d4^2)*t^5+(4*r*r2^2*d4^2-4*r*d3^2*d4^2+5*r*d3*d4^3+3*r*d3*d4-5*r*d4^2+r-4*Z*d3*d4+5*Z*d4^2-Z-4*r2^4*d4^2+3*r2^2*d3*d4^3-3*r2^2*d3*d4-4*r2^2*d4^4+r2^2*d4^2-r2^2+4*d3^4*d4^2-9*d3^3*d4^3+d3^3*d4+9*d3^2*d4^4-5*d3^2*d4^2-5*d3*d4^5+6*d3*d4^3-d3*d4)*t^4+(8*r*r2*d3*d4^2-10*r*r2*d4^3+6*r*r2*d4-4*Z*r2*d4-8*r2^3*d3*d4^2+2*r2^3*d4^3-6*r2^3*d4-8*r2*d3^3*d4^2+30*r2*d3^2*d4^3-2*r2*d3^2*d4-28*r2*d3*d4^4-4*r2*d3*d4^2+10*r2*d4^5-2*r2*d4)*t^3+(4*r*r2^2*d4^2+8*r*d3*d4-10*r*d4^2+2*r-8*Z*d3*d4+10*Z*d4^2-2*Z-4*r2^4*d4^2-4*r2^2*d3^2*d4^2-24*r2^2*d3*d4^3-8*r2^2*d3*d4+16*r2^2*d4^4+2*r2^2*d4^2-2*r2^2+8*d3^3*d4^3-10*d3^2*d4^4+2*d3^2*d4^2-16*d3*d4^3+20*d4^4-4*d4^2)*t^2+(10*r*r2*d3*d4^2-10*r*r2*d4^3+4*r*r2*d4-2*Z*r2*d4-10*r2^3*d3*d4^2+10*r2^3*d4^3-4*r2^3*d4-10*r2*d3^3*d4^2-8*r2*d3^2*d4^3-2*r2*d3^2*d4+10*r2*d3*d4^4-10*r2*d3*d4^2+10*r2*d4^5+8*r2*d4^3-2*r2*d4)*t+(4*r*d3^2*d4^2-5*r*d3*d4^3+5*r*d3*d4-5*r*d4^2+r-4*Z*d3*d4+Z*d4^2-Z-4*r2^2*d3^2*d4^2+5*r2^2*d3*d4^3-5*r2^2*d3*d4+5*r2^2*d4^2-r2^2-4*d3^4*d4^2+d3^3*d4^3-d3^3*d4+d3^2*d4^4+3*d3^2*d4^2+5*d3*d4^5-6*d3*d4^3+d3*d4)]
[(8*Z*r2-8*r2)*t+(-4*Z*d4-4*d4^3+4*d4)  ,  (4*r*r2*d3*d4-4*r*r2+4*Z*r2-4*r2^3*d3*d4+4*r2^3-4*r2*d3^3*d4+4*r2*d3^2*d4^2-4*r2*d3*d4^3+4*r2*d3*d4)*t^5+(-8*r*r2^2*d4+8*r*d3^2*d4-9*r*d3*d4^2-8*r*d3+9*r*d4+8*Z*d3-9*Z*d4+8*r2^4*d4-7*r2^2*d3*d4^2+8*r2^2*d3+8*r2^2*d4^3-r2^2*d4-8*d3^4*d4+17*d3^3*d4^2-17*d3^2*d4^3+8*d3^2*d4+9*d3*d4^4-9*d3*d4^2)*t^4+(-16*r*r2*d3*d4+18*r*r2*d4^2-8*r*r2+8*Z*r2+16*r2^3*d3*d4-2*r2^3*d4^2+8*r2^3+16*r2*d3^3*d4-58*r2*d3^2*d4^2+52*r2*d3*d4^3+16*r2*d3*d4-18*r2*d4^4-2*r2*d4^2)*t^3+(-8*r*r2^2*d4-16*r*d3+18*r*d4+16*Z*d3-18*Z*d4+8*r2^4*d4+8*r2^2*d3^2*d4+48*r2^2*d3*d4^2+16*r2^2*d3-28*r2^2*d4^3-10*r2^2*d4-16*d3^3*d4^2+18*d3^2*d4^3+32*d3*d4^2-36*d4^3)*t^2+(-20*r*r2*d3*d4+18*r*r2*d4^2-4*r*r2-4*Z*r2+20*r2^3*d3*d4-18*r2^3*d4^2+4*r2^3+20*r2*d3^3*d4+18*r2*d3^2*d4^2-16*r2*d3*d4^3+12*r2*d3*d4-18*r2*d4^4-18*r2*d4^2+8*r2)*t+(-8*r*d3^2*d4+9*r*d3*d4^2-8*r*d3+9*r*d4+8*Z*d3-5*Z*d4+8*r2^2*d3^2*d4-9*r2^2*d3*d4^2+8*r2^2*d3-9*r2^2*d4+8*d3^4*d4-d3^3*d4^2-d3^2*d4^3-8*d3^2*d4-9*d3*d4^4+9*d3*d4^2+4*d4^3-4*d4)]

Module Groebner basis: 
[(4*Z*d4^2) , (-2*r*r2*d3*d4^2+2*r*r2*d4-2*Z*r2*d4+2*r2^3*d3*d4^2-2*r2^3*d4+2*r2*d3^3*d4^2-2*r2*d3^2*d4^3+2*r2*d3*d4^4-2*r2*d3*d4^2)*t^5+(4*r*r2^2*d4^2-4*r*d3^2*d4^2+5*r*d3*d4^3+3*r*d3*d4-5*r*d4^2+r-4*Z*d3*d4+5*Z*d4^2-Z-4*r2^4*d4^2+3*r2^2*d3*d4^3-3*r2^2*d3*d4-4*r2^2*d4^4+r2^2*d4^2-r2^2+4*d3^4*d4^2-9*d3^3*d4^3+d3^3*d4+9*d3^2*d4^4-5*d3^2*d4^2-5*d3*d4^5+6*d3*d4^3-d3*d4)*t^4+(8*r*r2*d3*d4^2-10*r*r2*d4^3+6*r*r2*d4-4*Z*r2*d4-8*r2^3*d3*d4^2+2*r2^3*d4^3-6*r2^3*d4-8*r2*d3^3*d4^2+30*r2*d3^2*d4^3-2*r2*d3^2*d4-28*r2*d3*d4^4-4*r2*d3*d4^2+10*r2*d4^5-2*r2*d4)*t^3+(4*r*r2^2*d4^2+8*r*d3*d4-10*r*d4^2+2*r-8*Z*d3*d4+10*Z*d4^2-2*Z-4*r2^4*d4^2-4*r2^2*d3^2*d4^2-24*r2^2*d3*d4^3-8*r2^2*d3*d4+16*r2^2*d4^4+2*r2^2*d4^2-2*r2^2+8*d3^3*d4^3-10*d3^2*d4^4+2*d3^2*d4^2-16*d3*d4^3+20*d4^4-4*d4^2)*t^2+(10*r*r2*d3*d4^2-10*r*r2*d4^3+4*r*r2*d4-2*Z*r2*d4-10*r2^3*d3*d4^2+10*r2^3*d4^3-4*r2^3*d4-10*r2*d3^3*d4^2-8*r2*d3^2*d4^3-2*r2*d3^2*d4+10*r2*d3*d4^4-10*r2*d3*d4^2+10*r2*d4^5+8*r2*d4^3-2*r2*d4)*t+(4*r*d3^2*d4^2-5*r*d3*d4^3+5*r*d3*d4-5*r*d4^2+r-4*Z*d3*d4+Z*d4^2-Z-4*r2^2*d3^2*d4^2+5*r2^2*d3*d4^3-5*r2^2*d3*d4+5*r2^2*d4^2-r2^2-4*d3^4*d4^2+d3^3*d4^3-d3^3*d4+d3^2*d4^4+3*d3^2*d4^2+5*d3*d4^5-6*d3*d4^3+d3*d4)].

LPP Set of Module Groebner Basis under specialization:
[ 1 ]

Branch 9:
constraints: d3-d4=0,r2=0,Z=0,r-1=0,d4^2-1=0,d4!=0,Z-1!=0,
RGB from KSW:
[   ].

Module Groebner basis: 
[  ].


LPP Set of Module Groebner Basis under specialization:
[  ].

Branch 10:
constraints: d4=0,r2^2-r+Z=0,d3^2-Z+1!=0,
RGB from KSW:
[   ].

Module Groebner basis: 
[  ].


LPP Set of Module Groebner Basis under specialization:
[  ].

Branch 11:
constraints: r2=0,d3^3*d4-d3^2*d4^2+d3*d4^3-r*d3*d4-d3*d4+r-Z=0,d3^2-2*d3*d4+d4^2-r+1!=0,d4!=0,-r+Z!=0,d3^3-2*d3^2*d4+d3*d4^2-r*d3-d3+2*d4!=0,
RGB from KSW:
[(-2*r^2+2*r*Z+2*r*d3^2-4*r*d3*d4+6*r*d4^2+2*r-2*Z*d3^2+4*Z*d3*d4-2*Z*d4^2-2*Z+4*d3*d4^3-4*d4^4-4*d4^2)*t^2+(-2*r^2+2*r*Z+2*r*d3^2+2*r*d4^2+2*r-2*Z*d3^2-2*Z*d4^2-2*Z-4*d3^2*d4^2)  ,  (r^2*d3*d4-r^2+r*Z-r*r2^2*d3*d4+r*r2^2-2*r*d3^3*d4+2*r*d3^2*d4^2+r*d3^2-2*r*d3*d4^3-r*d3*d4+r*d4^2+r-Z*d3^2+Z*d3*d4-Z*d4^2-Z+r2^2*d3^3*d4-r2^2*d3^2*d4^2-r2^2*d3^2+r2^2*d3*d4^3+2*r2^2*d3*d4-r2^2*d4^2-r2^2+d3^5*d4-2*d3^4*d4^2+3*d3^3*d4^3-2*d3^2*d4^4+d3*d4^5-d3*d4)*t^4+(-2*r^2*r2*d4+2*r*r2^3*d4+4*r*r2*d3^2*d4-6*r*r2*d3*d4^2+4*r*r2*d4^3+4*r*r2*d4-2*r2^3*d3^2*d4+2*r2^3*d3*d4^2-2*r2^3*d4^3-2*r2^3*d4-2*r2*d3^4*d4+6*r2*d3^3*d4^2-8*r2*d3^2*d4^3-4*r2*d3^2*d4+6*r2*d3*d4^4+6*r2*d3*d4^2-2*r2*d4^5-4*r2*d4^3-2*r2*d4)*t^3+(4*r*r2^2*d4^2+2*r*r2^2-2*r*d3^2*d4^2+2*r*d3*d4-2*Z*d3*d4-4*r2^2*d3^2*d4^2-2*r2^2*d3^2+4*r2^2*d3*d4^3+2*r2^2*d3*d4-4*r2^2*d4^4-6*r2^2*d4^2-2*r2^2+2*d3^4*d4^2-2*d3^3*d4^3+2*d3^2*d4^4-2*d3^2*d4^2)*t^2+(-2*r^2*r2*d4+2*r*r2^3*d4+4*r*r2*d3^2*d4+2*r*r2*d3*d4^2+4*r*r2*d4^3+4*r*r2*d4-2*r2^3*d3^2*d4+2*r2^3*d3*d4^2-2*r2^3*d4^3-2*r2^3*d4-2*r2*d3^4*d4-2*r2*d3^3*d4^2-4*r2*d3^2*d4-2*r2*d3*d4^4-2*r2*d3*d4^2-2*r2*d4^5-4*r2*d4^3-2*r2*d4)*t+(-r^2*d3*d4+r^2-r*Z+r*r2^2*d3*d4+r*r2^2+2*r*d3^3*d4-r*d3^2+2*r*d3*d4^3-r*d3*d4-r*d4^2-r+Z*d3^2+Z*d3*d4+Z*d4^2+Z-r2^2*d3^3*d4+r2^2*d3^2*d4^2-r2^2*d3^2-r2^2*d3*d4^3-r2^2*d4^2-r2^2-d3^5*d4-d3^3*d4^3+2*d3^2*d4^2-d3*d4^5+d3*d4)]
[(2*r-2*Z+2*d3^2*d4^2-4*d4^2)*t^2+(2*r-2*Z-2*d3^2*d4^2)  ,  (-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)*t^4+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4+4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t^3+(-4*r2^2*d4^2-2*r2^2)*t^2+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4-4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t+(r*d3*d4-r+Z-r2^2*d3*d4-r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)]
[(-2*r^2*d3+2*r*Z*d3+2*r*d3^3-4*r*d3^2*d4+2*r*d3*d4^2-2*r*d3+4*r*d4-2*Z*d3^3+4*Z*d3^2*d4-2*Z*d3*d4^2+2*Z*d3-4*Z*d4)*t^2+(-2*r^2*d3+2*r*Z*d3+2*r*d3^3+2*r*d3*d4^2-2*r*d3-2*Z*d3^3-2*Z*d3*d4^2+2*Z*d3)  ,  (r^2*d3^2*d4-r^2*d3+r*Z*d3-r*r2^2*d3^2*d4+r*r2^2*d3-2*r*d3^4*d4+2*r*d3^3*d4^2+r*d3^3-2*r*d3^2*d4^3+r*d3^2*d4+r*d3*d4^2-r*d3-Z*d3^3+Z*d3^2*d4-Z*d3*d4^2+Z*d3+r2^2*d3^4*d4-r2^2*d3^3*d4^2-r2^2*d3^3+r2^2*d3^2*d4^3-r2^2*d3*d4^2+r2^2*d3+d3^6*d4-2*d3^5*d4^2+3*d3^4*d4^3-2*d3^4*d4-2*d3^3*d4^4+2*d3^3*d4^2+d3^2*d4^5-2*d3^2*d4^3+d3^2*d4)*t^4+(-2*r^2*r2*d3*d4+2*r*r2^3*d3*d4+4*r*r2*d3^3*d4-6*r*r2*d3^2*d4^2+4*r*r2*d3*d4^3-2*r2^3*d3^3*d4+2*r2^3*d3^2*d4^2-2*r2^3*d3*d4^3+2*r2^3*d3*d4-2*r2*d3^5*d4+6*r2*d3^4*d4^2-8*r2*d3^3*d4^3+6*r2*d3^2*d4^4-2*r2*d3^2*d4^2-2*r2*d3*d4^5+2*r2*d3*d4)*t^3+(4*r*r2^2*d3*d4^2+2*r*r2^2*d3-2*r*d3^3*d4^2+2*r*d3^2*d4+4*r*d3*d4^2-4*r*d4-2*Z*d3^2*d4+4*Z*d4-4*r2^2*d3^3*d4^2-2*r2^2*d3^3+4*r2^2*d3^2*d4^3+2*r2^2*d3^2*d4-4*r2^2*d3*d4^4+2*r2^2*d3*d4^2+2*r2^2*d3+2*d3^5*d4^2-2*d3^4*d4^3+2*d3^3*d4^4-6*d3^3*d4^2+4*d3^2*d4^3-4*d3*d4^4+4*d3*d4^2)*t^2+(-2*r^2*r2*d3*d4+2*r*r2^3*d3*d4+4*r*r2*d3^3*d4+2*r*r2*d3^2*d4^2+4*r*r2*d3*d4^3-2*r2^3*d3^3*d4+2*r2^3*d3^2*d4^2-2*r2^3*d3*d4^3+2*r2^3*d3*d4-2*r2*d3^5*d4-2*r2*d3^4*d4^2-2*r2*d3^2*d4^4+6*r2*d3^2*d4^2-2*r2*d3*d4^5+2*r2*d3*d4)*t+(-r^2*d3^2*d4+r^2*d3-r*Z*d3+r*r2^2*d3^2*d4+r*r2^2*d3+2*r*d3^4*d4-r*d3^3+2*r*d3^2*d4^3-3*r*d3^2*d4-r*d3*d4^2+r*d3+Z*d3^3+Z*d3^2*d4+Z*d3*d4^2-Z*d3-r2^2*d3^4*d4+r2^2*d3^3*d4^2-r2^2*d3^3-r2^2*d3^2*d4^3+2*r2^2*d3^2*d4-r2^2*d3*d4^2+r2^2*d3-d3^6*d4-d3^4*d4^3+2*d3^4*d4-d3^2*d4^5+2*d3^2*d4^3-d3^2*d4)]
[(2*r^2*d4-2*r*Z*d4-2*r*d3^2*d4-4*r*d3-6*r*d4^3+6*r*d4+2*Z*d3^2*d4-4*Z*d3*d4^2+4*Z*d3+2*Z*d4^3-6*Z*d4+4*d3*d4^2+4*d4^5-4*d4^3)*t^2+(2*r^2*d4-2*r*Z*d4-2*r*d3^2*d4+4*r*d3*d4^2-4*r*d3-2*r*d4^3-2*r*d4+2*Z*d3^2*d4+4*Z*d3+2*Z*d4^3+2*Z*d4+4*d3^2*d4^3-4*d3*d4^4+4*d3*d4^2)  ,  (-r^2*d3*d4^2+r^2*d4-r*Z*d4+r*r2^2*d3*d4^2-r*r2^2*d4+2*r*d3^3*d4^2-2*r*d3^2*d4^3+r*d3^2*d4+2*r*d3*d4^4-r*d3*d4^2-2*r*d3-r*d4^3+r*d4+Z*d3^2*d4-Z*d3*d4^2+2*Z*d3+Z*d4^3-Z*d4-r2^2*d3^3*d4^2+r2^2*d3^2*d4^3-r2^2*d3^2*d4-r2^2*d3*d4^4+2*r2^2*d3+r2^2*d4^3-r2^2*d4-d3^5*d4^2+2*d3^4*d4^3-2*d3^4*d4-3*d3^3*d4^4+4*d3^3*d4^2+2*d3^2*d4^5-4*d3^2*d4^3+2*d3^2*d4-d3*d4^6+2*d3*d4^4-d3*d4^2)*t^4+(2*r^2*r2*d4^2-2*r*r2^3*d4^2-4*r*r2*d3^2*d4^2+6*r*r2*d3*d4^3-4*r*r2*d3*d4-4*r*r2*d4^4+2*r2^3*d3^2*d4^2-2*r2^3*d3*d4^3+4*r2^3*d3*d4+2*r2^3*d4^4-2*r2^3*d4^2+2*r2*d3^4*d4^2-6*r2*d3^3*d4^3+4*r2*d3^3*d4+8*r2*d3^2*d4^4-8*r2*d3^2*d4^2-6*r2*d3*d4^5+6*r2*d3*d4^3+4*r2*d3*d4+2*r2*d4^6-2*r2*d4^2)*t^3+(-4*r*r2^2*d4^3-2*r*r2^2*d4+2*r*d3^2*d4^3+2*r*d3*d4^2-4*r*d4+2*Z*d3*d4^2+4*Z*d4+4*r2^2*d3^2*d4^3+2*r2^2*d3^2*d4-4*r2^2*d3*d4^4+6*r2^2*d3*d4^2+4*r2^2*d3+4*r2^2*d4^5-2*r2^2*d4^3-2*r2^2*d4-2*d3^4*d4^3+2*d3^3*d4^4-4*d3^3*d4^2-2*d3^2*d4^5+6*d3^2*d4^3-4*d3*d4^4+4*d3*d4^2)*t^2+(2*r^2*r2*d4^2-2*r*r2^3*d4^2-4*r*r2*d3^2*d4^2-2*r*r2*d3*d4^3-4*r*r2*d3*d4-4*r*r2*d4^4+2*r2^3*d3^2*d4^2-2*r2^3*d3*d4^3+4*r2^3*d3*d4+2*r2^3*d4^4-2*r2^3*d4^2+2*r2*d3^4*d4^2+2*r2*d3^3*d4^3+4*r2*d3^3*d4+8*r2*d3^2*d4^2+2*r2*d3*d4^5-2*r2*d3*d4^3+4*r2*d3*d4+2*r2*d4^6-2*r2*d4^2)*t+(r^2*d3*d4^2-r^2*d4+r*Z*d4-r*r2^2*d3*d4^2-r*r2^2*d4-2*r*d3^3*d4^2-r*d3^2*d4-2*r*d3*d4^4-r*d3*d4^2+2*r*d3+r*d4^3+3*r*d4-Z*d3^2*d4-Z*d3*d4^2-2*Z*d3-Z*d4^3-3*Z*d4+r2^2*d3^3*d4^2-r2^2*d3^2*d4^3+3*r2^2*d3^2*d4+r2^2*d3*d4^4-2*r2^2*d3*d4^2+2*r2^2*d3+r2^2*d4^3-r2^2*d4+d3^5*d4^2+2*d3^4*d4+d3^3*d4^4-2*d3^2*d4^3-2*d3^2*d4+d3*d4^6+2*d3*d4^4-3*d3*d4^2)]

Module Groebner basis: 
[(-2*r^2*d3+2*r*Z*d3+2*r*d3^3-4*r*d3^2*d4+2*r*d3*d4^2-2*r*d3+4*r*d4-2*Z*d3^3+4*Z*d3^2*d4-2*Z*d3*d4^2+2*Z*d3-4*Z*d4)*t^2+(-2*r^2*d3+2*r*Z*d3+2*r*d3^3+2*r*d3*d4^2-2*r*d3-2*Z*d3^3-2*Z*d3*d4^2+2*Z*d3) , (r^2*d3^2*d4-r^2*d3+r*Z*d3-r*r2^2*d3^2*d4+r*r2^2*d3-2*r*d3^4*d4+2*r*d3^3*d4^2+r*d3^3-2*r*d3^2*d4^3+r*d3^2*d4+r*d3*d4^2-r*d3-Z*d3^3+Z*d3^2*d4-Z*d3*d4^2+Z*d3+r2^2*d3^4*d4-r2^2*d3^3*d4^2-r2^2*d3^3+r2^2*d3^2*d4^3-r2^2*d3*d4^2+r2^2*d3+d3^6*d4-2*d3^5*d4^2+3*d3^4*d4^3-2*d3^4*d4-2*d3^3*d4^4+2*d3^3*d4^2+d3^2*d4^5-2*d3^2*d4^3+d3^2*d4)*t^4+(-2*r^2*r2*d3*d4+2*r*r2^3*d3*d4+4*r*r2*d3^3*d4-6*r*r2*d3^2*d4^2+4*r*r2*d3*d4^3-2*r2^3*d3^3*d4+2*r2^3*d3^2*d4^2-2*r2^3*d3*d4^3+2*r2^3*d3*d4-2*r2*d3^5*d4+6*r2*d3^4*d4^2-8*r2*d3^3*d4^3+6*r2*d3^2*d4^4-2*r2*d3^2*d4^2-2*r2*d3*d4^5+2*r2*d3*d4)*t^3+(4*r*r2^2*d3*d4^2+2*r*r2^2*d3-2*r*d3^3*d4^2+2*r*d3^2*d4+4*r*d3*d4^2-4*r*d4-2*Z*d3^2*d4+4*Z*d4-4*r2^2*d3^3*d4^2-2*r2^2*d3^3+4*r2^2*d3^2*d4^3+2*r2^2*d3^2*d4-4*r2^2*d3*d4^4+2*r2^2*d3*d4^2+2*r2^2*d3+2*d3^5*d4^2-2*d3^4*d4^3+2*d3^3*d4^4-6*d3^3*d4^2+4*d3^2*d4^3-4*d3*d4^4+4*d3*d4^2)*t^2+(-2*r^2*r2*d3*d4+2*r*r2^3*d3*d4+4*r*r2*d3^3*d4+2*r*r2*d3^2*d4^2+4*r*r2*d3*d4^3-2*r2^3*d3^3*d4+2*r2^3*d3^2*d4^2-2*r2^3*d3*d4^3+2*r2^3*d3*d4-2*r2*d3^5*d4-2*r2*d3^4*d4^2-2*r2*d3^2*d4^4+6*r2*d3^2*d4^2-2*r2*d3*d4^5+2*r2*d3*d4)*t+(-r^2*d3^2*d4+r^2*d3-r*Z*d3+r*r2^2*d3^2*d4+r*r2^2*d3+2*r*d3^4*d4-r*d3^3+2*r*d3^2*d4^3-3*r*d3^2*d4-r*d3*d4^2+r*d3+Z*d3^3+Z*d3^2*d4+Z*d3*d4^2-Z*d3-r2^2*d3^4*d4+r2^2*d3^3*d4^2-r2^2*d3^3-r2^2*d3^2*d4^3+2*r2^2*d3^2*d4-r2^2*d3*d4^2+r2^2*d3-d3^6*d4-d3^4*d4^3+2*d3^4*d4-d3^2*d4^5+2*d3^2*d4^3-d3^2*d4)].

LPP Set of Module Groebner Basis under specialization:
[ t^2 ]

Branch 12:
constraints: r2=0,r-Z=0,d3^3-d3^2*d4+d3*d4^2-Z*d3-d3=0,d3^2-2*d3*d4+d4^2-Z+1!=0,d4!=0,-d3*d4+d4^2-Z+1!=0,d4!=0,
RGB from KSW:
[(4*Z*d4^2+4*d3*d4^3-4*d4^4-4*d4^2)*t^2+(-4*d3^2*d4^2)  ,  (r*Z*d3*d4-r*Z-r*d3^3*d4+r*d3^2*d4^2+r*d3^2-r*d3*d4^3-2*r*d3*d4+r*d4^2+r+Z^2-Z*r2^2*d3*d4+Z*r2^2-Z*d3^3*d4+Z*d3^2*d4^2-Z*d3^2-Z*d3*d4^3+2*Z*d3*d4-Z*d4^2-Z+r2^2*d3^3*d4-r2^2*d3^2*d4^2-r2^2*d3^2+r2^2*d3*d4^3+2*r2^2*d3*d4-r2^2*d4^2-r2^2+d3^5*d4-2*d3^4*d4^2+3*d3^3*d4^3-2*d3^2*d4^4+d3*d4^5-d3*d4)*t^4+(-2*r*Z*r2*d4+2*r*r2*d3^2*d4-2*r*r2*d3*d4^2+2*r*r2*d4^3+2*r*r2*d4+2*Z*r2^3*d4+2*Z*r2*d3^2*d4-4*Z*r2*d3*d4^2+2*Z*r2*d4^3+2*Z*r2*d4-2*r2^3*d3^2*d4+2*r2^3*d3*d4^2-2*r2^3*d4^3-2*r2^3*d4-2*r2*d3^4*d4+6*r2*d3^3*d4^2-8*r2*d3^2*d4^3-4*r2*d3^2*d4+6*r2*d3*d4^4+6*r2*d3*d4^2-2*r2*d4^5-4*r2*d4^3-2*r2*d4)*t^3+(-2*r*Z+2*r*d3^2-2*r*d3*d4+2*r*d4^2+2*r+2*Z^2+4*Z*r2^2*d4^2+2*Z*r2^2-2*Z*d3^2*d4^2-2*Z*d3^2+2*Z*d3*d4-2*Z*d4^2-2*Z-4*r2^2*d3^2*d4^2-2*r2^2*d3^2+4*r2^2*d3*d4^3+2*r2^2*d3*d4-4*r2^2*d4^4-6*r2^2*d4^2-2*r2^2+2*d3^4*d4^2-2*d3^3*d4^3+2*d3^2*d4^4-2*d3^2*d4^2)*t^2+(-2*r*Z*r2*d4+2*r*r2*d3^2*d4-2*r*r2*d3*d4^2+2*r*r2*d4^3+2*r*r2*d4+2*Z*r2^3*d4+2*Z*r2*d3^2*d4+4*Z*r2*d3*d4^2+2*Z*r2*d4^3+2*Z*r2*d4-2*r2^3*d3^2*d4+2*r2^3*d3*d4^2-2*r2^3*d4^3-2*r2^3*d4-2*r2*d3^4*d4-2*r2*d3^3*d4^2-4*r2*d3^2*d4-2*r2*d3*d4^4-2*r2*d3*d4^2-2*r2*d4^5-4*r2*d4^3-2*r2*d4)*t+(-r*Z*d3*d4-r*Z+r*d3^3*d4-r*d3^2*d4^2+r*d3^2+r*d3*d4^3+r*d4^2+r+Z^2+Z*r2^2*d3*d4+Z*r2^2+Z*d3^3*d4+Z*d3^2*d4^2-Z*d3^2+Z*d3*d4^3-Z*d4^2-Z-r2^2*d3^3*d4+r2^2*d3^2*d4^2-r2^2*d3^2-r2^2*d3*d4^3-r2^2*d4^2-r2^2-d3^5*d4-d3^3*d4^3+2*d3^2*d4^2-d3*d4^5+d3*d4)]
[(2*d3^2*d4^2-4*d4^2)*t^2+(-2*d3^2*d4^2)  ,  (-r*d3*d4+r-Z+r2^2*d3*d4-r2^2+d3^3*d4-d3^2*d4^2+d3*d4^3-d3*d4)*t^4+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4+4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t^3+(2*r-2*Z-4*r2^2*d4^2-2*r2^2)*t^2+(2*r*r2*d4-2*r2^3*d4-2*r2*d3^2*d4-4*r2*d3*d4^2-2*r2*d4^3-2*r2*d4)*t+(r*d3*d4+r-Z-r2^2*d3*d4-r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)]
[(-4*Z*d3*d4^2-4*Z*d4^3+4*d3*d4^2+4*d4^5-4*d4^3)*t^2+(4*Z*d3*d4^2+4*d3^2*d4^3-4*d3*d4^4+4*d3*d4^2)  ,  (-r*Z*d3*d4^2+r*Z*d4+r*d3^3*d4^2-r*d3^2*d4^3+r*d3^2*d4+r*d3*d4^4-2*r*d3-r*d4^3+r*d4-Z^2*d4+Z*r2^2*d3*d4^2-Z*r2^2*d4+Z*d3^3*d4^2-Z*d3^2*d4^3+Z*d3^2*d4+Z*d3*d4^4-2*Z*d3*d4^2+2*Z*d3+Z*d4^3-Z*d4-r2^2*d3^3*d4^2+r2^2*d3^2*d4^3-r2^2*d3^2*d4-r2^2*d3*d4^4+2*r2^2*d3+r2^2*d4^3-r2^2*d4-d3^5*d4^2+2*d3^4*d4^3-2*d3^4*d4-3*d3^3*d4^4+4*d3^3*d4^2+2*d3^2*d4^5-4*d3^2*d4^3+2*d3^2*d4-d3*d4^6+2*d3*d4^4-d3*d4^2)*t^4+(2*r*Z*r2*d4^2-2*r*r2*d3^2*d4^2+2*r*r2*d3*d4^3-4*r*r2*d3*d4-2*r*r2*d4^4+2*r*r2*d4^2-2*Z*r2^3*d4^2-2*Z*r2*d3^2*d4^2+4*Z*r2*d3*d4^3-2*Z*r2*d4^4-2*Z*r2*d4^2+2*r2^3*d3^2*d4^2-2*r2^3*d3*d4^3+4*r2^3*d3*d4+2*r2^3*d4^4-2*r2^3*d4^2+2*r2*d3^4*d4^2-6*r2*d3^3*d4^3+4*r2*d3^3*d4+8*r2*d3^2*d4^4-8*r2*d3^2*d4^2-6*r2*d3*d4^5+6*r2*d3*d4^3+4*r2*d3*d4+2*r2*d4^6-2*r2*d4^2)*t^3+(2*r*Z*d4-2*r*d3^2*d4+2*r*d3*d4^2-4*r*d3-2*r*d4^3+2*r*d4-2*Z^2*d4-4*Z*r2^2*d4^3-2*Z*r2^2*d4+2*Z*d3^2*d4^3+2*Z*d3^2*d4+2*Z*d3*d4^2+4*Z*d3+2*Z*d4^3-2*Z*d4+4*r2^2*d3^2*d4^3+2*r2^2*d3^2*d4-4*r2^2*d3*d4^4+6*r2^2*d3*d4^2+4*r2^2*d3+4*r2^2*d4^5-2*r2^2*d4^3-2*r2^2*d4-2*d3^4*d4^3+2*d3^3*d4^4-4*d3^3*d4^2-2*d3^2*d4^5+6*d3^2*d4^3-4*d3*d4^4+4*d3*d4^2)*t^2+(2*r*Z*r2*d4^2-2*r*r2*d3^2*d4^2+2*r*r2*d3*d4^3-4*r*r2*d3*d4-2*r*r2*d4^4+2*r*r2*d4^2-2*Z*r2^3*d4^2-2*Z*r2*d3^2*d4^2-4*Z*r2*d3*d4^3-2*Z*r2*d4^4-2*Z*r2*d4^2+2*r2^3*d3^2*d4^2-2*r2^3*d3*d4^3+4*r2^3*d3*d4+2*r2^3*d4^4-2*r2^3*d4^2+2*r2*d3^4*d4^2+2*r2*d3^3*d4^3+4*r2*d3^3*d4+8*r2*d3^2*d4^2+2*r2*d3*d4^5-2*r2*d3*d4^3+4*r2*d3*d4+2*r2*d4^6-2*r2*d4^2)*t+(r*Z*d3*d4^2+r*Z*d4-r*d3^3*d4^2+r*d3^2*d4^3-3*r*d3^2*d4-r*d3*d4^4+2*r*d3*d4^2-2*r*d3-r*d4^3+r*d4-Z^2*d4-Z*r2^2*d3*d4^2-Z*r2^2*d4-Z*d3^3*d4^2-Z*d3^2*d4^3+Z*d3^2*d4-Z*d3*d4^4-4*Z*d3*d4^2+2*Z*d3+Z*d4^3-Z*d4+r2^2*d3^3*d4^2-r2^2*d3^2*d4^3+3*r2^2*d3^2*d4+r2^2*d3*d4^4-2*r2^2*d3*d4^2+2*r2^2*d3+r2^2*d4^3-r2^2*d4+d3^5*d4^2+2*d3^4*d4+d3^3*d4^4-2*d3^2*d4^3-2*d3^2*d4+d3*d4^6+2*d3*d4^4-3*d3*d4^2)]

Module Groebner basis: 
[(4*Z*d4^2+4*d3*d4^3-4*d4^4-4*d4^2)*t^2+(-4*d3^2*d4^2) , (r*Z*d3*d4-r*Z-r*d3^3*d4+r*d3^2*d4^2+r*d3^2-r*d3*d4^3-2*r*d3*d4+r*d4^2+r+Z^2-Z*r2^2*d3*d4+Z*r2^2-Z*d3^3*d4+Z*d3^2*d4^2-Z*d3^2-Z*d3*d4^3+2*Z*d3*d4-Z*d4^2-Z+r2^2*d3^3*d4-r2^2*d3^2*d4^2-r2^2*d3^2+r2^2*d3*d4^3+2*r2^2*d3*d4-r2^2*d4^2-r2^2+d3^5*d4-2*d3^4*d4^2+3*d3^3*d4^3-2*d3^2*d4^4+d3*d4^5-d3*d4)*t^4+(-2*r*Z*r2*d4+2*r*r2*d3^2*d4-2*r*r2*d3*d4^2+2*r*r2*d4^3+2*r*r2*d4+2*Z*r2^3*d4+2*Z*r2*d3^2*d4-4*Z*r2*d3*d4^2+2*Z*r2*d4^3+2*Z*r2*d4-2*r2^3*d3^2*d4+2*r2^3*d3*d4^2-2*r2^3*d4^3-2*r2^3*d4-2*r2*d3^4*d4+6*r2*d3^3*d4^2-8*r2*d3^2*d4^3-4*r2*d3^2*d4+6*r2*d3*d4^4+6*r2*d3*d4^2-2*r2*d4^5-4*r2*d4^3-2*r2*d4)*t^3+(-2*r*Z+2*r*d3^2-2*r*d3*d4+2*r*d4^2+2*r+2*Z^2+4*Z*r2^2*d4^2+2*Z*r2^2-2*Z*d3^2*d4^2-2*Z*d3^2+2*Z*d3*d4-2*Z*d4^2-2*Z-4*r2^2*d3^2*d4^2-2*r2^2*d3^2+4*r2^2*d3*d4^3+2*r2^2*d3*d4-4*r2^2*d4^4-6*r2^2*d4^2-2*r2^2+2*d3^4*d4^2-2*d3^3*d4^3+2*d3^2*d4^4-2*d3^2*d4^2)*t^2+(-2*r*Z*r2*d4+2*r*r2*d3^2*d4-2*r*r2*d3*d4^2+2*r*r2*d4^3+2*r*r2*d4+2*Z*r2^3*d4+2*Z*r2*d3^2*d4+4*Z*r2*d3*d4^2+2*Z*r2*d4^3+2*Z*r2*d4-2*r2^3*d3^2*d4+2*r2^3*d3*d4^2-2*r2^3*d4^3-2*r2^3*d4-2*r2*d3^4*d4-2*r2*d3^3*d4^2-4*r2*d3^2*d4-2*r2*d3*d4^4-2*r2*d3*d4^2-2*r2*d4^5-4*r2*d4^3-2*r2*d4)*t+(-r*Z*d3*d4-r*Z+r*d3^3*d4-r*d3^2*d4^2+r*d3^2+r*d3*d4^3+r*d4^2+r+Z^2+Z*r2^2*d3*d4+Z*r2^2+Z*d3^3*d4+Z*d3^2*d4^2-Z*d3^2+Z*d3*d4^3-Z*d4^2-Z-r2^2*d3^3*d4+r2^2*d3^2*d4^2-r2^2*d3^2-r2^2*d3*d4^3-r2^2*d4^2-r2^2-d3^5*d4-d3^3*d4^3+2*d3^2*d4^2-d3*d4^5+d3*d4)].

LPP Set of Module Groebner Basis under specialization:
[ t^2 ]

Branch 13:
constraints: r2=0,r-Z=0,d3*d4-d4^2+Z-1=0,d3^2-2=0,d4^3-Z*d3-Z*d4+d3-d4=0,d3^2-d4^2+Z-1!=0,d4!=0,4*d4^2!=0,
RGB from KSW:
[(4*d4^2)  ,  (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-2*r+2*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2+4*d4^2)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4+4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-r*d3*d4-r+Z+r2^2*d3*d4+r2^2+d3^3*d4+d3^2*d4^2+d3*d4^3-d3*d4-4*d4^2)]
[(4*Z+4*d3*d4-4)  ,  (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-2*r+2*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2+4*d4^2)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4+4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-r*d3*d4-r-3*Z+r2^2*d3*d4+r2^2+d3^3*d4+d3^2*d4^2+d3*d4^3-5*d3*d4+4)]
[(4*Z*d4-4*d4)  ,  (-r*d3^2*d4+r*d3*d4^2+r*d3-r*d4-Z*d3+Z*d4+r2^2*d3^2*d4-r2^2*d3*d4^2-r2^2*d3+r2^2*d4+d3^4*d4-2*d3^3*d4^2+2*d3^2*d4^3-d3^2*d4-d3*d4^4+d3*d4^2)*t^4+(2*r*r2*d3*d4-2*r*r2*d4^2-2*r2^3*d3*d4+2*r2^3*d4^2-2*r2*d3^3*d4+6*r2*d3^2*d4^2-6*r2*d3*d4^3-2*r2*d3*d4+2*r2*d4^4+2*r2*d4^2)*t^3+(2*r*d3-2*r*d4-2*Z*d3+2*Z*d4-4*r2^2*d3*d4^2-2*r2^2*d3+4*r2^2*d4^3+2*r2^2*d4+2*d3^3*d4^2-2*d3^2*d4^3-4*d3*d4^2+4*d4^3)*t^2+(2*r*r2*d3*d4-2*r*r2*d4^2-2*r2^3*d3*d4+2*r2^3*d4^2-2*r2*d3^3*d4-2*r2*d3^2*d4^2+2*r2*d3*d4^3-2*r2*d3*d4+2*r2*d4^4+2*r2*d4^2)*t+(r*d3^2*d4-r*d3*d4^2+r*d3-r*d4-Z*d3-3*Z*d4-r2^2*d3^2*d4+r2^2*d3*d4^2-r2^2*d3+r2^2*d4-d3^4*d4+d3^2*d4+d3*d4^4-d3*d4^2+4*d4)]
[(4*Z*d3-4*d3+8*d4)  ,  (r*d3^2*d4-r*d3+Z*d3-r2^2*d3^2*d4+r2^2*d3-d3^4*d4+d3^3*d4^2-d3^2*d4^3+d3^2*d4)*t^4+(-2*r*r2*d3*d4+2*r2^3*d3*d4+2*r2*d3^3*d4-4*r2*d3^2*d4^2+2*r2*d3*d4^3+2*r2*d3*d4)*t^3+(-2*r*d3+2*Z*d3+4*r2^2*d3*d4^2+2*r2^2*d3-2*d3^3*d4^2+4*d3*d4^2)*t^2+(-2*r*r2*d3*d4+2*r2^3*d3*d4+2*r2*d3^3*d4+4*r2*d3^2*d4^2+2*r2*d3*d4^3+2*r2*d3*d4)*t+(-r*d3^2*d4-r*d3-3*Z*d3+r2^2*d3^2*d4+r2^2*d3+d3^4*d4+d3^3*d4^2+d3^2*d4^3-d3^2*d4+4*d3-8*d4)]
[(4*Z^2-8*Z+4)  ,  (2*r*Z*d3*d4-2*r*Z-r*d3*d4^3+r*d4^2+2*Z^2-2*Z*r2^2*d3*d4+2*Z*r2^2-2*Z*d3^3*d4+2*Z*d3^2*d4^2-2*Z*d3*d4^3+2*Z*d3*d4-Z*d4^2+r2^2*d3*d4^3-r2^2*d4^2+d3^3*d4^3-d3^2*d4^4+d3*d4^5-d3*d4^3)*t^4+(-4*r*Z*r2*d4+2*r*r2*d4^3+4*Z*r2^3*d4+4*Z*r2*d3^2*d4-8*Z*r2*d3*d4^2+4*Z*r2*d4^3+4*Z*r2*d4-2*r2^3*d4^3-2*r2*d3^2*d4^3+4*r2*d3*d4^4-2*r2*d4^5-2*r2*d4^3)*t^3+(-4*r*Z+2*r*d4^2+4*Z^2+8*Z*r2^2*d4^2+4*Z*r2^2-4*Z*d3^2*d4^2+6*Z*d4^2-4*r2^2*d4^4-2*r2^2*d4^2+2*d3^2*d4^4-4*d4^4)*t^2+(-4*r*Z*r2*d4+2*r*r2*d4^3+4*Z*r2^3*d4+4*Z*r2*d3^2*d4+8*Z*r2*d3*d4^2+4*Z*r2*d4^3+4*Z*r2*d4-2*r2^3*d4^3-2*r2*d3^2*d4^3-4*r2*d3*d4^4-2*r2*d4^5-2*r2*d4^3)*t+(-2*r*Z*d3*d4-2*r*Z+r*d3*d4^3+r*d4^2-2*Z^2+2*Z*r2^2*d3*d4+2*Z*r2^2+2*Z*d3^3*d4+2*Z*d3^2*d4^2+2*Z*d3*d4^3-2*Z*d3*d4-Z*d4^2+8*Z-r2^2*d3*d4^3-r2^2*d4^2-d3^3*d4^3-d3^2*d4^4-d3*d4^5+d3*d4^3-4)]

Module Groebner basis: 
[(4*d4^2) , (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-2*r+2*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2+4*d4^2)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4+4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-r*d3*d4-r+Z+r2^2*d3*d4+r2^2+d3^3*d4+d3^2*d4^2+d3*d4^3-d3*d4-4*d4^2)].

LPP Set of Module Groebner Basis under specialization:
[ 1 ]

Branch 14:
constraints: r2=0,d3^3-2*d3^2*d4+d3*d4^2-r*d3-d3+2*d4=0,2*d3*d4^3-2*d4^4+r*d3^2-Z*d3^2-2*r*d3*d4+2*Z*d3*d4+3*r*d4^2-Z*d4^2-r^2+r*Z-2*d4^2+r-Z=0,d3^2*d4^2-2*d4^2+r-Z=0,2*d4^5-r*d3^2*d4+Z*d3^2*d4-2*Z*d3*d4^2-3*r*d4^3+Z*d4^3+r^2*d4-r*Z*d4+2*d3*d4^2-2*d4^3-2*r*d3+2*Z*d3+3*r*d4-3*Z*d4=0,d3^2-2*d3*d4+d4^2-r+1!=0,d4!=0,r-Z!=0,4*d4^2-4*r+4*Z!=0,
RGB from KSW:
[(-4*r+4*Z+4*d4^2)  ,  (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-2*r+2*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2+4*d4^2)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4+4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-r*d3*d4+3*r-3*Z+r2^2*d3*d4+r2^2+d3^3*d4+d3^2*d4^2+d3*d4^3-d3*d4-4*d4^2)]
[(4*r*Z-4*Z^2)  ,  (-r^2*d3*d4+r^2-r*Z*d3*d4+r*r2^2*d3*d4-r*r2^2+2*r*d3^3*d4-3*r*d3^2*d4^2-r*d3^2+3*r*d3*d4^3+r*d3*d4-2*r*d4^2-Z^2+Z*r2^2*d3*d4-Z*r2^2+Z*d3^3*d4-Z*d3^2*d4^2+Z*d3^2+Z*d3*d4^3-3*Z*d3*d4+2*Z*d4^2-r2^2*d3^3*d4+2*r2^2*d3^2*d4^2+r2^2*d3^2-2*r2^2*d3*d4^3-2*r2^2*d3*d4+2*r2^2*d4^2-d3^5*d4+3*d3^4*d4^2-5*d3^3*d4^3+d3^3*d4+4*d3^2*d4^4-2*d3^2*d4^2-2*d3*d4^5+2*d3*d4^3)*t^4+(2*r^2*r2*d4+2*r*Z*r2*d4-2*r*r2^3*d4-4*r*r2*d3^2*d4+8*r*r2*d3*d4^2-6*r*r2*d4^3-2*r*r2*d4-2*Z*r2^3*d4-2*Z*r2*d3^2*d4+4*Z*r2*d3*d4^2-2*Z*r2*d4^3-2*Z*r2*d4+2*r2^3*d3^2*d4-4*r2^3*d3*d4^2+4*r2^3*d4^3+2*r2*d3^4*d4-8*r2*d3^3*d4^2+14*r2*d3^2*d4^3+2*r2*d3^2*d4-12*r2*d3*d4^4-4*r2*d3*d4^2+4*r2*d4^5+4*r2*d4^3)*t^3+(2*r^2-4*r*r2^2*d4^2-2*r*r2^2+2*r*d3^2*d4^2-2*r*d3^2+4*r*d3*d4-8*r*d4^2-2*Z^2-4*Z*r2^2*d4^2-2*Z*r2^2+2*Z*d3^2*d4^2+2*Z*d3^2-4*Z*d3*d4+4*r2^2*d3^2*d4^2+2*r2^2*d3^2-8*r2^2*d3*d4^3-4*r2^2*d3*d4+8*r2^2*d4^4+4*r2^2*d4^2-2*d3^4*d4^2+4*d3^3*d4^3-4*d3^2*d4^4+4*d3^2*d4^2-8*d3*d4^3+8*d4^4)*t^2+(2*r^2*r2*d4+2*r*Z*r2*d4-2*r*r2^3*d4-4*r*r2*d3^2*d4-6*r*r2*d4^3-2*r*r2*d4-2*Z*r2^3*d4-2*Z*r2*d3^2*d4-4*Z*r2*d3*d4^2-2*Z*r2*d4^3-2*Z*r2*d4+2*r2^3*d3^2*d4-4*r2^3*d3*d4^2+4*r2^3*d4^3+2*r2*d3^4*d4-2*r2*d3^2*d4^3+2*r2*d3^2*d4+4*r2*d3*d4^4-4*r2*d3*d4^2+4*r2*d4^5+4*r2*d4^3)*t+(r^2*d3*d4+r^2+r*Z*d3*d4-4*r*Z-r*r2^2*d3*d4-r*r2^2-2*r*d3^3*d4+r*d3^2*d4^2-r*d3^2-3*r*d3*d4^3+3*r*d3*d4-2*r*d4^2+3*Z^2-Z*r2^2*d3*d4-Z*r2^2-Z*d3^3*d4-Z*d3^2*d4^2+Z*d3^2-Z*d3*d4^3-Z*d3*d4+2*Z*d4^2+r2^2*d3^3*d4-2*r2^2*d3^2*d4^2+r2^2*d3^2+2*r2^2*d3*d4^3-2*r2^2*d3*d4+2*r2^2*d4^2+d3^5*d4-d3^4*d4^2+d3^3*d4^3-d3^3*d4+2*d3^2*d4^2+2*d3*d4^5-2*d3*d4^3)]
[(-4*Z*d3+4*d3^3-8*d3^2*d4-4*d3+8*d4)  ,  (-r*d3^2*d4+r*d3-Z*d3+r2^2*d3^2*d4-r2^2*d3+d3^4*d4-d3^3*d4^2+d3^2*d4^3-d3^2*d4)*t^4+(2*r*r2*d3*d4-2*r2^3*d3*d4-2*r2*d3^3*d4+4*r2*d3^2*d4^2-2*r2*d3*d4^3-2*r2*d3*d4)*t^3+(2*r*d3-2*Z*d3-4*r2^2*d3*d4^2-2*r2^2*d3+2*d3^3*d4^2-4*d3*d4^2)*t^2+(2*r*r2*d3*d4-2*r2^3*d3*d4-2*r2*d3^3*d4-4*r2*d3^2*d4^2-2*r2*d3*d4^3-2*r2*d3*d4)*t+(r*d3^2*d4+r*d3+3*Z*d3-r2^2*d3^2*d4-r2^2*d3-d3^4*d4-d3^3*d4^2-4*d3^3-d3^2*d4^3+9*d3^2*d4+4*d3-8*d4)]
[(4*r*d3^2-4*r-4*Z*d3^2+4*Z)  ,  (-r*d3^3*d4+r*d3^2+2*r*d3*d4-2*r-Z*d3^2+2*Z+r2^2*d3^3*d4-r2^2*d3^2-2*r2^2*d3*d4+2*r2^2+d3^5*d4-d3^4*d4^2+d3^3*d4^3-3*d3^3*d4+2*d3^2*d4^2-2*d3*d4^3+2*d3*d4)*t^4+(2*r*r2*d3^2*d4-4*r*r2*d4-2*r2^3*d3^2*d4+4*r2^3*d4-2*r2*d3^4*d4+4*r2*d3^3*d4^2-2*r2*d3^2*d4^3+2*r2*d3^2*d4-8*r2*d3*d4^2+4*r2*d4^3+4*r2*d4)*t^3+(2*r*d3^2-4*r-2*Z*d3^2+4*Z-4*r2^2*d3^2*d4^2-2*r2^2*d3^2+8*r2^2*d4^2+4*r2^2+2*d3^4*d4^2-8*d3^2*d4^2+8*d4^2)*t^2+(2*r*r2*d3^2*d4-4*r*r2*d4-2*r2^3*d3^2*d4+4*r2^3*d4-2*r2*d3^4*d4-4*r2*d3^3*d4^2-2*r2*d3^2*d4^3+2*r2*d3^2*d4+8*r2*d3*d4^2+4*r2*d4^3+4*r2*d4)*t+(r*d3^3*d4-3*r*d3^2-2*r*d3*d4+2*r+3*Z*d3^2-2*Z-r2^2*d3^3*d4-r2^2*d3^2+2*r2^2*d3*d4+2*r2^2-d3^5*d4-d3^4*d4^2-d3^3*d4^3+3*d3^3*d4+2*d3^2*d4^2+2*d3*d4^3-2*d3*d4)]

Module Groebner basis: 
[(-4*r+4*Z+4*d4^2) , (r*d3*d4-r+Z-r2^2*d3*d4+r2^2-d3^3*d4+d3^2*d4^2-d3*d4^3+d3*d4)*t^4+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4-4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t^3+(-2*r+2*Z+4*r2^2*d4^2+2*r2^2-2*d3^2*d4^2+4*d4^2)*t^2+(-2*r*r2*d4+2*r2^3*d4+2*r2*d3^2*d4+4*r2*d3*d4^2+2*r2*d4^3+2*r2*d4)*t+(-r*d3*d4+3*r-3*Z+r2^2*d3*d4+r2^2+d3^3*d4+d3^2*d4^2+d3*d4^3-d3*d4-4*d4^2)].

LPP Set of Module Groebner Basis under specialization:
[ 1 ]

Branch 15:
constraints: r2=0,d4^2-r+Z=0,r*Z-Z^2=0,d3^3-2*d3^2*d4-Z*d3-d3+2*d4=0,r*d3^2-Z*d3^2-r+Z=0,d3^2-2*d3*d4+d4^2-r+1!=0,d4!=0,r-Z!=0,
RGB from KSW:
[   ].

Module Groebner basis: 
[  ].


LPP Set of Module Groebner Basis under specialization:
[  ].



